
testnew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbc0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800bd98  0800bd98  0000cd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdd8  0800bdd8  0000d224  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdd8  0800bdd8  0000cdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bde0  0800bde0  0000d224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bde0  0800bde0  0000cde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bde4  0800bde4  0000cde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800bde8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011bc  20000228  0800c00c  0000d228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013e4  0800c00c  0000d3e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af8c  00000000  00000000  0000d254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f2d  00000000  00000000  000281e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0002b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ba  00000000  00000000  0002c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002871b  00000000  00000000  0002d91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019eb3  00000000  00000000  00056035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113740  00000000  00000000  0006fee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00183628  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006300  00000000  00000000  0018366c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0018996c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000228 	.word	0x20000228
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bd80 	.word	0x0800bd80

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000022c 	.word	0x2000022c
 8000214:	0800bd80 	.word	0x0800bd80

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0201 	orr.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000244 	.word	0x20000244

08000ed4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <modbus_3t5_Timeout+0x1c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	755a      	strb	r2, [r3, #21]

}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	20000244 	.word	0x20000244

08000ef4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f009 fddd 	bl	800aabc <HAL_UART_GetError>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b20      	cmp	r3, #32
 8000f06:	d101      	bne.n	8000f0c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000f08:	f7ff ffc4 	bl	8000e94 <modbus_1t5_Timeout>

	}
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f1e:	4a25      	ldr	r2, [pc, #148]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f24:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	4a21      	ldr	r2, [pc, #132]	@ (8000fb8 <Modbus_init+0xa4>)
 8000f32:	210e      	movs	r1, #14
 8000f34:	4618      	mov	r0, r3
 8000f36:	f008 f899 	bl	800906c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2110      	movs	r1, #16
 8000f40:	4618      	mov	r0, r3
 8000f42:	f009 fd65 	bl	800aa10 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f009 fd7c 	bl	800aa48 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	4a19      	ldr	r2, [pc, #100]	@ (8000fbc <Modbus_init+0xa8>)
 8000f56:	2104      	movs	r1, #4
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f009 f843 	bl	8009fe4 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f70:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000f74:	4413      	add	r3, r2
 8000f76:	3302      	adds	r3, #2
 8000f78:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f009 f96b 	bl	800a258 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d10c      	bne.n	8000fac <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000f92:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f007 f839 	bl	8008010 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000f9e:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <Modbus_init+0xa0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f007 fa92 	bl	80084d0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000244 	.word	0x20000244
 8000fb8:	08000ed5 	.word	0x08000ed5
 8000fbc:	08000ef5 	.word	0x08000ef5

08000fc0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000fcc:	23ff      	movs	r3, #255	@ 0xff
 8000fce:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000fd0:	23ff      	movs	r3, #255	@ 0xff
 8000fd2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000fd4:	e013      	b.n	8000ffe <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	7bbb      	ldrb	r3, [r7, #14]
 8000fe0:	4053      	eors	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8001024 <CRC16+0x64>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4413      	add	r3, r2
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	4053      	eors	r3, r2
 8000ff2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8001028 <CRC16+0x68>)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000ffe:	883b      	ldrh	r3, [r7, #0]
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	803a      	strh	r2, [r7, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1e6      	bne.n	8000fd6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	b29b      	uxth	r3, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20000100 	.word	0x20000100
 8001028:	20000000 	.word	0x20000000

0800102c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001032:	4b7e      	ldr	r3, [pc, #504]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	7ddb      	ldrb	r3, [r3, #23]
 8001038:	3b01      	subs	r3, #1
 800103a:	2b03      	cmp	r3, #3
 800103c:	d80a      	bhi.n	8001054 <Modbus_Protocal_Worker+0x28>
 800103e:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <Modbus_Protocal_Worker+0x18>)
 8001040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001044:	0800105f 	.word	0x0800105f
 8001048:	080011f3 	.word	0x080011f3
 800104c:	080010eb 	.word	0x080010eb
 8001050:	0800112f 	.word	0x0800112f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001054:	4b75      	ldr	r3, [pc, #468]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2201      	movs	r2, #1
 800105a:	75da      	strb	r2, [r3, #23]
		break;
 800105c:	e0e1      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800105e:	4b73      	ldr	r3, [pc, #460]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800106a:	4b70      	ldr	r3, [pc, #448]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2202      	movs	r2, #2
 8001070:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001072:	f000 f9cd 	bl	8001410 <Modbus_Emission>
 8001076:	e018      	b.n	80010aa <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001078:	4b6c      	ldr	r3, [pc, #432]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001082:	4b6a      	ldr	r3, [pc, #424]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800108c:	b29b      	uxth	r3, r3
 800108e:	429a      	cmp	r2, r3
 8001090:	d00b      	beq.n	80010aa <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001092:	4b66      	ldr	r3, [pc, #408]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2200      	movs	r2, #0
 8001098:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800109a:	4b64      	ldr	r3, [pc, #400]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010a2:	4b62      	ldr	r3, [pc, #392]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2203      	movs	r2, #3
 80010a8:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010aa:	4b60      	ldr	r3, [pc, #384]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010b4:	2b20      	cmp	r3, #32
 80010b6:	f040 80ad 	bne.w	8001214 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010ba:	4b5c      	ldr	r3, [pc, #368]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80010c4:	4b59      	ldr	r3, [pc, #356]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80010ca:	4b58      	ldr	r3, [pc, #352]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b57      	ldr	r3, [pc, #348]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80010d6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80010da:	4413      	add	r3, r2
 80010dc:	3302      	adds	r3, #2
 80010de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010e2:	4619      	mov	r1, r3
 80010e4:	f009 f8b8 	bl	800a258 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80010e8:	e094      	b.n	8001214 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80010ea:	4b50      	ldr	r3, [pc, #320]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	7d1b      	ldrb	r3, [r3, #20]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 8091 	beq.w	8001218 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80010f6:	4b4d      	ldr	r3, [pc, #308]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	22fe      	movs	r2, #254	@ 0xfe
 80010fc:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80010fe:	4b4b      	ldr	r3, [pc, #300]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001108:	4b48      	ldr	r3, [pc, #288]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001118:	4b44      	ldr	r3, [pc, #272]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800111a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800111c:	1a8a      	subs	r2, r1, r2
 800111e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001120:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001124:	4b41      	ldr	r3, [pc, #260]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2204      	movs	r2, #4
 800112a:	75da      	strb	r2, [r3, #23]
		}
		break;
 800112c:	e074      	b.n	8001218 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800112e:	4b3f      	ldr	r3, [pc, #252]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001136:	f113 0f02 	cmn.w	r3, #2
 800113a:	d150      	bne.n	80011de <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800113c:	4b3b      	ldr	r3, [pc, #236]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2200      	movs	r2, #0
 8001142:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001144:	4b39      	ldr	r3, [pc, #228]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800114c:	4b37      	ldr	r3, [pc, #220]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001154:	3b02      	subs	r3, #2
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f7ff ff31 	bl	8000fc0 <CRC16>
 800115e:	4603      	mov	r3, r0
 8001160:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001162:	793a      	ldrb	r2, [r7, #4]
 8001164:	4b31      	ldr	r3, [pc, #196]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001166:	6819      	ldr	r1, [r3, #0]
 8001168:	4b30      	ldr	r3, [pc, #192]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001170:	3b02      	subs	r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001178:	429a      	cmp	r2, r3
 800117a:	d10c      	bne.n	8001196 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800117c:	797a      	ldrb	r2, [r7, #5]
 800117e:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800118a:	3b01      	subs	r3, #1
 800118c:	440b      	add	r3, r1
 800118e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001192:	429a      	cmp	r2, r3
 8001194:	d004      	beq.n	80011a0 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001196:	4b25      	ldr	r3, [pc, #148]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	22ff      	movs	r2, #255	@ 0xff
 800119c:	759a      	strb	r2, [r3, #22]
				break;
 800119e:	e040      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011a0:	4b22      	ldr	r3, [pc, #136]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80011a8:	4b20      	ldr	r3, [pc, #128]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d113      	bne.n	80011da <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011b2:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80011c2:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011cc:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80011ce:	461a      	mov	r2, r3
 80011d0:	f00a fdc8 	bl	800bd64 <memcpy>

			//execute command
			Modbus_frame_response();
 80011d4:	f000 f904 	bl	80013e0 <Modbus_frame_response>
 80011d8:	e001      	b.n	80011de <Modbus_Protocal_Worker+0x1b2>
				break;
 80011da:	bf00      	nop
					}
		break;


	}
}
 80011dc:	e021      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80011de:	4b13      	ldr	r3, [pc, #76]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	7d5b      	ldrb	r3, [r3, #21]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d019      	beq.n	800121c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80011e8:	4b10      	ldr	r3, [pc, #64]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	75da      	strb	r2, [r3, #23]
		break;
 80011f0:	e014      	b.n	800121c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011fc:	2b20      	cmp	r3, #32
 80011fe:	d10f      	bne.n	8001220 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001200:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2201      	movs	r2, #1
 8001210:	75da      	strb	r2, [r3, #23]
		break;
 8001212:	e005      	b.n	8001220 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001214:	bf00      	nop
 8001216:	e004      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001218:	bf00      	nop
 800121a:	e002      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 800121c:	bf00      	nop
 800121e:	e000      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001220:	bf00      	nop
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000244 	.word	0x20000244

08001230 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001236:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	7e5b      	ldrb	r3, [r3, #25]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b29b      	uxth	r3, r3
 8001240:	4a1a      	ldr	r2, [pc, #104]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	7e92      	ldrb	r2, [r2, #26]
 8001246:	4413      	add	r3, r2
 8001248:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800124a:	88fa      	ldrh	r2, [r7, #6]
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <modbusWrite1Register+0x7c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	429a      	cmp	r2, r3
 8001254:	d903      	bls.n	800125e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001256:	2002      	movs	r0, #2
 8001258:	f000 f8a0 	bl	800139c <ModbusErrorReply>
			 return;
 800125c:	e023      	b.n	80012a6 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6859      	ldr	r1, [r3, #4]
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	440b      	add	r3, r1
 800126e:	7ed2      	ldrb	r2, [r2, #27]
 8001270:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	440b      	add	r3, r1
 8001282:	7f12      	ldrb	r2, [r2, #28]
 8001284:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800128e:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001294:	2208      	movs	r2, #8
 8001296:	4619      	mov	r1, r3
 8001298:	f00a fd64 	bl	800bd64 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <modbusWrite1Register+0x7c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2205      	movs	r2, #5
 80012a2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000244 	.word	0x20000244

080012b0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012b6:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <modbusRead1Register+0xe8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	7edb      	ldrb	r3, [r3, #27]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4a35      	ldr	r2, [pc, #212]	@ (8001398 <modbusRead1Register+0xe8>)
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	7f12      	ldrb	r2, [r2, #28]
 80012c6:	4413      	add	r3, r2
 80012c8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80012ca:	4b33      	ldr	r3, [pc, #204]	@ (8001398 <modbusRead1Register+0xe8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	7e5b      	ldrb	r3, [r3, #25]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4a30      	ldr	r2, [pc, #192]	@ (8001398 <modbusRead1Register+0xe8>)
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	7e92      	ldrb	r2, [r2, #26]
 80012da:	4413      	add	r3, r2
 80012dc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <modbusRead1Register+0x3a>
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	2b7d      	cmp	r3, #125	@ 0x7d
 80012e8:	d903      	bls.n	80012f2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f000 f856 	bl	800139c <ModbusErrorReply>
		 return;
 80012f0:	e04e      	b.n	8001390 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80012f2:	88ba      	ldrh	r2, [r7, #4]
 80012f4:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <modbusRead1Register+0xe8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d808      	bhi.n	8001310 <modbusRead1Register+0x60>
 80012fe:	88ba      	ldrh	r2, [r7, #4]
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	4413      	add	r3, r2
 8001304:	461a      	mov	r2, r3
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <modbusRead1Register+0xe8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	429a      	cmp	r2, r3
 800130e:	d903      	bls.n	8001318 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001310:	2002      	movs	r0, #2
 8001312:	f000 f843 	bl	800139c <ModbusErrorReply>
		 return;
 8001316:	e03b      	b.n	8001390 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001318:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <modbusRead1Register+0xe8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2203      	movs	r2, #3
 800131e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b1c      	ldr	r3, [pc, #112]	@ (8001398 <modbusRead1Register+0xe8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	0052      	lsls	r2, r2, #1
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001332:	2400      	movs	r4, #0
 8001334:	e020      	b.n	8001378 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <modbusRead1Register+0xe8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	4423      	add	r3, r4
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	18d1      	adds	r1, r2, r3
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <modbusRead1Register+0xe8>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	1c63      	adds	r3, r4, #1
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	7849      	ldrb	r1, [r1, #1]
 800134e:	4413      	add	r3, r2
 8001350:	460a      	mov	r2, r1
 8001352:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <modbusRead1Register+0xe8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	4423      	add	r3, r4
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	18d1      	adds	r1, r2, r3
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <modbusRead1Register+0xe8>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	0063      	lsls	r3, r4, #1
 800136a:	3303      	adds	r3, #3
 800136c:	7809      	ldrb	r1, [r1, #0]
 800136e:	4413      	add	r3, r2
 8001370:	460a      	mov	r2, r1
 8001372:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001376:	3401      	adds	r4, #1
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	429c      	cmp	r4, r3
 800137c:	dbdb      	blt.n	8001336 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	3301      	adds	r3, #1
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <modbusRead1Register+0xe8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0052      	lsls	r2, r2, #1
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bd90      	pop	{r4, r7, pc}
 8001396:	bf00      	nop
 8001398:	20000244 	.word	0x20000244

0800139c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <ModbusErrorReply+0x40>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	7e1a      	ldrb	r2, [r3, #24]
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <ModbusErrorReply+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <ModbusErrorReply+0x40>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	79fa      	ldrb	r2, [r7, #7]
 80013c0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <ModbusErrorReply+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2202      	movs	r2, #2
 80013ca:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000244 	.word	0x20000244

080013e0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <Modbus_frame_response+0x2c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	7e1b      	ldrb	r3, [r3, #24]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d004      	beq.n	80013f8 <Modbus_frame_response+0x18>
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d105      	bne.n	80013fe <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80013f2:	f7ff ff1d 	bl	8001230 <modbusWrite1Register>
		break;
 80013f6:	e006      	b.n	8001406 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80013f8:	f7ff ff5a 	bl	80012b0 <modbusRead1Register>
		break;
 80013fc:	e003      	b.n	8001406 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80013fe:	2001      	movs	r0, #1
 8001400:	f7ff ffcc 	bl	800139c <ModbusErrorReply>
		break;
 8001404:	bf00      	nop

	}
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000244 	.word	0x20000244

08001410 <Modbus_Emission>:

void Modbus_Emission()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001416:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001420:	2b20      	cmp	r3, #32
 8001422:	d15d      	bne.n	80014e0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001424:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b33      	ldr	r3, [pc, #204]	@ (80014f8 <Modbus_Emission+0xe8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001432:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800143a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800143c:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <Modbus_Emission+0xe8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001444:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 800144c:	461a      	mov	r2, r3
 800144e:	f00a fc89 	bl	800bd64 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800145a:	461a      	mov	r2, r3
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <Modbus_Emission+0xe8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3203      	adds	r2, #3
 8001462:	b292      	uxth	r2, r2
 8001464:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001468:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <Modbus_Emission+0xe8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001470:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001478:	3b02      	subs	r3, #2
 800147a:	4619      	mov	r1, r3
 800147c:	4610      	mov	r0, r2
 800147e:	f7ff fd9f 	bl	8000fc0 <CRC16>
 8001482:	4603      	mov	r3, r0
 8001484:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <Modbus_Emission+0xe8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001492:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001494:	7939      	ldrb	r1, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	460a      	mov	r2, r1
 800149a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014aa:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014ac:	7979      	ldrb	r1, [r7, #5]
 80014ae:	4413      	add	r3, r2
 80014b0:	460a      	mov	r2, r1
 80014b2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	d10d      	bne.n	80014e0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80014d6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014da:	461a      	mov	r2, r3
 80014dc:	f008 fe3c 	bl	800a158 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	755a      	strb	r2, [r3, #21]

}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000244 	.word	0x20000244
 80014fc:	00000000 	.word	0x00000000

08001500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001508:	f003 f94d 	bl	80047a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150c:	f000 fbfa 	bl	8001d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001510:	f000 ffce 	bl	80024b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001514:	f000 ff92 	bl	800243c <MX_DMA_Init>
  MX_TIM1_Init();
 8001518:	f000 fcc8 	bl	8001eac <MX_TIM1_Init>
  MX_TIM2_Init();
 800151c:	f000 fd1a 	bl	8001f54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001520:	f000 fd66 	bl	8001ff0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001524:	f000 fdba 	bl	800209c <MX_TIM4_Init>
  MX_TIM8_Init();
 8001528:	f000 feb6 	bl	8002298 <MX_TIM8_Init>
  MX_TIM5_Init();
 800152c:	f000 fe2e 	bl	800218c <MX_TIM5_Init>
  MX_ADC3_Init();
 8001530:	f000 fc34 	bl	8001d9c <MX_ADC3_Init>
  MX_USART2_UART_Init();
 8001534:	f000 ff34 	bl	80023a0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001538:	f000 ff02 	bl	8002340 <MX_TIM16_Init>
  MX_TIM6_Init();
 800153c:	f000 fe74 	bl	8002228 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8001540:	4894      	ldr	r0, [pc, #592]	@ (8001794 <main+0x294>)
 8001542:	f006 fcf5 	bl	8007f30 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001546:	2100      	movs	r1, #0
 8001548:	4892      	ldr	r0, [pc, #584]	@ (8001794 <main+0x294>)
 800154a:	f006 fe47 	bl	80081dc <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800154e:	213c      	movs	r1, #60	@ 0x3c
 8001550:	4891      	ldr	r0, [pc, #580]	@ (8001798 <main+0x298>)
 8001552:	f007 f8ff 	bl	8008754 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001556:	4891      	ldr	r0, [pc, #580]	@ (800179c <main+0x29c>)
 8001558:	f006 fd5a 	bl	8008010 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800155c:	4890      	ldr	r0, [pc, #576]	@ (80017a0 <main+0x2a0>)
 800155e:	f006 fd57 	bl	8008010 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001562:	217f      	movs	r1, #127	@ 0x7f
 8001564:	488f      	ldr	r0, [pc, #572]	@ (80017a4 <main+0x2a4>)
 8001566:	f004 fcbf 	bl	8005ee8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc3, joyAnalogRead, 40);
 800156a:	2228      	movs	r2, #40	@ 0x28
 800156c:	498e      	ldr	r1, [pc, #568]	@ (80017a8 <main+0x2a8>)
 800156e:	488d      	ldr	r0, [pc, #564]	@ (80017a4 <main+0x2a4>)
 8001570:	f003 fdac 	bl	80050cc <HAL_ADC_Start_DMA>
  _micros = 0;
 8001574:	498d      	ldr	r1, [pc, #564]	@ (80017ac <main+0x2ac>)
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	e9c1 2300 	strd	r2, r3, [r1]

	Velocontrol.kp = 162;//225;//180
 8001582:	4b8b      	ldr	r3, [pc, #556]	@ (80017b0 <main+0x2b0>)
 8001584:	4a8b      	ldr	r2, [pc, #556]	@ (80017b4 <main+0x2b4>)
 8001586:	619a      	str	r2, [r3, #24]
	Velocontrol.ki = 0;//2;//25
 8001588:	4b89      	ldr	r3, [pc, #548]	@ (80017b0 <main+0x2b0>)
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	61da      	str	r2, [r3, #28]
	Velocontrol.kd = 0;
 8001590:	4b87      	ldr	r3, [pc, #540]	@ (80017b0 <main+0x2b0>)
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
	Velocontrol.T = 0.0001;
 8001598:	4b85      	ldr	r3, [pc, #532]	@ (80017b0 <main+0x2b0>)
 800159a:	4a87      	ldr	r2, [pc, #540]	@ (80017b8 <main+0x2b8>)
 800159c:	625a      	str	r2, [r3, #36]	@ 0x24

	Poscontrol.kp = 1;//0.5667;//2.015,0.6
 800159e:	4b87      	ldr	r3, [pc, #540]	@ (80017bc <main+0x2bc>)
 80015a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015a4:	619a      	str	r2, [r3, #24]
	Poscontrol.ki = 0.4;//1.29;//4.5425,1.34
 80015a6:	4b85      	ldr	r3, [pc, #532]	@ (80017bc <main+0x2bc>)
 80015a8:	4a85      	ldr	r2, [pc, #532]	@ (80017c0 <main+0x2c0>)
 80015aa:	61da      	str	r2, [r3, #28]
	Poscontrol.kd = 0.0000007;//0.000001;//0.0000021,0.0000004
 80015ac:	4b83      	ldr	r3, [pc, #524]	@ (80017bc <main+0x2bc>)
 80015ae:	4a85      	ldr	r2, [pc, #532]	@ (80017c4 <main+0x2c4>)
 80015b0:	621a      	str	r2, [r3, #32]
	Poscontrol.T = 0.0001;
 80015b2:	4b82      	ldr	r3, [pc, #520]	@ (80017bc <main+0x2bc>)
 80015b4:	4a80      	ldr	r2, [pc, #512]	@ (80017b8 <main+0x2b8>)
 80015b6:	625a      	str	r2, [r3, #36]	@ 0x24

	Velocontrol2.kp = 50;//225;//180
 80015b8:	4b83      	ldr	r3, [pc, #524]	@ (80017c8 <main+0x2c8>)
 80015ba:	4a84      	ldr	r2, [pc, #528]	@ (80017cc <main+0x2cc>)
 80015bc:	619a      	str	r2, [r3, #24]
	Velocontrol2.ki = 1;//2;//25
 80015be:	4b82      	ldr	r3, [pc, #520]	@ (80017c8 <main+0x2c8>)
 80015c0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015c4:	61da      	str	r2, [r3, #28]
	Velocontrol2.kd = 0;
 80015c6:	4b80      	ldr	r3, [pc, #512]	@ (80017c8 <main+0x2c8>)
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	621a      	str	r2, [r3, #32]
	Velocontrol2.T = 0.0001;
 80015ce:	4b7e      	ldr	r3, [pc, #504]	@ (80017c8 <main+0x2c8>)
 80015d0:	4a79      	ldr	r2, [pc, #484]	@ (80017b8 <main+0x2b8>)
 80015d2:	625a      	str	r2, [r3, #36]	@ 0x24

	Poscontrol2.kp = 10;//0.5667;//2.015,0.6
 80015d4:	4b7e      	ldr	r3, [pc, #504]	@ (80017d0 <main+0x2d0>)
 80015d6:	4a7f      	ldr	r2, [pc, #508]	@ (80017d4 <main+0x2d4>)
 80015d8:	619a      	str	r2, [r3, #24]
	Poscontrol2.ki = 1;//1.29;//4.5425,1.34
 80015da:	4b7d      	ldr	r3, [pc, #500]	@ (80017d0 <main+0x2d0>)
 80015dc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015e0:	61da      	str	r2, [r3, #28]
	Poscontrol2.kd = 0.0000007;//0.000001;//0.0000021,0.0000004
 80015e2:	4b7b      	ldr	r3, [pc, #492]	@ (80017d0 <main+0x2d0>)
 80015e4:	4a77      	ldr	r2, [pc, #476]	@ (80017c4 <main+0x2c4>)
 80015e6:	621a      	str	r2, [r3, #32]
	Poscontrol2.T = 0.0001;
 80015e8:	4b79      	ldr	r3, [pc, #484]	@ (80017d0 <main+0x2d0>)
 80015ea:	4a73      	ldr	r2, [pc, #460]	@ (80017b8 <main+0x2b8>)
 80015ec:	625a      	str	r2, [r3, #36]	@ 0x24

	hmodbus.huart = &huart2;
 80015ee:	4b7a      	ldr	r3, [pc, #488]	@ (80017d8 <main+0x2d8>)
 80015f0:	4a7a      	ldr	r2, [pc, #488]	@ (80017dc <main+0x2dc>)
 80015f2:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 80015f4:	4b78      	ldr	r3, [pc, #480]	@ (80017d8 <main+0x2d8>)
 80015f6:	4a7a      	ldr	r2, [pc, #488]	@ (80017e0 <main+0x2e0>)
 80015f8:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80015fa:	4b77      	ldr	r3, [pc, #476]	@ (80017d8 <main+0x2d8>)
 80015fc:	2215      	movs	r2, #21
 80015fe:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize =200;
 8001600:	4b75      	ldr	r3, [pc, #468]	@ (80017d8 <main+0x2d8>)
 8001602:	22c8      	movs	r2, #200	@ 0xc8
 8001604:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001606:	4977      	ldr	r1, [pc, #476]	@ (80017e4 <main+0x2e4>)
 8001608:	4873      	ldr	r0, [pc, #460]	@ (80017d8 <main+0x2d8>)
 800160a:	f7ff fc83 	bl	8000f14 <Modbus_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //ModBus
	  Modbus_Protocal_Worker();
 800160e:	f7ff fd0d 	bl	800102c <Modbus_Protocal_Worker>
	  State_To_Mode();
 8001612:	f002 f99b 	bl	800394c <State_To_Mode>
	  UpdatePosRoutine();
 8001616:	f002 fa59 	bl	8003acc <UpdatePosRoutine>
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);//PULL/PUSH
//	  HAL_Delay(1000);
	  //ModBus

	  //Timer SET
	  int64_t currentTime = micros();
 800161a:	f002 fd1f 	bl	800405c <micros>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	e9c7 2300 	strd	r2, r3, [r7]
	  static uint64_t timestamp =0;
	  static uint64_t timestamp5 =0;
	  //Timer SET

		//ReadSensor
		if(currentTime > timestamp)
 8001626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800162a:	496f      	ldr	r1, [pc, #444]	@ (80017e8 <main+0x2e8>)
 800162c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001630:	4290      	cmp	r0, r2
 8001632:	eb71 0303 	sbcs.w	r3, r1, r3
 8001636:	d20e      	bcs.n	8001656 <main+0x156>
			{
			QEIEncoderPos_Update();
 8001638:	f001 fc1e 	bl	8002e78 <QEIEncoderPos_Update>
			QEIEncoderVel_Update();
 800163c:	f001 fc88 	bl	8002f50 <QEIEncoderVel_Update>
			timestamp =currentTime + 50;//us
 8001640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001644:	f112 0432 	adds.w	r4, r2, #50	@ 0x32
 8001648:	f143 0500 	adc.w	r5, r3, #0
 800164c:	4622      	mov	r2, r4
 800164e:	462b      	mov	r3, r5
 8001650:	4965      	ldr	r1, [pc, #404]	@ (80017e8 <main+0x2e8>)
 8001652:	e9c1 2300 	strd	r2, r3, [r1]
			}
		SensorRead();
 8001656:	f002 fc4f 	bl	8003ef8 <SensorRead>
		//ReadSensor

	  switch (state_ALL)
 800165a:	4b64      	ldr	r3, [pc, #400]	@ (80017ec <main+0x2ec>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b07      	cmp	r3, #7
 8001660:	d8d5      	bhi.n	800160e <main+0x10e>
 8001662:	a201      	add	r2, pc, #4	@ (adr r2, 8001668 <main+0x168>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	08001689 	.word	0x08001689
 800166c:	0800168f 	.word	0x0800168f
 8001670:	080016bd 	.word	0x080016bd
 8001674:	08001731 	.word	0x08001731
 8001678:	080019a7 	.word	0x080019a7
 800167c:	080019b1 	.word	0x080019b1
 8001680:	08001b0b 	.word	0x08001b0b
 8001684:	0800160f 	.word	0x0800160f
	  			{
	  			case 0://HOME
	  				SetHome();
 8001688:	f002 fb0c 	bl	8003ca4 <SetHome>
	  				break;
 800168c:	e31e      	b.n	8001ccc <main+0x7cc>
	  			case 1://Standby
	  				if(start == 1)//MODBUS HERE
 800168e:	4b58      	ldr	r3, [pc, #352]	@ (80017f0 <main+0x2f0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d102      	bne.n	800169c <main+0x19c>
	  				{
	  					state_ALL = 2;
 8001696:	4b55      	ldr	r3, [pc, #340]	@ (80017ec <main+0x2ec>)
 8001698:	2202      	movs	r2, #2
 800169a:	601a      	str	r2, [r3, #0]
	  				}
	  				if(ButtonTest[1] == 0)//MODBUS HERE
 800169c:	4b55      	ldr	r3, [pc, #340]	@ (80017f4 <main+0x2f4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <main+0x1aa>
					{
						state_ALL = 4;
 80016a4:	4b51      	ldr	r3, [pc, #324]	@ (80017ec <main+0x2ec>)
 80016a6:	2204      	movs	r2, #4
 80016a8:	601a      	str	r2, [r3, #0]
					}
	  				if(start == 1)//HOME Button
 80016aa:	4b51      	ldr	r3, [pc, #324]	@ (80017f0 <main+0x2f0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	f040 8304 	bne.w	8001cbc <main+0x7bc>
					{
						state_ALL = 2;
 80016b4:	4b4d      	ldr	r3, [pc, #308]	@ (80017ec <main+0x2ec>)
 80016b6:	2202      	movs	r2, #2
 80016b8:	601a      	str	r2, [r3, #0]
					}
	  				break;
 80016ba:	e2ff      	b.n	8001cbc <main+0x7bc>
	  			case 2://JOY SET
	  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 80016bc:	2201      	movs	r2, #1
 80016be:	2108      	movs	r1, #8
 80016c0:	484d      	ldr	r0, [pc, #308]	@ (80017f8 <main+0x2f8>)
 80016c2:	f005 fb57 	bl	8006d74 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2104      	movs	r1, #4
 80016ca:	484b      	ldr	r0, [pc, #300]	@ (80017f8 <main+0x2f8>)
 80016cc:	f005 fb52 	bl	8006d74 <HAL_GPIO_WritePin>
	  				Joy_State();
 80016d0:	f001 f82c 	bl	800272c <Joy_State>
	  				Vacuum();
 80016d4:	f002 fa6c 	bl	8003bb0 <Vacuum>
	  				GripperMovement();
 80016d8:	f002 fa88 	bl	8003bec <GripperMovement>
	  				if(ButtonTest[0] == 0)//HOME Button
 80016dc:	4b45      	ldr	r3, [pc, #276]	@ (80017f4 <main+0x2f4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d109      	bne.n	80016f8 <main+0x1f8>
					{
	  					Pos_Target = 0;
 80016e4:	4b45      	ldr	r3, [pc, #276]	@ (80017fc <main+0x2fc>)
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
						state_ALL = 0;
 80016ec:	4b3f      	ldr	r3, [pc, #252]	@ (80017ec <main+0x2ec>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
						Mode = 0;
 80016f2:	4b43      	ldr	r3, [pc, #268]	@ (8001800 <main+0x300>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
					}
	  				if(ButtonTest[1] == 0)
 80016f8:	4b3e      	ldr	r3, [pc, #248]	@ (80017f4 <main+0x2f4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <main+0x206>
					{
						state_ALL = 4;
 8001700:	4b3a      	ldr	r3, [pc, #232]	@ (80017ec <main+0x2ec>)
 8001702:	2204      	movs	r2, #4
 8001704:	601a      	str	r2, [r3, #0]
					}
	  				if(ButtonTest[2] == 0)
 8001706:	4b3b      	ldr	r3, [pc, #236]	@ (80017f4 <main+0x2f4>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <main+0x214>
					{
						state_ALL = 5;
 800170e:	4b37      	ldr	r3, [pc, #220]	@ (80017ec <main+0x2ec>)
 8001710:	2205      	movs	r2, #5
 8001712:	601a      	str	r2, [r3, #0]
					}
	  				if(ButtonTest[3] == 0)
 8001714:	4b37      	ldr	r3, [pc, #220]	@ (80017f4 <main+0x2f4>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <main+0x220>
					{
	  					Trajectory();
 800171c:	f001 fd64 	bl	80031e8 <Trajectory>
					}
	  				if(start == 1)
 8001720:	4b33      	ldr	r3, [pc, #204]	@ (80017f0 <main+0x2f0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	f040 82cb 	bne.w	8001cc0 <main+0x7c0>
	  				{
//	  					state_ALL = 3;
//	  					start = 0;
						Trajectory();
 800172a:	f001 fd5d 	bl	80031e8 <Trajectory>
	  				}
	  				break;
 800172e:	e2c7      	b.n	8001cc0 <main+0x7c0>
	  			case 3://PID
	  				if(Mode == 1)
 8001730:	4b33      	ldr	r3, [pc, #204]	@ (8001800 <main+0x300>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	f040 80bf 	bne.w	80018b8 <main+0x3b8>
	  				{
	  					Trajectory();
 800173a:	f001 fd55 	bl	80031e8 <Trajectory>
						if(CountSetpoint < 100)
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <main+0x304>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b63      	cmp	r3, #99	@ 0x63
 8001744:	dc02      	bgt.n	800174c <main+0x24c>
						{
							PIDposition();
 8001746:	f001 ffa5 	bl	8003694 <PIDposition>
 800174a:	e074      	b.n	8001836 <main+0x336>
						}
						else
						{
							if(state_ALL_Old == 5 || state_ALL_Old == 0 || state_ALL_Old == 7 || state_ALL_Old == 8)
 800174c:	4b2e      	ldr	r3, [pc, #184]	@ (8001808 <main+0x308>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b05      	cmp	r3, #5
 8001752:	d00b      	beq.n	800176c <main+0x26c>
 8001754:	4b2c      	ldr	r3, [pc, #176]	@ (8001808 <main+0x308>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d007      	beq.n	800176c <main+0x26c>
 800175c:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <main+0x308>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b07      	cmp	r3, #7
 8001762:	d003      	beq.n	800176c <main+0x26c>
 8001764:	4b28      	ldr	r3, [pc, #160]	@ (8001808 <main+0x308>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b08      	cmp	r3, #8
 800176a:	d14f      	bne.n	800180c <main+0x30c>
							{
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2101      	movs	r1, #1
 8001770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001774:	f005 fafe 	bl	8006d74 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <main+0x294>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2200      	movs	r2, #0
 800177e:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 8001780:	f001 fa6a 	bl	8002c58 <reset>
							state_ALL = 6;
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <main+0x2ec>)
 8001786:	2206      	movs	r2, #6
 8001788:	601a      	str	r2, [r3, #0]
	//						state_ALL = 2;
							CountSetpoint = 0;
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <main+0x304>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e04e      	b.n	8001830 <main+0x330>
 8001792:	bf00      	nop
 8001794:	20000578 	.word	0x20000578
 8001798:	200004ac 	.word	0x200004ac
 800179c:	20000710 	.word	0x20000710
 80017a0:	20000644 	.word	0x20000644
 80017a4:	20000248 	.word	0x20000248
 80017a8:	200012dc 	.word	0x200012dc
 80017ac:	20001390 	.word	0x20001390
 80017b0:	20001218 	.word	0x20001218
 80017b4:	43220000 	.word	0x43220000
 80017b8:	38d1b717 	.word	0x38d1b717
 80017bc:	20001240 	.word	0x20001240
 80017c0:	3ecccccd 	.word	0x3ecccccd
 80017c4:	353be7a2 	.word	0x353be7a2
 80017c8:	20001268 	.word	0x20001268
 80017cc:	42480000 	.word	0x42480000
 80017d0:	20001290 	.word	0x20001290
 80017d4:	41200000 	.word	0x41200000
 80017d8:	20000b00 	.word	0x20000b00
 80017dc:	20000974 	.word	0x20000974
 80017e0:	200008a8 	.word	0x200008a8
 80017e4:	20000fd8 	.word	0x20000fd8
 80017e8:	20001398 	.word	0x20001398
 80017ec:	20000204 	.word	0x20000204
 80017f0:	200011ac 	.word	0x200011ac
 80017f4:	200011c0 	.word	0x200011c0
 80017f8:	48000800 	.word	0x48000800
 80017fc:	200012bc 	.word	0x200012bc
 8001800:	2000116c 	.word	0x2000116c
 8001804:	200011e0 	.word	0x200011e0
 8001808:	200011b0 	.word	0x200011b0
							}
							else
							{
							state_ALL = 2;
 800180c:	4b9e      	ldr	r3, [pc, #632]	@ (8001a88 <main+0x588>)
 800180e:	2202      	movs	r2, #2
 8001810:	601a      	str	r2, [r3, #0]
							CountSetpoint = 0;
 8001812:	4b9e      	ldr	r3, [pc, #632]	@ (8001a8c <main+0x58c>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2101      	movs	r1, #1
 800181c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001820:	f005 faa8 	bl	8006d74 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001824:	4b9a      	ldr	r3, [pc, #616]	@ (8001a90 <main+0x590>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2200      	movs	r2, #0
 800182a:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 800182c:	f001 fa14 	bl	8002c58 <reset>
							}
							registerFrame[0x10].U16 = 0b0000;
 8001830:	4b98      	ldr	r3, [pc, #608]	@ (8001a94 <main+0x594>)
 8001832:	2200      	movs	r2, #0
 8001834:	841a      	strh	r2, [r3, #32]

						}
						if(ButtonTest[0] == 0)//HOME Button
 8001836:	4b98      	ldr	r3, [pc, #608]	@ (8001a98 <main+0x598>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d107      	bne.n	800184e <main+0x34e>
						{
							state_ALL = 0;
 800183e:	4b92      	ldr	r3, [pc, #584]	@ (8001a88 <main+0x588>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
							Mode = 0;
 8001844:	4b95      	ldr	r3, [pc, #596]	@ (8001a9c <main+0x59c>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
							reset();
 800184a:	f001 fa05 	bl	8002c58 <reset>
						}
						if(fabs(Pos-Pos_Target) <= 0.8)//Limit
 800184e:	4b94      	ldr	r3, [pc, #592]	@ (8001aa0 <main+0x5a0>)
 8001850:	ed93 7a00 	vldr	s14, [r3]
 8001854:	4b93      	ldr	r3, [pc, #588]	@ (8001aa4 <main+0x5a4>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185e:	eef0 7ae7 	vabs.f32	s15, s15
 8001862:	ee17 0a90 	vmov	r0, s15
 8001866:	f7fe fe3b 	bl	80004e0 <__aeabi_f2d>
 800186a:	a385      	add	r3, pc, #532	@ (adr r3, 8001a80 <main+0x580>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7ff f90a 	bl	8000a88 <__aeabi_dcmple>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d01a      	beq.n	80018b0 <main+0x3b0>
						{
							if(currentTime > timestamp5)
 800187a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800187e:	498a      	ldr	r1, [pc, #552]	@ (8001aa8 <main+0x5a8>)
 8001880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001884:	4290      	cmp	r0, r2
 8001886:	eb71 0303 	sbcs.w	r3, r1, r3
 800188a:	f080 821b 	bcs.w	8001cc4 <main+0x7c4>
						  {
								CountSetpoint++;
 800188e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a8c <main+0x58c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3301      	adds	r3, #1
 8001894:	4a7d      	ldr	r2, [pc, #500]	@ (8001a8c <main+0x58c>)
 8001896:	6013      	str	r3, [r2, #0]
								timestamp5 =currentTime + 1000;
 8001898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800189c:	f512 787a 	adds.w	r8, r2, #1000	@ 0x3e8
 80018a0:	f143 0900 	adc.w	r9, r3, #0
 80018a4:	4642      	mov	r2, r8
 80018a6:	464b      	mov	r3, r9
 80018a8:	497f      	ldr	r1, [pc, #508]	@ (8001aa8 <main+0x5a8>)
 80018aa:	e9c1 2300 	strd	r2, r3, [r1]
						{
							CountSetpoint = 0;
						}
	  				}

	  				break;
 80018ae:	e209      	b.n	8001cc4 <main+0x7c4>
							CountSetpoint = 0;
 80018b0:	4b76      	ldr	r3, [pc, #472]	@ (8001a8c <main+0x58c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
	  				break;
 80018b6:	e205      	b.n	8001cc4 <main+0x7c4>
	  					Trajectory();
 80018b8:	f001 fc96 	bl	80031e8 <Trajectory>
						if(CountSetpoint < 100)
 80018bc:	4b73      	ldr	r3, [pc, #460]	@ (8001a8c <main+0x58c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b63      	cmp	r3, #99	@ 0x63
 80018c2:	dc02      	bgt.n	80018ca <main+0x3ca>
							PIDposition();
 80018c4:	f001 fee6 	bl	8003694 <PIDposition>
 80018c8:	e02c      	b.n	8001924 <main+0x424>
							if(state_ALL_Old == 5 || state_ALL_Old == 0)
 80018ca:	4b78      	ldr	r3, [pc, #480]	@ (8001aac <main+0x5ac>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b05      	cmp	r3, #5
 80018d0:	d003      	beq.n	80018da <main+0x3da>
 80018d2:	4b76      	ldr	r3, [pc, #472]	@ (8001aac <main+0x5ac>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d112      	bne.n	8001900 <main+0x400>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2101      	movs	r1, #1
 80018de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018e2:	f005 fa47 	bl	8006d74 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80018e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001a90 <main+0x590>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2200      	movs	r2, #0
 80018ec:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 80018ee:	f001 f9b3 	bl	8002c58 <reset>
							state_ALL = 2;
 80018f2:	4b65      	ldr	r3, [pc, #404]	@ (8001a88 <main+0x588>)
 80018f4:	2202      	movs	r2, #2
 80018f6:	601a      	str	r2, [r3, #0]
							CountSetpoint = 0;
 80018f8:	4b64      	ldr	r3, [pc, #400]	@ (8001a8c <main+0x58c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	e011      	b.n	8001924 <main+0x424>
							state_ALL = 2;
 8001900:	4b61      	ldr	r3, [pc, #388]	@ (8001a88 <main+0x588>)
 8001902:	2202      	movs	r2, #2
 8001904:	601a      	str	r2, [r3, #0]
							CountSetpoint = 0;
 8001906:	4b61      	ldr	r3, [pc, #388]	@ (8001a8c <main+0x58c>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2101      	movs	r1, #1
 8001910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001914:	f005 fa2e 	bl	8006d74 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001918:	4b5d      	ldr	r3, [pc, #372]	@ (8001a90 <main+0x590>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 8001920:	f001 f99a 	bl	8002c58 <reset>
						if(ButtonTest[0] == 0)//HOME Button
 8001924:	4b5c      	ldr	r3, [pc, #368]	@ (8001a98 <main+0x598>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d107      	bne.n	800193c <main+0x43c>
							state_ALL = 0;
 800192c:	4b56      	ldr	r3, [pc, #344]	@ (8001a88 <main+0x588>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
							Mode = 0;
 8001932:	4b5a      	ldr	r3, [pc, #360]	@ (8001a9c <main+0x59c>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
							reset();
 8001938:	f001 f98e 	bl	8002c58 <reset>
						if(fabs(Pos-Pos_Target) <= 0.8)//Limit
 800193c:	4b58      	ldr	r3, [pc, #352]	@ (8001aa0 <main+0x5a0>)
 800193e:	ed93 7a00 	vldr	s14, [r3]
 8001942:	4b58      	ldr	r3, [pc, #352]	@ (8001aa4 <main+0x5a4>)
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194c:	eef0 7ae7 	vabs.f32	s15, s15
 8001950:	ee17 0a90 	vmov	r0, s15
 8001954:	f7fe fdc4 	bl	80004e0 <__aeabi_f2d>
 8001958:	a349      	add	r3, pc, #292	@ (adr r3, 8001a80 <main+0x580>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7ff f893 	bl	8000a88 <__aeabi_dcmple>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d01a      	beq.n	800199e <main+0x49e>
							if(currentTime > timestamp5)
 8001968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800196c:	494e      	ldr	r1, [pc, #312]	@ (8001aa8 <main+0x5a8>)
 800196e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001972:	4290      	cmp	r0, r2
 8001974:	eb71 0303 	sbcs.w	r3, r1, r3
 8001978:	f080 81a4 	bcs.w	8001cc4 <main+0x7c4>
								CountSetpoint++;
 800197c:	4b43      	ldr	r3, [pc, #268]	@ (8001a8c <main+0x58c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3301      	adds	r3, #1
 8001982:	4a42      	ldr	r2, [pc, #264]	@ (8001a8c <main+0x58c>)
 8001984:	6013      	str	r3, [r2, #0]
								timestamp5 =currentTime + 1000;
 8001986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800198a:	f512 7a7a 	adds.w	sl, r2, #1000	@ 0x3e8
 800198e:	f143 0b00 	adc.w	fp, r3, #0
 8001992:	4652      	mov	r2, sl
 8001994:	465b      	mov	r3, fp
 8001996:	4944      	ldr	r1, [pc, #272]	@ (8001aa8 <main+0x5a8>)
 8001998:	e9c1 2300 	strd	r2, r3, [r1]
	  				break;
 800199c:	e192      	b.n	8001cc4 <main+0x7c4>
							CountSetpoint = 0;
 800199e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a8c <main+0x58c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
	  				break;
 80019a4:	e18e      	b.n	8001cc4 <main+0x7c4>
	  			case 4://TEST
	  				Joy_State();
 80019a6:	f000 fec1 	bl	800272c <Joy_State>
	  				ButtonMem();
 80019aa:	f001 f87f 	bl	8002aac <ButtonMem>
					break;
 80019ae:	e18d      	b.n	8001ccc <main+0x7cc>
	  			case 5://JOG MODE
	  				if(Mode == 1)
 80019b0:	4b3a      	ldr	r3, [pc, #232]	@ (8001a9c <main+0x59c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	f040 8087 	bne.w	8001ac8 <main+0x5c8>
	  				{
						switch(state_Pick_Place){
 80019ba:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <main+0x5b0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <main+0x4c8>
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d020      	beq.n	8001a08 <main+0x508>
						i = 0;
						}

						PIDreset();
	  				}
					break;
 80019c6:	e181      	b.n	8001ccc <main+0x7cc>
								registerFrame[0x10].U16 = 0b0100;
 80019c8:	4b32      	ldr	r3, [pc, #200]	@ (8001a94 <main+0x594>)
 80019ca:	2204      	movs	r2, #4
 80019cc:	841a      	strh	r2, [r3, #32]
								Pos_Target = MemPos[Pick_Order[Pick]-1];
 80019ce:	4b39      	ldr	r3, [pc, #228]	@ (8001ab4 <main+0x5b4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a39      	ldr	r2, [pc, #228]	@ (8001ab8 <main+0x5b8>)
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	3b01      	subs	r3, #1
 80019da:	4a38      	ldr	r2, [pc, #224]	@ (8001abc <main+0x5bc>)
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a30      	ldr	r2, [pc, #192]	@ (8001aa4 <main+0x5a4>)
 80019e4:	6013      	str	r3, [r2, #0]
								Pick++;
 80019e6:	4b33      	ldr	r3, [pc, #204]	@ (8001ab4 <main+0x5b4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	3301      	adds	r3, #1
 80019ec:	4a31      	ldr	r2, [pc, #196]	@ (8001ab4 <main+0x5b4>)
 80019ee:	6013      	str	r3, [r2, #0]
								state_ALL = 3;
 80019f0:	4b25      	ldr	r3, [pc, #148]	@ (8001a88 <main+0x588>)
 80019f2:	2203      	movs	r2, #3
 80019f4:	601a      	str	r2, [r3, #0]
								state_ALL_Old = 7;
 80019f6:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <main+0x5ac>)
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
								state_Pick_Place = 1;
 80019fc:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab0 <main+0x5b0>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
								PIDreset();
 8001a02:	f001 f9fb 	bl	8002dfc <PIDreset>
								break;
 8001a06:	e07f      	b.n	8001b08 <main+0x608>
								registerFrame[0x10].U16 = 0b1000;
 8001a08:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <main+0x594>)
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	841a      	strh	r2, [r3, #32]
								Pos_Target = MemPos[Place_Order[Place]-1]+5;
 8001a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac0 <main+0x5c0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a2c      	ldr	r2, [pc, #176]	@ (8001ac4 <main+0x5c4>)
 8001a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	4a28      	ldr	r2, [pc, #160]	@ (8001abc <main+0x5bc>)
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001a28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <main+0x5a4>)
 8001a2e:	edc3 7a00 	vstr	s15, [r3]
								Place++;
 8001a32:	4b23      	ldr	r3, [pc, #140]	@ (8001ac0 <main+0x5c0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3301      	adds	r3, #1
 8001a38:	4a21      	ldr	r2, [pc, #132]	@ (8001ac0 <main+0x5c0>)
 8001a3a:	6013      	str	r3, [r2, #0]
								state_ALL = 3;
 8001a3c:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <main+0x588>)
 8001a3e:	2203      	movs	r2, #3
 8001a40:	601a      	str	r2, [r3, #0]
								state_ALL_Old = 8;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <main+0x5ac>)
 8001a44:	2208      	movs	r2, #8
 8001a46:	601a      	str	r2, [r3, #0]
								state_Pick_Place = 0;
 8001a48:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <main+0x5b0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
								if(Place == 5)
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <main+0x5c0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b05      	cmp	r3, #5
 8001a54:	d10e      	bne.n	8001a74 <main+0x574>
									state_ALL = 0;
 8001a56:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <main+0x588>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
									Place = 0;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <main+0x5c0>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
									Pick = 0;
 8001a62:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <main+0x5b4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
									Mode = 0;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <main+0x59c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
									registerFrame[0x10].U16 = 0b0000;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <main+0x594>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	841a      	strh	r2, [r3, #32]
								PIDreset();
 8001a74:	f001 f9c2 	bl	8002dfc <PIDreset>
								break;
 8001a78:	e046      	b.n	8001b08 <main+0x608>
 8001a7a:	bf00      	nop
 8001a7c:	f3af 8000 	nop.w
 8001a80:	9999999a 	.word	0x9999999a
 8001a84:	3fe99999 	.word	0x3fe99999
 8001a88:	20000204 	.word	0x20000204
 8001a8c:	200011e0 	.word	0x200011e0
 8001a90:	20000578 	.word	0x20000578
 8001a94:	20000fd8 	.word	0x20000fd8
 8001a98:	200011c0 	.word	0x200011c0
 8001a9c:	2000116c 	.word	0x2000116c
 8001aa0:	20001354 	.word	0x20001354
 8001aa4:	200012bc 	.word	0x200012bc
 8001aa8:	200013a0 	.word	0x200013a0
 8001aac:	200011b0 	.word	0x200011b0
 8001ab0:	200011b8 	.word	0x200011b8
 8001ab4:	20001208 	.word	0x20001208
 8001ab8:	2000117c 	.word	0x2000117c
 8001abc:	200011f0 	.word	0x200011f0
 8001ac0:	2000120c 	.word	0x2000120c
 8001ac4:	20001190 	.word	0x20001190
	  					Pos_Target = MemPos[i];
 8001ac8:	4b81      	ldr	r3, [pc, #516]	@ (8001cd0 <main+0x7d0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a81      	ldr	r2, [pc, #516]	@ (8001cd4 <main+0x7d4>)
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a80      	ldr	r2, [pc, #512]	@ (8001cd8 <main+0x7d8>)
 8001ad6:	6013      	str	r3, [r2, #0]
						state_ALL = 3;
 8001ad8:	4b80      	ldr	r3, [pc, #512]	@ (8001cdc <main+0x7dc>)
 8001ada:	2203      	movs	r2, #3
 8001adc:	601a      	str	r2, [r3, #0]
						state_ALL_Old = 5;
 8001ade:	4b80      	ldr	r3, [pc, #512]	@ (8001ce0 <main+0x7e0>)
 8001ae0:	2205      	movs	r2, #5
 8001ae2:	601a      	str	r2, [r3, #0]
						i++;
 8001ae4:	4b7a      	ldr	r3, [pc, #488]	@ (8001cd0 <main+0x7d0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	4a79      	ldr	r2, [pc, #484]	@ (8001cd0 <main+0x7d0>)
 8001aec:	6013      	str	r3, [r2, #0]
						if(i == 5)
 8001aee:	4b78      	ldr	r3, [pc, #480]	@ (8001cd0 <main+0x7d0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d105      	bne.n	8001b02 <main+0x602>
						state_ALL_Old = 0;
 8001af6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ce0 <main+0x7e0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
						i = 0;
 8001afc:	4b74      	ldr	r3, [pc, #464]	@ (8001cd0 <main+0x7d0>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
						PIDreset();
 8001b02:	f001 f97b 	bl	8002dfc <PIDreset>
					break;
 8001b06:	e0e1      	b.n	8001ccc <main+0x7cc>
 8001b08:	e0e0      	b.n	8001ccc <main+0x7cc>
	  			case 6://Gripper
	  				switch (state_Griper)
 8001b0a:	4b76      	ldr	r3, [pc, #472]	@ (8001ce4 <main+0x7e4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d074      	beq.n	8001bfc <main+0x6fc>
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	f300 80d8 	bgt.w	8001cc8 <main+0x7c8>
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <main+0x622>
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d069      	beq.n	8001bf4 <main+0x6f4>
	  						break;

	  				}


	  				break;
 8001b20:	e0d2      	b.n	8001cc8 <main+0x7c8>
	  							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,1);
 8001b22:	2201      	movs	r2, #1
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4870      	ldr	r0, [pc, #448]	@ (8001ce8 <main+0x7e8>)
 8001b28:	f005 f924 	bl	8006d74 <HAL_GPIO_WritePin>
								if(LeadSW[0] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1))
 8001b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8001cec <main+0x7ec>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <main+0x644>
 8001b34:	4b6d      	ldr	r3, [pc, #436]	@ (8001cec <main+0x7ec>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d10f      	bne.n	8001b5c <main+0x65c>
 8001b3c:	4b6b      	ldr	r3, [pc, #428]	@ (8001cec <main+0x7ec>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d10b      	bne.n	8001b5c <main+0x65c>
									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,1);
 8001b44:	2201      	movs	r2, #1
 8001b46:	2120      	movs	r1, #32
 8001b48:	4867      	ldr	r0, [pc, #412]	@ (8001ce8 <main+0x7e8>)
 8001b4a:	f005 f913 	bl	8006d74 <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b54:	4864      	ldr	r0, [pc, #400]	@ (8001ce8 <main+0x7e8>)
 8001b56:	f005 f90d 	bl	8006d74 <HAL_GPIO_WritePin>
	  						break;
 8001b5a:	e0ab      	b.n	8001cb4 <main+0x7b4>
								else if(LeadSW[1] == 0)
 8001b5c:	4b63      	ldr	r3, [pc, #396]	@ (8001cec <main+0x7ec>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f040 80a7 	bne.w	8001cb4 <main+0x7b4>
									if(CountGriper > 100)
 8001b66:	4b62      	ldr	r3, [pc, #392]	@ (8001cf0 <main+0x7f0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b64      	cmp	r3, #100	@ 0x64
 8001b6c:	dd2f      	ble.n	8001bce <main+0x6ce>
										HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2120      	movs	r1, #32
 8001b72:	485d      	ldr	r0, [pc, #372]	@ (8001ce8 <main+0x7e8>)
 8001b74:	f005 f8fe 	bl	8006d74 <HAL_GPIO_WritePin>
										HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b7e:	485a      	ldr	r0, [pc, #360]	@ (8001ce8 <main+0x7e8>)
 8001b80:	f005 f8f8 	bl	8006d74 <HAL_GPIO_WritePin>
										state_Griper = 1;
 8001b84:	4b57      	ldr	r3, [pc, #348]	@ (8001ce4 <main+0x7e4>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
										CountGriper = 0;
 8001b8a:	4b59      	ldr	r3, [pc, #356]	@ (8001cf0 <main+0x7f0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
										if(VacuumNF == 0)
 8001b90:	4b58      	ldr	r3, [pc, #352]	@ (8001cf4 <main+0x7f4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d108      	bne.n	8001baa <main+0x6aa>
											HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,1);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2140      	movs	r1, #64	@ 0x40
 8001b9c:	4852      	ldr	r0, [pc, #328]	@ (8001ce8 <main+0x7e8>)
 8001b9e:	f005 f8e9 	bl	8006d74 <HAL_GPIO_WritePin>
											VacuumNF = 1;
 8001ba2:	4b54      	ldr	r3, [pc, #336]	@ (8001cf4 <main+0x7f4>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e007      	b.n	8001bba <main+0x6ba>
											HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2140      	movs	r1, #64	@ 0x40
 8001bae:	484e      	ldr	r0, [pc, #312]	@ (8001ce8 <main+0x7e8>)
 8001bb0:	f005 f8e0 	bl	8006d74 <HAL_GPIO_WritePin>
											VacuumNF = 0;
 8001bb4:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf4 <main+0x7f4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
										if(state_ALL_Old == 8)
 8001bba:	4b49      	ldr	r3, [pc, #292]	@ (8001ce0 <main+0x7e0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d178      	bne.n	8001cb4 <main+0x7b4>
											HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2140      	movs	r1, #64	@ 0x40
 8001bc6:	4848      	ldr	r0, [pc, #288]	@ (8001ce8 <main+0x7e8>)
 8001bc8:	f005 f8d4 	bl	8006d74 <HAL_GPIO_WritePin>
	  						break;
 8001bcc:	e072      	b.n	8001cb4 <main+0x7b4>
										if(timeGriper < HAL_GetTick())
 8001bce:	f002 fe4f 	bl	8004870 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b48      	ldr	r3, [pc, #288]	@ (8001cf8 <main+0x7f8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d96b      	bls.n	8001cb4 <main+0x7b4>
											CountGriper++;
 8001bdc:	4b44      	ldr	r3, [pc, #272]	@ (8001cf0 <main+0x7f0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a43      	ldr	r2, [pc, #268]	@ (8001cf0 <main+0x7f0>)
 8001be4:	6013      	str	r3, [r2, #0]
											timeGriper = HAL_GetTick()+10;
 8001be6:	f002 fe43 	bl	8004870 <HAL_GetTick>
 8001bea:	4603      	mov	r3, r0
 8001bec:	330a      	adds	r3, #10
 8001bee:	4a42      	ldr	r2, [pc, #264]	@ (8001cf8 <main+0x7f8>)
 8001bf0:	6013      	str	r3, [r2, #0]
	  						break;
 8001bf2:	e05f      	b.n	8001cb4 <main+0x7b4>
	  							state_Griper = 2;
 8001bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce4 <main+0x7e4>)
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	601a      	str	r2, [r3, #0]
								break;
 8001bfa:	e05e      	b.n	8001cba <main+0x7ba>
	  							if(LeadSW[1] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1))
 8001bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cec <main+0x7ec>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d007      	beq.n	8001c14 <main+0x714>
 8001c04:	4b39      	ldr	r3, [pc, #228]	@ (8001cec <main+0x7ec>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d10f      	bne.n	8001c2c <main+0x72c>
 8001c0c:	4b37      	ldr	r3, [pc, #220]	@ (8001cec <main+0x7ec>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d10b      	bne.n	8001c2c <main+0x72c>
	  								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2120      	movs	r1, #32
 8001c18:	4833      	ldr	r0, [pc, #204]	@ (8001ce8 <main+0x7e8>)
 8001c1a:	f005 f8ab 	bl	8006d74 <HAL_GPIO_WritePin>
	  								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,1);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c24:	4830      	ldr	r0, [pc, #192]	@ (8001ce8 <main+0x7e8>)
 8001c26:	f005 f8a5 	bl	8006d74 <HAL_GPIO_WritePin>
 8001c2a:	e042      	b.n	8001cb2 <main+0x7b2>
	  							else if(LeadSW[0] == 0)
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cec <main+0x7ec>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d141      	bne.n	8001cb8 <main+0x7b8>
	  								if(CountGriper > 100)
 8001c34:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <main+0x7f0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b64      	cmp	r3, #100	@ 0x64
 8001c3a:	dd27      	ble.n	8001c8c <main+0x78c>
	  									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2120      	movs	r1, #32
 8001c40:	4829      	ldr	r0, [pc, #164]	@ (8001ce8 <main+0x7e8>)
 8001c42:	f005 f897 	bl	8006d74 <HAL_GPIO_WritePin>
	  									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c4c:	4826      	ldr	r0, [pc, #152]	@ (8001ce8 <main+0x7e8>)
 8001c4e:	f005 f891 	bl	8006d74 <HAL_GPIO_WritePin>
	  									state_Griper = 0;
 8001c52:	4b24      	ldr	r3, [pc, #144]	@ (8001ce4 <main+0x7e4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
										CountGriper = 0;
 8001c58:	4b25      	ldr	r3, [pc, #148]	@ (8001cf0 <main+0x7f0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
										if(state_ALL_Old == 5 || state_ALL_Old == 7 || state_ALL_Old == 8)
 8001c5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ce0 <main+0x7e0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d007      	beq.n	8001c76 <main+0x776>
 8001c66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce0 <main+0x7e0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b07      	cmp	r3, #7
 8001c6c:	d003      	beq.n	8001c76 <main+0x776>
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce0 <main+0x7e0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d103      	bne.n	8001c7e <main+0x77e>
											state_ALL = 5;
 8001c76:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <main+0x7dc>)
 8001c78:	2205      	movs	r2, #5
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e019      	b.n	8001cb2 <main+0x7b2>
											state_ALL = 0;
 8001c7e:	4b17      	ldr	r3, [pc, #92]	@ (8001cdc <main+0x7dc>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
											Mode = 0;
 8001c84:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <main+0x7fc>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
	  						break;
 8001c8a:	e015      	b.n	8001cb8 <main+0x7b8>
										if(timeGriper < HAL_GetTick())
 8001c8c:	f002 fdf0 	bl	8004870 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <main+0x800>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d90e      	bls.n	8001cb8 <main+0x7b8>
											CountGriper++;
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <main+0x7f0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	4a13      	ldr	r2, [pc, #76]	@ (8001cf0 <main+0x7f0>)
 8001ca2:	6013      	str	r3, [r2, #0]
											timeGriper = HAL_GetTick()+10;
 8001ca4:	f002 fde4 	bl	8004870 <HAL_GetTick>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	330a      	adds	r3, #10
 8001cac:	4a14      	ldr	r2, [pc, #80]	@ (8001d00 <main+0x800>)
 8001cae:	6013      	str	r3, [r2, #0]
	  						break;
 8001cb0:	e002      	b.n	8001cb8 <main+0x7b8>
 8001cb2:	e001      	b.n	8001cb8 <main+0x7b8>
	  						break;
 8001cb4:	bf00      	nop
 8001cb6:	e007      	b.n	8001cc8 <main+0x7c8>
	  						break;
 8001cb8:	bf00      	nop
	  				break;
 8001cba:	e005      	b.n	8001cc8 <main+0x7c8>
	  				break;
 8001cbc:	bf00      	nop
 8001cbe:	e4a6      	b.n	800160e <main+0x10e>
	  				break;
 8001cc0:	bf00      	nop
 8001cc2:	e4a4      	b.n	800160e <main+0x10e>
	  				break;
 8001cc4:	bf00      	nop
 8001cc6:	e4a2      	b.n	800160e <main+0x10e>
	  				break;
 8001cc8:	bf00      	nop
 8001cca:	e4a0      	b.n	800160e <main+0x10e>
  {
 8001ccc:	e49f      	b.n	800160e <main+0x10e>
 8001cce:	bf00      	nop
 8001cd0:	20001204 	.word	0x20001204
 8001cd4:	200011f0 	.word	0x200011f0
 8001cd8:	200012bc 	.word	0x200012bc
 8001cdc:	20000204 	.word	0x20000204
 8001ce0:	200011b0 	.word	0x200011b0
 8001ce4:	200011b4 	.word	0x200011b4
 8001ce8:	48000800 	.word	0x48000800
 8001cec:	200011d8 	.word	0x200011d8
 8001cf0:	200011e4 	.word	0x200011e4
 8001cf4:	200011ec 	.word	0x200011ec
 8001cf8:	200013a8 	.word	0x200013a8
 8001cfc:	2000116c 	.word	0x2000116c
 8001d00:	200013ac 	.word	0x200013ac

08001d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b094      	sub	sp, #80	@ 0x50
 8001d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d0a:	f107 0318 	add.w	r3, r7, #24
 8001d0e:	2238      	movs	r2, #56	@ 0x38
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f009 fffa 	bl	800bd0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f005 f86e 	bl	8006e08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d36:	2340      	movs	r3, #64	@ 0x40
 8001d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001d42:	2304      	movs	r3, #4
 8001d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001d46:	2355      	movs	r3, #85	@ 0x55
 8001d48:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d52:	2302      	movs	r3, #2
 8001d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d56:	f107 0318 	add.w	r3, r7, #24
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f005 f908 	bl	8006f70 <HAL_RCC_OscConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d66:	f002 f9a7 	bl	80040b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d6a:	230f      	movs	r3, #15
 8001d6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	2104      	movs	r1, #4
 8001d82:	4618      	mov	r0, r3
 8001d84:	f005 fc06 	bl	8007594 <HAL_RCC_ClockConfig>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d8e:	f002 f993 	bl	80040b8 <Error_Handler>
  }
}
 8001d92:	bf00      	nop
 8001d94:	3750      	adds	r7, #80	@ 0x50
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	@ 0x30
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	2220      	movs	r2, #32
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f009 ffa9 	bl	800bd0c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001dba:	4b38      	ldr	r3, [pc, #224]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001dbc:	4a38      	ldr	r2, [pc, #224]	@ (8001ea0 <MX_ADC3_Init+0x104>)
 8001dbe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001dc0:	4b36      	ldr	r3, [pc, #216]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001dc2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001dc6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001dc8:	4b34      	ldr	r3, [pc, #208]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dce:	4b33      	ldr	r3, [pc, #204]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001dd4:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001dda:	4b30      	ldr	r3, [pc, #192]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001de0:	4b2e      	ldr	r3, [pc, #184]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001de2:	2204      	movs	r2, #4
 8001de4:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001de6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001dec:	4b2b      	ldr	r3, [pc, #172]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 8001df2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001df4:	2202      	movs	r2, #2
 8001df6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001df8:	4b28      	ldr	r3, [pc, #160]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e00:	4b26      	ldr	r3, [pc, #152]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e06:	4b25      	ldr	r3, [pc, #148]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001e0c:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e14:	4b21      	ldr	r3, [pc, #132]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001e1a:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001e22:	481e      	ldr	r0, [pc, #120]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001e24:	f002 ff96 	bl	8004d54 <HAL_ADC_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001e2e:	f002 f943 	bl	80040b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4817      	ldr	r0, [pc, #92]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001e3e:	f004 f8b5 	bl	8005fac <HAL_ADCEx_MultiModeConfigChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001e48:	f002 f936 	bl	80040b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <MX_ADC3_Init+0x108>)
 8001e4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e50:	2306      	movs	r3, #6
 8001e52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e58:	237f      	movs	r3, #127	@ 0x7f
 8001e5a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	4619      	mov	r1, r3
 8001e68:	480c      	ldr	r0, [pc, #48]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001e6a:	f003 fa21 	bl	80052b0 <HAL_ADC_ConfigChannel>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001e74:	f002 f920 	bl	80040b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <MX_ADC3_Init+0x10c>)
 8001e7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e7c:	230c      	movs	r3, #12
 8001e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	@ (8001e9c <MX_ADC3_Init+0x100>)
 8001e86:	f003 fa13 	bl	80052b0 <HAL_ADC_ConfigChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 8001e90:	f002 f912 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	3730      	adds	r7, #48	@ 0x30
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000248 	.word	0x20000248
 8001ea0:	50000400 	.word	0x50000400
 8001ea4:	04300002 	.word	0x04300002
 8001ea8:	14f00020 	.word	0x14f00020

08001eac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eca:	4b20      	ldr	r3, [pc, #128]	@ (8001f4c <MX_TIM1_Init+0xa0>)
 8001ecc:	4a20      	ldr	r2, [pc, #128]	@ (8001f50 <MX_TIM1_Init+0xa4>)
 8001ece:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f4c <MX_TIM1_Init+0xa0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <MX_TIM1_Init+0xa0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <MX_TIM1_Init+0xa0>)
 8001ede:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ee2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <MX_TIM1_Init+0xa0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <MX_TIM1_Init+0xa0>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef0:	4b16      	ldr	r3, [pc, #88]	@ (8001f4c <MX_TIM1_Init+0xa0>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ef6:	4815      	ldr	r0, [pc, #84]	@ (8001f4c <MX_TIM1_Init+0xa0>)
 8001ef8:	f005 ffb6 	bl	8007e68 <HAL_TIM_Base_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001f02:	f002 f8d9 	bl	80040b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	4619      	mov	r1, r3
 8001f12:	480e      	ldr	r0, [pc, #56]	@ (8001f4c <MX_TIM1_Init+0xa0>)
 8001f14:	f006 ff3a 	bl	8008d8c <HAL_TIM_ConfigClockSource>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001f1e:	f002 f8cb 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	4806      	ldr	r0, [pc, #24]	@ (8001f4c <MX_TIM1_Init+0xa0>)
 8001f34:	f007 ff10 	bl	8009d58 <HAL_TIMEx_MasterConfigSynchronization>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f3e:	f002 f8bb 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000314 	.word	0x20000314
 8001f50:	40012c00 	.word	0x40012c00

08001f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5a:	f107 0310 	add.w	r3, r7, #16
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f72:	4b1e      	ldr	r3, [pc, #120]	@ (8001fec <MX_TIM2_Init+0x98>)
 8001f74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fec <MX_TIM2_Init+0x98>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f80:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <MX_TIM2_Init+0x98>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f86:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <MX_TIM2_Init+0x98>)
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8e:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <MX_TIM2_Init+0x98>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f94:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <MX_TIM2_Init+0x98>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f9a:	4814      	ldr	r0, [pc, #80]	@ (8001fec <MX_TIM2_Init+0x98>)
 8001f9c:	f005 ff64 	bl	8007e68 <HAL_TIM_Base_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001fa6:	f002 f887 	bl	80040b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001faa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	480d      	ldr	r0, [pc, #52]	@ (8001fec <MX_TIM2_Init+0x98>)
 8001fb8:	f006 fee8 	bl	8008d8c <HAL_TIM_ConfigClockSource>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001fc2:	f002 f879 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4806      	ldr	r0, [pc, #24]	@ (8001fec <MX_TIM2_Init+0x98>)
 8001fd4:	f007 fec0 	bl	8009d58 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fde:	f002 f86b 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fe2:	bf00      	nop
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200003e0 	.word	0x200003e0

08001ff0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08c      	sub	sp, #48	@ 0x30
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	2224      	movs	r2, #36	@ 0x24
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f009 fe84 	bl	800bd0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002004:	463b      	mov	r3, r7
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800200e:	4b21      	ldr	r3, [pc, #132]	@ (8002094 <MX_TIM3_Init+0xa4>)
 8002010:	4a21      	ldr	r2, [pc, #132]	@ (8002098 <MX_TIM3_Init+0xa8>)
 8002012:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002014:	4b1f      	ldr	r3, [pc, #124]	@ (8002094 <MX_TIM3_Init+0xa4>)
 8002016:	2200      	movs	r2, #0
 8002018:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201a:	4b1e      	ldr	r3, [pc, #120]	@ (8002094 <MX_TIM3_Init+0xa4>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002020:	4b1c      	ldr	r3, [pc, #112]	@ (8002094 <MX_TIM3_Init+0xa4>)
 8002022:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002026:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002028:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <MX_TIM3_Init+0xa4>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202e:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <MX_TIM3_Init+0xa4>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002034:	2303      	movs	r3, #3
 8002036:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800203c:	2301      	movs	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002040:	2300      	movs	r3, #0
 8002042:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8002044:	2303      	movs	r3, #3
 8002046:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800204c:	2301      	movs	r3, #1
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	4619      	mov	r1, r3
 800205e:	480d      	ldr	r0, [pc, #52]	@ (8002094 <MX_TIM3_Init+0xa4>)
 8002060:	f006 fac4 	bl	80085ec <HAL_TIM_Encoder_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800206a:	f002 f825 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002076:	463b      	mov	r3, r7
 8002078:	4619      	mov	r1, r3
 800207a:	4806      	ldr	r0, [pc, #24]	@ (8002094 <MX_TIM3_Init+0xa4>)
 800207c:	f007 fe6c 	bl	8009d58 <HAL_TIMEx_MasterConfigSynchronization>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002086:	f002 f817 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800208a:	bf00      	nop
 800208c:	3730      	adds	r7, #48	@ 0x30
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200004ac 	.word	0x200004ac
 8002098:	40000400 	.word	0x40000400

0800209c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08e      	sub	sp, #56	@ 0x38
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b0:	f107 031c 	add.w	r3, r7, #28
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020bc:	463b      	mov	r3, r7
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	611a      	str	r2, [r3, #16]
 80020ca:	615a      	str	r2, [r3, #20]
 80020cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002184 <MX_TIM4_Init+0xe8>)
 80020d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002188 <MX_TIM4_Init+0xec>)
 80020d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80020d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002184 <MX_TIM4_Init+0xe8>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020da:	4b2a      	ldr	r3, [pc, #168]	@ (8002184 <MX_TIM4_Init+0xe8>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42499;
 80020e0:	4b28      	ldr	r3, [pc, #160]	@ (8002184 <MX_TIM4_Init+0xe8>)
 80020e2:	f24a 6203 	movw	r2, #42499	@ 0xa603
 80020e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e8:	4b26      	ldr	r3, [pc, #152]	@ (8002184 <MX_TIM4_Init+0xe8>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ee:	4b25      	ldr	r3, [pc, #148]	@ (8002184 <MX_TIM4_Init+0xe8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020f4:	4823      	ldr	r0, [pc, #140]	@ (8002184 <MX_TIM4_Init+0xe8>)
 80020f6:	f005 feb7 	bl	8007e68 <HAL_TIM_Base_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002100:	f001 ffda 	bl	80040b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002108:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800210a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800210e:	4619      	mov	r1, r3
 8002110:	481c      	ldr	r0, [pc, #112]	@ (8002184 <MX_TIM4_Init+0xe8>)
 8002112:	f006 fe3b 	bl	8008d8c <HAL_TIM_ConfigClockSource>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800211c:	f001 ffcc 	bl	80040b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002120:	4818      	ldr	r0, [pc, #96]	@ (8002184 <MX_TIM4_Init+0xe8>)
 8002122:	f005 ffed 	bl	8008100 <HAL_TIM_PWM_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800212c:	f001 ffc4 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	4619      	mov	r1, r3
 800213e:	4811      	ldr	r0, [pc, #68]	@ (8002184 <MX_TIM4_Init+0xe8>)
 8002140:	f007 fe0a 	bl	8009d58 <HAL_TIMEx_MasterConfigSynchronization>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800214a:	f001 ffb5 	bl	80040b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800214e:	2360      	movs	r3, #96	@ 0x60
 8002150:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800215e:	463b      	mov	r3, r7
 8002160:	2200      	movs	r2, #0
 8002162:	4619      	mov	r1, r3
 8002164:	4807      	ldr	r0, [pc, #28]	@ (8002184 <MX_TIM4_Init+0xe8>)
 8002166:	f006 fcfd 	bl	8008b64 <HAL_TIM_PWM_ConfigChannel>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002170:	f001 ffa2 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002174:	4803      	ldr	r0, [pc, #12]	@ (8002184 <MX_TIM4_Init+0xe8>)
 8002176:	f002 f94d 	bl	8004414 <HAL_TIM_MspPostInit>

}
 800217a:	bf00      	nop
 800217c:	3738      	adds	r7, #56	@ 0x38
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000578 	.word	0x20000578
 8002188:	40000800 	.word	0x40000800

0800218c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002192:	f107 0310 	add.w	r3, r7, #16
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002220 <MX_TIM5_Init+0x94>)
 80021ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002224 <MX_TIM5_Init+0x98>)
 80021ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80021b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002220 <MX_TIM5_Init+0x94>)
 80021b2:	22a9      	movs	r2, #169	@ 0xa9
 80021b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <MX_TIM5_Init+0x94>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80021bc:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <MX_TIM5_Init+0x94>)
 80021be:	f04f 32ff 	mov.w	r2, #4294967295
 80021c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c4:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <MX_TIM5_Init+0x94>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <MX_TIM5_Init+0x94>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021d0:	4813      	ldr	r0, [pc, #76]	@ (8002220 <MX_TIM5_Init+0x94>)
 80021d2:	f005 fe49 	bl	8007e68 <HAL_TIM_Base_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80021dc:	f001 ff6c 	bl	80040b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	4619      	mov	r1, r3
 80021ec:	480c      	ldr	r0, [pc, #48]	@ (8002220 <MX_TIM5_Init+0x94>)
 80021ee:	f006 fdcd 	bl	8008d8c <HAL_TIM_ConfigClockSource>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80021f8:	f001 ff5e 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021fc:	2320      	movs	r3, #32
 80021fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	4619      	mov	r1, r3
 8002208:	4805      	ldr	r0, [pc, #20]	@ (8002220 <MX_TIM5_Init+0x94>)
 800220a:	f007 fda5 	bl	8009d58 <HAL_TIMEx_MasterConfigSynchronization>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002214:	f001 ff50 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000644 	.word	0x20000644
 8002224:	40000c00 	.word	0x40000c00

08002228 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <MX_TIM6_Init+0x68>)
 800223a:	4a16      	ldr	r2, [pc, #88]	@ (8002294 <MX_TIM6_Init+0x6c>)
 800223c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16999;
 800223e:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <MX_TIM6_Init+0x68>)
 8002240:	f244 2267 	movw	r2, #16999	@ 0x4267
 8002244:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002246:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <MX_TIM6_Init+0x68>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 800224c:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <MX_TIM6_Init+0x68>)
 800224e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002252:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002254:	4b0e      	ldr	r3, [pc, #56]	@ (8002290 <MX_TIM6_Init+0x68>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800225a:	480d      	ldr	r0, [pc, #52]	@ (8002290 <MX_TIM6_Init+0x68>)
 800225c:	f005 fe04 	bl	8007e68 <HAL_TIM_Base_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002266:	f001 ff27 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4806      	ldr	r0, [pc, #24]	@ (8002290 <MX_TIM6_Init+0x68>)
 8002278:	f007 fd6e 	bl	8009d58 <HAL_TIMEx_MasterConfigSynchronization>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002282:	f001 ff19 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000710 	.word	0x20000710
 8002294:	40001000 	.word	0x40001000

08002298 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022b6:	4b20      	ldr	r3, [pc, #128]	@ (8002338 <MX_TIM8_Init+0xa0>)
 80022b8:	4a20      	ldr	r2, [pc, #128]	@ (800233c <MX_TIM8_Init+0xa4>)
 80022ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 80022bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <MX_TIM8_Init+0xa0>)
 80022be:	22a9      	movs	r2, #169	@ 0xa9
 80022c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <MX_TIM8_Init+0xa0>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <MX_TIM8_Init+0xa0>)
 80022ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <MX_TIM8_Init+0xa0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022d6:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <MX_TIM8_Init+0xa0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022dc:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <MX_TIM8_Init+0xa0>)
 80022de:	2200      	movs	r2, #0
 80022e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80022e2:	4815      	ldr	r0, [pc, #84]	@ (8002338 <MX_TIM8_Init+0xa0>)
 80022e4:	f005 fdc0 	bl	8007e68 <HAL_TIM_Base_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80022ee:	f001 fee3 	bl	80040b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	4619      	mov	r1, r3
 80022fe:	480e      	ldr	r0, [pc, #56]	@ (8002338 <MX_TIM8_Init+0xa0>)
 8002300:	f006 fd44 	bl	8008d8c <HAL_TIM_ConfigClockSource>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800230a:	f001 fed5 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	4619      	mov	r1, r3
 800231e:	4806      	ldr	r0, [pc, #24]	@ (8002338 <MX_TIM8_Init+0xa0>)
 8002320:	f007 fd1a 	bl	8009d58 <HAL_TIMEx_MasterConfigSynchronization>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800232a:	f001 fec5 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200007dc 	.word	0x200007dc
 800233c:	40013400 	.word	0x40013400

08002340 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002344:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <MX_TIM16_Init+0x58>)
 8002346:	4a15      	ldr	r2, [pc, #84]	@ (800239c <MX_TIM16_Init+0x5c>)
 8002348:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800234a:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <MX_TIM16_Init+0x58>)
 800234c:	22a9      	movs	r2, #169	@ 0xa9
 800234e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002350:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <MX_TIM16_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <MX_TIM16_Init+0x58>)
 8002358:	f240 4279 	movw	r2, #1145	@ 0x479
 800235c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800235e:	4b0e      	ldr	r3, [pc, #56]	@ (8002398 <MX_TIM16_Init+0x58>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <MX_TIM16_Init+0x58>)
 8002366:	2200      	movs	r2, #0
 8002368:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236a:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <MX_TIM16_Init+0x58>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002370:	4809      	ldr	r0, [pc, #36]	@ (8002398 <MX_TIM16_Init+0x58>)
 8002372:	f005 fd79 	bl	8007e68 <HAL_TIM_Base_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800237c:	f001 fe9c 	bl	80040b8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002380:	2108      	movs	r1, #8
 8002382:	4805      	ldr	r0, [pc, #20]	@ (8002398 <MX_TIM16_Init+0x58>)
 8002384:	f006 f83c 	bl	8008400 <HAL_TIM_OnePulse_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800238e:	f001 fe93 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200008a8 	.word	0x200008a8
 800239c:	40014400 	.word	0x40014400

080023a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023a4:	4b23      	ldr	r3, [pc, #140]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 80023a6:	4a24      	ldr	r2, [pc, #144]	@ (8002438 <MX_USART2_UART_Init+0x98>)
 80023a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80023aa:	4b22      	ldr	r3, [pc, #136]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 80023ac:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80023b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80023b2:	4b20      	ldr	r3, [pc, #128]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 80023b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023b8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80023c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 80023c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 80023ca:	220c      	movs	r2, #12
 80023cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ce:	4b19      	ldr	r3, [pc, #100]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d4:	4b17      	ldr	r3, [pc, #92]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023da:	4b16      	ldr	r3, [pc, #88]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 80023dc:	2200      	movs	r2, #0
 80023de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023e0:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023e6:	4b13      	ldr	r3, [pc, #76]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023ec:	4811      	ldr	r0, [pc, #68]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 80023ee:	f007 fd99 	bl	8009f24 <HAL_UART_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80023f8:	f001 fe5e 	bl	80040b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023fc:	2100      	movs	r1, #0
 80023fe:	480d      	ldr	r0, [pc, #52]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 8002400:	f009 fbb9 	bl	800bb76 <HAL_UARTEx_SetTxFifoThreshold>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800240a:	f001 fe55 	bl	80040b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800240e:	2100      	movs	r1, #0
 8002410:	4808      	ldr	r0, [pc, #32]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 8002412:	f009 fbee 	bl	800bbf2 <HAL_UARTEx_SetRxFifoThreshold>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800241c:	f001 fe4c 	bl	80040b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002420:	4804      	ldr	r0, [pc, #16]	@ (8002434 <MX_USART2_UART_Init+0x94>)
 8002422:	f009 fb6f 	bl	800bb04 <HAL_UARTEx_DisableFifoMode>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800242c:	f001 fe44 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000974 	.word	0x20000974
 8002438:	40004400 	.word	0x40004400

0800243c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002442:	4b1a      	ldr	r3, [pc, #104]	@ (80024ac <MX_DMA_Init+0x70>)
 8002444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002446:	4a19      	ldr	r2, [pc, #100]	@ (80024ac <MX_DMA_Init+0x70>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6493      	str	r3, [r2, #72]	@ 0x48
 800244e:	4b17      	ldr	r3, [pc, #92]	@ (80024ac <MX_DMA_Init+0x70>)
 8002450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800245a:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <MX_DMA_Init+0x70>)
 800245c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800245e:	4a13      	ldr	r2, [pc, #76]	@ (80024ac <MX_DMA_Init+0x70>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6493      	str	r3, [r2, #72]	@ 0x48
 8002466:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <MX_DMA_Init+0x70>)
 8002468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	200b      	movs	r0, #11
 8002478:	f003 ff7b 	bl	8006372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800247c:	200b      	movs	r0, #11
 800247e:	f003 ff92 	bl	80063a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	2100      	movs	r1, #0
 8002486:	200c      	movs	r0, #12
 8002488:	f003 ff73 	bl	8006372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800248c:	200c      	movs	r0, #12
 800248e:	f003 ff8a 	bl	80063a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	200d      	movs	r0, #13
 8002498:	f003 ff6b 	bl	8006372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800249c:	200d      	movs	r0, #13
 800249e:	f003 ff82 	bl	80063a6 <HAL_NVIC_EnableIRQ>

}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000

080024b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	@ 0x28
 80024b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c6:	4b6b      	ldr	r3, [pc, #428]	@ (8002674 <MX_GPIO_Init+0x1c4>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ca:	4a6a      	ldr	r2, [pc, #424]	@ (8002674 <MX_GPIO_Init+0x1c4>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024d2:	4b68      	ldr	r3, [pc, #416]	@ (8002674 <MX_GPIO_Init+0x1c4>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024de:	4b65      	ldr	r3, [pc, #404]	@ (8002674 <MX_GPIO_Init+0x1c4>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e2:	4a64      	ldr	r2, [pc, #400]	@ (8002674 <MX_GPIO_Init+0x1c4>)
 80024e4:	f043 0320 	orr.w	r3, r3, #32
 80024e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ea:	4b62      	ldr	r3, [pc, #392]	@ (8002674 <MX_GPIO_Init+0x1c4>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002674 <MX_GPIO_Init+0x1c4>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002674 <MX_GPIO_Init+0x1c4>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002502:	4b5c      	ldr	r3, [pc, #368]	@ (8002674 <MX_GPIO_Init+0x1c4>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	4b59      	ldr	r3, [pc, #356]	@ (8002674 <MX_GPIO_Init+0x1c4>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002512:	4a58      	ldr	r2, [pc, #352]	@ (8002674 <MX_GPIO_Init+0x1c4>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800251a:	4b56      	ldr	r3, [pc, #344]	@ (8002674 <MX_GPIO_Init+0x1c4>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LAMP1_Pin|LAMP2_Pin|PUSH_Pin|Vacuum_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800252c:	4852      	ldr	r0, [pc, #328]	@ (8002678 <MX_GPIO_Init+0x1c8>)
 800252e:	f004 fc21 	bl	8006d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DirectionMotor_Pin|AnotherDMotor_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002532:	2200      	movs	r2, #0
 8002534:	2123      	movs	r1, #35	@ 0x23
 8002536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800253a:	f004 fc1b 	bl	8006d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PULL_GPIO_Port, PULL_Pin, GPIO_PIN_SET);
 800253e:	2201      	movs	r2, #1
 8002540:	2120      	movs	r1, #32
 8002542:	484d      	ldr	r0, [pc, #308]	@ (8002678 <MX_GPIO_Init+0x1c8>)
 8002544:	f004 fc16 	bl	8006d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002548:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800254c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800254e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4619      	mov	r1, r3
 800255e:	4846      	ldr	r0, [pc, #280]	@ (8002678 <MX_GPIO_Init+0x1c8>)
 8002560:	f004 fa6e 	bl	8006a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWJoy_Pin LeadSW1_Pin Floor4_Pin */
  GPIO_InitStruct.Pin = SWJoy_Pin|LeadSW1_Pin|Floor4_Pin;
 8002564:	2383      	movs	r3, #131	@ 0x83
 8002566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800256c:	2301      	movs	r3, #1
 800256e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4619      	mov	r1, r3
 8002576:	4840      	ldr	r0, [pc, #256]	@ (8002678 <MX_GPIO_Init+0x1c8>)
 8002578:	f004 fa62 	bl	8006a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LAMP1_Pin LAMP2_Pin PULL_Pin PUSH_Pin
                           Vacuum_Pin */
  GPIO_InitStruct.Pin = LAMP1_Pin|LAMP2_Pin|PULL_Pin|PUSH_Pin
 800257c:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8002580:	617b      	str	r3, [r7, #20]
                          |Vacuum_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002582:	2301      	movs	r3, #1
 8002584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	4838      	ldr	r0, [pc, #224]	@ (8002678 <MX_GPIO_Init+0x1c8>)
 8002596:	f004 fa53 	bl	8006a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DirectionMotor_Pin AnotherDMotor_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DirectionMotor_Pin|AnotherDMotor_Pin|LD2_Pin;
 800259a:	2323      	movs	r3, #35	@ 0x23
 800259c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4619      	mov	r1, r3
 80025b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025b4:	f004 fa44 	bl	8006a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ResetSw_Pin */
  GPIO_InitStruct.Pin = ResetSw_Pin;
 80025b8:	2310      	movs	r3, #16
 80025ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ResetSw_GPIO_Port, &GPIO_InitStruct);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4619      	mov	r1, r3
 80025ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025ce:	f004 fa37 	bl	8006a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeadSW2_Pin Floor1_Pin Floor5_Pin */
  GPIO_InitStruct.Pin = LeadSW2_Pin|Floor1_Pin|Floor5_Pin;
 80025d2:	f240 4341 	movw	r3, #1089	@ 0x441
 80025d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d8:	2300      	movs	r3, #0
 80025da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025dc:	2301      	movs	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4619      	mov	r1, r3
 80025e6:	4825      	ldr	r0, [pc, #148]	@ (800267c <MX_GPIO_Init+0x1cc>)
 80025e8:	f004 fa2a 	bl	8006a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : EmergencySw_Pin */
  GPIO_InitStruct.Pin = EmergencySw_Pin;
 80025ec:	2304      	movs	r3, #4
 80025ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EmergencySw_GPIO_Port, &GPIO_InitStruct);
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4619      	mov	r1, r3
 80025fe:	481f      	ldr	r0, [pc, #124]	@ (800267c <MX_GPIO_Init+0x1cc>)
 8002600:	f004 fa1e 	bl	8006a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Floor2_Pin Floor3_Pin HomeButton_Pin */
  GPIO_InitStruct.Pin = Floor2_Pin|Floor3_Pin|HomeButton_Pin;
 8002604:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800260e:	2301      	movs	r3, #1
 8002610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800261c:	f004 fa10 	bl	8006a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lowerprox_Pin UpperProx_Pin */
  GPIO_InitStruct.Pin = Lowerprox_Pin|UpperProx_Pin;
 8002620:	2330      	movs	r3, #48	@ 0x30
 8002622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002624:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262a:	2301      	movs	r3, #1
 800262c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262e:	f107 0314 	add.w	r3, r7, #20
 8002632:	4619      	mov	r1, r3
 8002634:	4811      	ldr	r0, [pc, #68]	@ (800267c <MX_GPIO_Init+0x1cc>)
 8002636:	f004 fa03 	bl	8006a40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	200a      	movs	r0, #10
 8002640:	f003 fe97 	bl	8006372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002644:	200a      	movs	r0, #10
 8002646:	f003 feae 	bl	80063a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	2017      	movs	r0, #23
 8002650:	f003 fe8f 	bl	8006372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002654:	2017      	movs	r0, #23
 8002656:	f003 fea6 	bl	80063a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	2028      	movs	r0, #40	@ 0x28
 8002660:	f003 fe87 	bl	8006372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002664:	2028      	movs	r0, #40	@ 0x28
 8002666:	f003 fe9e 	bl	80063a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800266a:	bf00      	nop
 800266c:	3728      	adds	r7, #40	@ 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
 8002678:	48000800 	.word	0x48000800
 800267c:	48000400 	.word	0x48000400

08002680 <Joy_Averaged>:

/* USER CODE BEGIN 4 */
void Joy_Averaged()
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
	for (int i = 0; i < 20; i++)
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	e017      	b.n	80026bc <Joy_Averaged+0x3c>
	{
		joySum[0] += joyAnalogRead[2*i];
 800268c:	4b21      	ldr	r3, [pc, #132]	@ (8002714 <Joy_Averaged+0x94>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	0052      	lsls	r2, r2, #1
 8002694:	4920      	ldr	r1, [pc, #128]	@ (8002718 <Joy_Averaged+0x98>)
 8002696:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800269a:	4413      	add	r3, r2
 800269c:	4a1d      	ldr	r2, [pc, #116]	@ (8002714 <Joy_Averaged+0x94>)
 800269e:	6013      	str	r3, [r2, #0]
		joySum[1] += joyAnalogRead[1+(2*i)];
 80026a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002714 <Joy_Averaged+0x94>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	0052      	lsls	r2, r2, #1
 80026a8:	3201      	adds	r2, #1
 80026aa:	491b      	ldr	r1, [pc, #108]	@ (8002718 <Joy_Averaged+0x98>)
 80026ac:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80026b0:	4413      	add	r3, r2
 80026b2:	4a18      	ldr	r2, [pc, #96]	@ (8002714 <Joy_Averaged+0x94>)
 80026b4:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < 20; i++)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3301      	adds	r3, #1
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b13      	cmp	r3, #19
 80026c0:	dde4      	ble.n	800268c <Joy_Averaged+0xc>
	}

	for (int i = 0; i < 2; i++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	603b      	str	r3, [r7, #0]
 80026c6:	e014      	b.n	80026f2 <Joy_Averaged+0x72>
	{
		joyAvg[i] = joySum[i] / 20;
 80026c8:	4a12      	ldr	r2, [pc, #72]	@ (8002714 <Joy_Averaged+0x94>)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	4a12      	ldr	r2, [pc, #72]	@ (800271c <Joy_Averaged+0x9c>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	b299      	uxth	r1, r3
 80026da:	4a11      	ldr	r2, [pc, #68]	@ (8002720 <Joy_Averaged+0xa0>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		joySum[i] = 0;
 80026e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002714 <Joy_Averaged+0x94>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2100      	movs	r1, #0
 80026e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	dde7      	ble.n	80026c8 <Joy_Averaged+0x48>
	}

	joyX = joyAvg[0];
 80026f8:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <Joy_Averaged+0xa0>)
 80026fa:	881a      	ldrh	r2, [r3, #0]
 80026fc:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <Joy_Averaged+0xa4>)
 80026fe:	801a      	strh	r2, [r3, #0]
	joyY = joyAvg[1];
 8002700:	4b07      	ldr	r3, [pc, #28]	@ (8002720 <Joy_Averaged+0xa0>)
 8002702:	885a      	ldrh	r2, [r3, #2]
 8002704:	4b08      	ldr	r3, [pc, #32]	@ (8002728 <Joy_Averaged+0xa8>)
 8002706:	801a      	strh	r2, [r3, #0]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	20001334 	.word	0x20001334
 8002718:	200012dc 	.word	0x200012dc
 800271c:	cccccccd 	.word	0xcccccccd
 8002720:	20001330 	.word	0x20001330
 8002724:	2000133c 	.word	0x2000133c
 8002728:	2000133e 	.word	0x2000133e

0800272c <Joy_State>:
void Joy_State()
{
 800272c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002734:	2101      	movs	r1, #1
 8002736:	48ac      	ldr	r0, [pc, #688]	@ (80029e8 <Joy_State+0x2bc>)
 8002738:	f004 fb04 	bl	8006d44 <HAL_GPIO_ReadPin>
 800273c:	4603      	mov	r3, r0
 800273e:	4aab      	ldr	r2, [pc, #684]	@ (80029ec <Joy_State+0x2c0>)
 8002740:	7013      	strb	r3, [r2, #0]
if(state == 0)
 8002742:	4bab      	ldr	r3, [pc, #684]	@ (80029f0 <Joy_State+0x2c4>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d154      	bne.n	80027f4 <Joy_State+0xc8>
{
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
//	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
	if (joyY > 3000)
 800274a:	4baa      	ldr	r3, [pc, #680]	@ (80029f4 <Joy_State+0x2c8>)
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002752:	4293      	cmp	r3, r2
 8002754:	d903      	bls.n	800275e <Joy_State+0x32>
	{
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002756:	4ba8      	ldr	r3, [pc, #672]	@ (80029f8 <Joy_State+0x2cc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2200      	movs	r2, #0
 800275c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	static uint64_t timestamp4 =0;
	if(timestamp4 < HAL_GetTick())
 800275e:	f002 f887 	bl	8004870 <HAL_GetTick>
 8002762:	4603      	mov	r3, r0
 8002764:	2200      	movs	r2, #0
 8002766:	469a      	mov	sl, r3
 8002768:	4693      	mov	fp, r2
 800276a:	4ba4      	ldr	r3, [pc, #656]	@ (80029fc <Joy_State+0x2d0>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	4552      	cmp	r2, sl
 8002772:	eb73 030b 	sbcs.w	r3, r3, fp
 8002776:	f080 8102 	bcs.w	800297e <Joy_State+0x252>
	{
		if(joyX > 3000)
 800277a:	4ba1      	ldr	r3, [pc, #644]	@ (8002a00 <Joy_State+0x2d4>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002782:	4293      	cmp	r3, r2
 8002784:	d909      	bls.n	800279a <Joy_State+0x6e>
		{
			X_Actual_Position = X_Actual_Position-10;
 8002786:	4b9f      	ldr	r3, [pc, #636]	@ (8002a04 <Joy_State+0x2d8>)
 8002788:	edd3 7a00 	vldr	s15, [r3]
 800278c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002790:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002794:	4b9b      	ldr	r3, [pc, #620]	@ (8002a04 <Joy_State+0x2d8>)
 8002796:	edc3 7a00 	vstr	s15, [r3]
		}
		if(joyX < 1600)
 800279a:	4b99      	ldr	r3, [pc, #612]	@ (8002a00 <Joy_State+0x2d4>)
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80027a2:	d209      	bcs.n	80027b8 <Joy_State+0x8c>
		{
			X_Actual_Position = X_Actual_Position+10;
 80027a4:	4b97      	ldr	r3, [pc, #604]	@ (8002a04 <Joy_State+0x2d8>)
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80027ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027b2:	4b94      	ldr	r3, [pc, #592]	@ (8002a04 <Joy_State+0x2d8>)
 80027b4:	edc3 7a00 	vstr	s15, [r3]
		}
		if(X_Actual_Position <= 0)X_Actual_Position=0;
 80027b8:	4b92      	ldr	r3, [pc, #584]	@ (8002a04 <Joy_State+0x2d8>)
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c6:	d803      	bhi.n	80027d0 <Joy_State+0xa4>
 80027c8:	4b8e      	ldr	r3, [pc, #568]	@ (8002a04 <Joy_State+0x2d8>)
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
		timestamp4 = HAL_GetTick()+100;
 80027d0:	f002 f84e 	bl	8004870 <HAL_GetTick>
 80027d4:	4603      	mov	r3, r0
 80027d6:	3364      	adds	r3, #100	@ 0x64
 80027d8:	2200      	movs	r2, #0
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	617a      	str	r2, [r7, #20]
 80027de:	4b87      	ldr	r3, [pc, #540]	@ (80029fc <Joy_State+0x2d0>)
 80027e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80027e4:	e9c3 1200 	strd	r1, r2, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80027e8:	2120      	movs	r1, #32
 80027ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027ee:	f004 fad9 	bl	8006da4 <HAL_GPIO_TogglePin>
 80027f2:	e0c4      	b.n	800297e <Joy_State+0x252>
	}
}

else if(state == 1)
 80027f4:	4b7e      	ldr	r3, [pc, #504]	@ (80029f0 <Joy_State+0x2c4>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d16d      	bne.n	80028d8 <Joy_State+0x1ac>
{
	static uint64_t timestamp4 =0;
	if(timestamp4 < HAL_GetTick())
 80027fc:	f002 f838 	bl	8004870 <HAL_GetTick>
 8002800:	4603      	mov	r3, r0
 8002802:	2200      	movs	r2, #0
 8002804:	4698      	mov	r8, r3
 8002806:	4691      	mov	r9, r2
 8002808:	4b7f      	ldr	r3, [pc, #508]	@ (8002a08 <Joy_State+0x2dc>)
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	4542      	cmp	r2, r8
 8002810:	eb73 0309 	sbcs.w	r3, r3, r9
 8002814:	d22c      	bcs.n	8002870 <Joy_State+0x144>
	{
		if(joyX > 3000)
 8002816:	4b7a      	ldr	r3, [pc, #488]	@ (8002a00 <Joy_State+0x2d4>)
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800281e:	4293      	cmp	r3, r2
 8002820:	d904      	bls.n	800282c <Joy_State+0x100>
		{
			A = A-250;
 8002822:	4b7a      	ldr	r3, [pc, #488]	@ (8002a0c <Joy_State+0x2e0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3bfa      	subs	r3, #250	@ 0xfa
 8002828:	4a78      	ldr	r2, [pc, #480]	@ (8002a0c <Joy_State+0x2e0>)
 800282a:	6013      	str	r3, [r2, #0]
		}
		if(joyX < 1600)
 800282c:	4b74      	ldr	r3, [pc, #464]	@ (8002a00 <Joy_State+0x2d4>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8002834:	d204      	bcs.n	8002840 <Joy_State+0x114>
		{
			A = A+250;
 8002836:	4b75      	ldr	r3, [pc, #468]	@ (8002a0c <Joy_State+0x2e0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	33fa      	adds	r3, #250	@ 0xfa
 800283c:	4a73      	ldr	r2, [pc, #460]	@ (8002a0c <Joy_State+0x2e0>)
 800283e:	6013      	str	r3, [r2, #0]
		}
		if(A <= 0)A=0;
 8002840:	4b72      	ldr	r3, [pc, #456]	@ (8002a0c <Joy_State+0x2e0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	dc02      	bgt.n	800284e <Joy_State+0x122>
 8002848:	4b70      	ldr	r3, [pc, #448]	@ (8002a0c <Joy_State+0x2e0>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
		timestamp4 = HAL_GetTick()+100;
 800284e:	f002 f80f 	bl	8004870 <HAL_GetTick>
 8002852:	4603      	mov	r3, r0
 8002854:	3364      	adds	r3, #100	@ 0x64
 8002856:	2200      	movs	r2, #0
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	60fa      	str	r2, [r7, #12]
 800285c:	4b6a      	ldr	r3, [pc, #424]	@ (8002a08 <Joy_State+0x2dc>)
 800285e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002862:	e9c3 1200 	strd	r1, r2, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002866:	2120      	movs	r1, #32
 8002868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800286c:	f004 fa9a 	bl	8006da4 <HAL_GPIO_TogglePin>
	}
	if(joyY > 3000 || joyY < 1600)
 8002870:	4b60      	ldr	r3, [pc, #384]	@ (80029f4 <Joy_State+0x2c8>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002878:	4293      	cmp	r3, r2
 800287a:	d804      	bhi.n	8002886 <Joy_State+0x15a>
 800287c:	4b5d      	ldr	r3, [pc, #372]	@ (80029f4 <Joy_State+0x2c8>)
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8002884:	d21d      	bcs.n	80028c2 <Joy_State+0x196>
	{
		if (joyY > 3000)
 8002886:	4b5b      	ldr	r3, [pc, #364]	@ (80029f4 <Joy_State+0x2c8>)
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800288e:	4293      	cmp	r3, r2
 8002890:	d90b      	bls.n	80028aa <Joy_State+0x17e>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8002892:	2201      	movs	r2, #1
 8002894:	2101      	movs	r1, #1
 8002896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800289a:	f004 fa6b 	bl	8006d74 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, A);
 800289e:	4b5b      	ldr	r3, [pc, #364]	@ (8002a0c <Joy_State+0x2e0>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a10 <Joy_State+0x2e4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3000)
 80028a8:	e069      	b.n	800297e <Joy_State+0x252>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2101      	movs	r1, #1
 80028ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028b2:	f004 fa5f 	bl	8006d74 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, A);
 80028b6:	4b55      	ldr	r3, [pc, #340]	@ (8002a0c <Joy_State+0x2e0>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b55      	ldr	r3, [pc, #340]	@ (8002a10 <Joy_State+0x2e4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3000)
 80028c0:	e05d      	b.n	800297e <Joy_State+0x252>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2101      	movs	r1, #1
 80028c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ca:	f004 fa53 	bl	8006d74 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80028ce:	4b50      	ldr	r3, [pc, #320]	@ (8002a10 <Joy_State+0x2e4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2200      	movs	r2, #0
 80028d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80028d6:	e052      	b.n	800297e <Joy_State+0x252>
	}
}

else if(state == 2)
 80028d8:	4b45      	ldr	r3, [pc, #276]	@ (80029f0 <Joy_State+0x2c4>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d144      	bne.n	800296a <Joy_State+0x23e>
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);
 80028e0:	2201      	movs	r2, #1
 80028e2:	2120      	movs	r1, #32
 80028e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028e8:	f004 fa44 	bl	8006d74 <HAL_GPIO_WritePin>
	if(joyY > 3000 || joyY < 1600)
 80028ec:	4b41      	ldr	r3, [pc, #260]	@ (80029f4 <Joy_State+0x2c8>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d804      	bhi.n	8002902 <Joy_State+0x1d6>
 80028f8:	4b3e      	ldr	r3, [pc, #248]	@ (80029f4 <Joy_State+0x2c8>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8002900:	d225      	bcs.n	800294e <Joy_State+0x222>
	{
		if (joyY > 3000)
 8002902:	4b3c      	ldr	r3, [pc, #240]	@ (80029f4 <Joy_State+0x2c8>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800290a:	4293      	cmp	r3, r2
 800290c:	d90f      	bls.n	800292e <Joy_State+0x202>
		{
			A = 10625;
 800290e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a0c <Joy_State+0x2e0>)
 8002910:	f642 1281 	movw	r2, #10625	@ 0x2981
 8002914:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8002916:	2201      	movs	r2, #1
 8002918:	2101      	movs	r1, #1
 800291a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800291e:	f004 fa29 	bl	8006d74 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10250);
 8002922:	4b3b      	ldr	r3, [pc, #236]	@ (8002a10 <Joy_State+0x2e4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f642 020a 	movw	r2, #10250	@ 0x280a
 800292a:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3000)
 800292c:	e027      	b.n	800297e <Joy_State+0x252>
		}
		else
		{
			A = -10625;
 800292e:	4b37      	ldr	r3, [pc, #220]	@ (8002a0c <Joy_State+0x2e0>)
 8002930:	f46f 5226 	mvn.w	r2, #10624	@ 0x2980
 8002934:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2101      	movs	r1, #1
 800293a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800293e:	f004 fa19 	bl	8006d74 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10250);
 8002942:	4b33      	ldr	r3, [pc, #204]	@ (8002a10 <Joy_State+0x2e4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f642 020a 	movw	r2, #10250	@ 0x280a
 800294a:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3000)
 800294c:	e017      	b.n	800297e <Joy_State+0x252>
		}
	}
	else
	{
		A = 0;
 800294e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a0c <Joy_State+0x2e0>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002954:	2200      	movs	r2, #0
 8002956:	2101      	movs	r1, #1
 8002958:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800295c:	f004 fa0a 	bl	8006d74 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 8002960:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <Joy_State+0x2e4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2200      	movs	r2, #0
 8002966:	635a      	str	r2, [r3, #52]	@ 0x34
 8002968:	e009      	b.n	800297e <Joy_State+0x252>
//	}
//	PIDposition2();
//}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2101      	movs	r1, #1
 800296e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002972:	f004 f9ff 	bl	8006d74 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 8002976:	4b26      	ldr	r3, [pc, #152]	@ (8002a10 <Joy_State+0x2e4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2200      	movs	r2, #0
 800297c:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	static uint64_t timestamp2 =0;
	if(timestamp2 < HAL_GetTick())
 800297e:	f001 ff77 	bl	8004870 <HAL_GetTick>
 8002982:	4603      	mov	r3, r0
 8002984:	2200      	movs	r2, #0
 8002986:	461c      	mov	r4, r3
 8002988:	4615      	mov	r5, r2
 800298a:	4b22      	ldr	r3, [pc, #136]	@ (8002a14 <Joy_State+0x2e8>)
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	42a2      	cmp	r2, r4
 8002992:	41ab      	sbcs	r3, r5
 8002994:	d27b      	bcs.n	8002a8e <Joy_State+0x362>
	{
		if (joySW == 0)
 8002996:	4b15      	ldr	r3, [pc, #84]	@ (80029ec <Joy_State+0x2c0>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d16b      	bne.n	8002a76 <Joy_State+0x34a>
		{
			switch (state)
 800299e:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <Joy_State+0x2c4>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d867      	bhi.n	8002a76 <Joy_State+0x34a>
 80029a6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ac <Joy_State+0x280>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	080029bd 	.word	0x080029bd
 80029b0:	080029df 	.word	0x080029df
 80029b4:	08002a33 	.word	0x08002a33
 80029b8:	08002a55 	.word	0x08002a55
			{
			case 0:
				state = 1;
 80029bc:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <Joy_State+0x2c4>)
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80029c2:	e007      	b.n	80029d4 <Joy_State+0x2a8>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80029c4:	2101      	movs	r1, #1
 80029c6:	4808      	ldr	r0, [pc, #32]	@ (80029e8 <Joy_State+0x2bc>)
 80029c8:	f004 f9bc 	bl	8006d44 <HAL_GPIO_ReadPin>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461a      	mov	r2, r3
 80029d0:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <Joy_State+0x2c0>)
 80029d2:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80029d4:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <Joy_State+0x2c0>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f3      	beq.n	80029c4 <Joy_State+0x298>
				}
				break;
 80029dc:	e04b      	b.n	8002a76 <Joy_State+0x34a>
			case 1:
				state = 2;
 80029de:	4b04      	ldr	r3, [pc, #16]	@ (80029f0 <Joy_State+0x2c4>)
 80029e0:	2202      	movs	r2, #2
 80029e2:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80029e4:	e020      	b.n	8002a28 <Joy_State+0x2fc>
 80029e6:	bf00      	nop
 80029e8:	48000800 	.word	0x48000800
 80029ec:	2000132c 	.word	0x2000132c
 80029f0:	2000132d 	.word	0x2000132d
 80029f4:	2000133e 	.word	0x2000133e
 80029f8:	200004ac 	.word	0x200004ac
 80029fc:	200013b0 	.word	0x200013b0
 8002a00:	2000133c 	.word	0x2000133c
 8002a04:	20001168 	.word	0x20001168
 8002a08:	200013b8 	.word	0x200013b8
 8002a0c:	20000200 	.word	0x20000200
 8002a10:	20000578 	.word	0x20000578
 8002a14:	200013c0 	.word	0x200013c0
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4820      	ldr	r0, [pc, #128]	@ (8002a9c <Joy_State+0x370>)
 8002a1c:	f004 f992 	bl	8006d44 <HAL_GPIO_ReadPin>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa0 <Joy_State+0x374>)
 8002a26:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002a28:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa0 <Joy_State+0x374>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f3      	beq.n	8002a18 <Joy_State+0x2ec>
				}
				break;
 8002a30:	e021      	b.n	8002a76 <Joy_State+0x34a>
			case 2:
				state = 3;
 8002a32:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa4 <Joy_State+0x378>)
 8002a34:	2203      	movs	r2, #3
 8002a36:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002a38:	e007      	b.n	8002a4a <Joy_State+0x31e>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	4817      	ldr	r0, [pc, #92]	@ (8002a9c <Joy_State+0x370>)
 8002a3e:	f004 f981 	bl	8006d44 <HAL_GPIO_ReadPin>
 8002a42:	4603      	mov	r3, r0
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b16      	ldr	r3, [pc, #88]	@ (8002aa0 <Joy_State+0x374>)
 8002a48:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002a4a:	4b15      	ldr	r3, [pc, #84]	@ (8002aa0 <Joy_State+0x374>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f3      	beq.n	8002a3a <Joy_State+0x30e>
				}
				break;
 8002a52:	e010      	b.n	8002a76 <Joy_State+0x34a>
			case 3:
				state = 0;
 8002a54:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <Joy_State+0x378>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002a5a:	e007      	b.n	8002a6c <Joy_State+0x340>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	480f      	ldr	r0, [pc, #60]	@ (8002a9c <Joy_State+0x370>)
 8002a60:	f004 f970 	bl	8006d44 <HAL_GPIO_ReadPin>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <Joy_State+0x374>)
 8002a6a:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <Joy_State+0x374>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f3      	beq.n	8002a5c <Joy_State+0x330>
				}
				break;
 8002a74:	bf00      	nop
			}
		}
		timestamp2 = HAL_GetTick() + 100;
 8002a76:	f001 fefb 	bl	8004870 <HAL_GetTick>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	3364      	adds	r3, #100	@ 0x64
 8002a7e:	2200      	movs	r2, #0
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <Joy_State+0x37c>)
 8002a86:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002a8a:	e9c3 1200 	strd	r1, r2, [r3]
	}
	Joy_Averaged();
 8002a8e:	f7ff fdf7 	bl	8002680 <Joy_Averaged>
}
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a9c:	48000800 	.word	0x48000800
 8002aa0:	2000132c 	.word	0x2000132c
 8002aa4:	2000132d 	.word	0x2000132d
 8002aa8:	200013c0 	.word	0x200013c0

08002aac <ButtonMem>:
void ButtonMem(){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	if(Mode == 1)
 8002ab0:	4b62      	ldr	r3, [pc, #392]	@ (8002c3c <ButtonMem+0x190>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	f040 8087 	bne.w	8002bc8 <ButtonMem+0x11c>
		{
			if(ButtonTest[1] == 0)
 8002aba:	4b61      	ldr	r3, [pc, #388]	@ (8002c40 <ButtonMem+0x194>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d112      	bne.n	8002ae8 <ButtonMem+0x3c>
			{
				registerFrame[0x23].U16 = Pos*10;
 8002ac2:	4b60      	ldr	r3, [pc, #384]	@ (8002c44 <ButtonMem+0x198>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad4:	ee17 3a90 	vmov	r3, s15
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	4b5b      	ldr	r3, [pc, #364]	@ (8002c48 <ButtonMem+0x19c>)
 8002adc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				MemPos[0] = Pos;
 8002ae0:	4b58      	ldr	r3, [pc, #352]	@ (8002c44 <ButtonMem+0x198>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a59      	ldr	r2, [pc, #356]	@ (8002c4c <ButtonMem+0x1a0>)
 8002ae6:	6013      	str	r3, [r2, #0]
			}
			if(ButtonTest[2] == 0)
 8002ae8:	4b55      	ldr	r3, [pc, #340]	@ (8002c40 <ButtonMem+0x194>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d112      	bne.n	8002b16 <ButtonMem+0x6a>
			{
				registerFrame[0x24].U16 = Pos*10;
 8002af0:	4b54      	ldr	r3, [pc, #336]	@ (8002c44 <ButtonMem+0x198>)
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b02:	ee17 3a90 	vmov	r3, s15
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	4b4f      	ldr	r3, [pc, #316]	@ (8002c48 <ButtonMem+0x19c>)
 8002b0a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
				MemPos[1] = Pos;
 8002b0e:	4b4d      	ldr	r3, [pc, #308]	@ (8002c44 <ButtonMem+0x198>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a4e      	ldr	r2, [pc, #312]	@ (8002c4c <ButtonMem+0x1a0>)
 8002b14:	6053      	str	r3, [r2, #4]
			}
			if(ButtonTest[3] == 0)
 8002b16:	4b4a      	ldr	r3, [pc, #296]	@ (8002c40 <ButtonMem+0x194>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d112      	bne.n	8002b44 <ButtonMem+0x98>
			{
				registerFrame[0x25].U16 = Pos*10;
 8002b1e:	4b49      	ldr	r3, [pc, #292]	@ (8002c44 <ButtonMem+0x198>)
 8002b20:	edd3 7a00 	vldr	s15, [r3]
 8002b24:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b30:	ee17 3a90 	vmov	r3, s15
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	4b44      	ldr	r3, [pc, #272]	@ (8002c48 <ButtonMem+0x19c>)
 8002b38:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
				MemPos[2] = Pos;
 8002b3c:	4b41      	ldr	r3, [pc, #260]	@ (8002c44 <ButtonMem+0x198>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a42      	ldr	r2, [pc, #264]	@ (8002c4c <ButtonMem+0x1a0>)
 8002b42:	6093      	str	r3, [r2, #8]
			}
			if(ButtonTest[4] == 0)
 8002b44:	4b3e      	ldr	r3, [pc, #248]	@ (8002c40 <ButtonMem+0x194>)
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d112      	bne.n	8002b72 <ButtonMem+0xc6>
			{
				registerFrame[0x26].U16 = Pos*10;
 8002b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c44 <ButtonMem+0x198>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b5e:	ee17 3a90 	vmov	r3, s15
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	4b38      	ldr	r3, [pc, #224]	@ (8002c48 <ButtonMem+0x19c>)
 8002b66:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
				MemPos[3] = Pos;
 8002b6a:	4b36      	ldr	r3, [pc, #216]	@ (8002c44 <ButtonMem+0x198>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a37      	ldr	r2, [pc, #220]	@ (8002c4c <ButtonMem+0x1a0>)
 8002b70:	60d3      	str	r3, [r2, #12]
			}
			if(ButtonTest[5] == 0)
 8002b72:	4b33      	ldr	r3, [pc, #204]	@ (8002c40 <ButtonMem+0x194>)
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d112      	bne.n	8002ba0 <ButtonMem+0xf4>
			{
				registerFrame[0x27].U16 = Pos*10;
 8002b7a:	4b32      	ldr	r3, [pc, #200]	@ (8002c44 <ButtonMem+0x198>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002b84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b8c:	ee17 3a90 	vmov	r3, s15
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	4b2d      	ldr	r3, [pc, #180]	@ (8002c48 <ButtonMem+0x19c>)
 8002b94:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
				MemPos[4] = Pos;
 8002b98:	4b2a      	ldr	r3, [pc, #168]	@ (8002c44 <ButtonMem+0x198>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c4c <ButtonMem+0x1a0>)
 8002b9e:	6113      	str	r3, [r2, #16]
			}
			if(ButtonTest[0] == 0)//HOME Button
 8002ba0:	4b27      	ldr	r3, [pc, #156]	@ (8002c40 <ButtonMem+0x194>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d147      	bne.n	8002c38 <ButtonMem+0x18c>
			{
				registerFrame[0x10].U16 = 0b0000;
 8002ba8:	4b27      	ldr	r3, [pc, #156]	@ (8002c48 <ButtonMem+0x19c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	841a      	strh	r2, [r3, #32]
				resetHome();
 8002bae:	f000 f8a3 	bl	8002cf8 <resetHome>
				Pos_Target = 0;
 8002bb2:	4b27      	ldr	r3, [pc, #156]	@ (8002c50 <ButtonMem+0x1a4>)
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
				Mode = 0;
 8002bba:	4b20      	ldr	r3, [pc, #128]	@ (8002c3c <ButtonMem+0x190>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
				state_ALL = 0;
 8002bc0:	4b24      	ldr	r3, [pc, #144]	@ (8002c54 <ButtonMem+0x1a8>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
				Mode = 0;
				Pos_Target = 0;
				resetHome();
			}
		}
}
 8002bc6:	e037      	b.n	8002c38 <ButtonMem+0x18c>
			if(ButtonTest[1] == 0)
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c40 <ButtonMem+0x194>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d103      	bne.n	8002bd8 <ButtonMem+0x12c>
				MemPos[0] = Pos;
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c44 <ButtonMem+0x198>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c4c <ButtonMem+0x1a0>)
 8002bd6:	6013      	str	r3, [r2, #0]
			if(ButtonTest[2] == 0)
 8002bd8:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <ButtonMem+0x194>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d103      	bne.n	8002be8 <ButtonMem+0x13c>
				MemPos[1] = Pos;
 8002be0:	4b18      	ldr	r3, [pc, #96]	@ (8002c44 <ButtonMem+0x198>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a19      	ldr	r2, [pc, #100]	@ (8002c4c <ButtonMem+0x1a0>)
 8002be6:	6053      	str	r3, [r2, #4]
			if(ButtonTest[3] == 0)
 8002be8:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <ButtonMem+0x194>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d103      	bne.n	8002bf8 <ButtonMem+0x14c>
				MemPos[2] = Pos;
 8002bf0:	4b14      	ldr	r3, [pc, #80]	@ (8002c44 <ButtonMem+0x198>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a15      	ldr	r2, [pc, #84]	@ (8002c4c <ButtonMem+0x1a0>)
 8002bf6:	6093      	str	r3, [r2, #8]
			if(ButtonTest[4] == 0)
 8002bf8:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <ButtonMem+0x194>)
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d103      	bne.n	8002c08 <ButtonMem+0x15c>
				MemPos[3] = Pos;
 8002c00:	4b10      	ldr	r3, [pc, #64]	@ (8002c44 <ButtonMem+0x198>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a11      	ldr	r2, [pc, #68]	@ (8002c4c <ButtonMem+0x1a0>)
 8002c06:	60d3      	str	r3, [r2, #12]
			if(ButtonTest[5] == 0)
 8002c08:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <ButtonMem+0x194>)
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d103      	bne.n	8002c18 <ButtonMem+0x16c>
				MemPos[4] = Pos;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <ButtonMem+0x198>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	@ (8002c4c <ButtonMem+0x1a0>)
 8002c16:	6113      	str	r3, [r2, #16]
			if(ButtonTest[0] == 0)//HOME Button
 8002c18:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <ButtonMem+0x194>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10b      	bne.n	8002c38 <ButtonMem+0x18c>
				state_ALL = 0;
 8002c20:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <ButtonMem+0x1a8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
				Mode = 0;
 8002c26:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <ButtonMem+0x190>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
				Pos_Target = 0;
 8002c2c:	4b08      	ldr	r3, [pc, #32]	@ (8002c50 <ButtonMem+0x1a4>)
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
				resetHome();
 8002c34:	f000 f860 	bl	8002cf8 <resetHome>
}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	2000116c 	.word	0x2000116c
 8002c40:	200011c0 	.word	0x200011c0
 8002c44:	20001354 	.word	0x20001354
 8002c48:	20000fd8 	.word	0x20000fd8
 8002c4c:	200011f0 	.word	0x200011f0
 8002c50:	200012bc 	.word	0x200012bc
 8002c54:	20000204 	.word	0x20000204

08002c58 <reset>:

void reset(){
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
	Velocontrol.Error[NEW] = 0;
 8002c5c:	4b20      	ldr	r3, [pc, #128]	@ (8002ce0 <reset+0x88>)
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	60da      	str	r2, [r3, #12]
	Velocontrol.Error[OLD] = 0;
 8002c64:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce0 <reset+0x88>)
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
	Velocontrol.Error[OLDER] = 0;
 8002c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ce0 <reset+0x88>)
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	615a      	str	r2, [r3, #20]
	Velocontrol.Output[NEW] = 0;
 8002c74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce0 <reset+0x88>)
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
	Velocontrol.Output[OLD] = 0;
 8002c7c:	4b18      	ldr	r3, [pc, #96]	@ (8002ce0 <reset+0x88>)
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	605a      	str	r2, [r3, #4]
	Velocontrol.Output[OLDER] = 0;
 8002c84:	4b16      	ldr	r3, [pc, #88]	@ (8002ce0 <reset+0x88>)
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]

	Poscontrol.Error[NEW] = 0;
 8002c8c:	4b15      	ldr	r3, [pc, #84]	@ (8002ce4 <reset+0x8c>)
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	60da      	str	r2, [r3, #12]
	Poscontrol.Error[OLD] = 0;
 8002c94:	4b13      	ldr	r3, [pc, #76]	@ (8002ce4 <reset+0x8c>)
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	611a      	str	r2, [r3, #16]
	Poscontrol.Error[OLDER] = 0;
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <reset+0x8c>)
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	615a      	str	r2, [r3, #20]
	Poscontrol.Output[NEW] = 0;
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce4 <reset+0x8c>)
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
	Poscontrol.Output[OLD] = 0;
 8002cac:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce4 <reset+0x8c>)
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	605a      	str	r2, [r3, #4]
	Poscontrol.Output[OLDER] = 0;
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <reset+0x8c>)
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]

	Pos_Start = Pos;
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <reset+0x90>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cec <reset+0x94>)
 8002cc2:	6013      	str	r3, [r2, #0]
	Velo_Start = 0;
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <reset+0x98>)
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
	t = 0;
 8002ccc:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <reset+0x9c>)
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20001218 	.word	0x20001218
 8002ce4:	20001240 	.word	0x20001240
 8002ce8:	20001354 	.word	0x20001354
 8002cec:	200012b8 	.word	0x200012b8
 8002cf0:	200012c4 	.word	0x200012c4
 8002cf4:	200012d4 	.word	0x200012d4

08002cf8 <resetHome>:
void resetHome(){
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
	Velocontrol.Error[NEW] = 0;
 8002cfc:	4b38      	ldr	r3, [pc, #224]	@ (8002de0 <resetHome+0xe8>)
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	60da      	str	r2, [r3, #12]
	Velocontrol.Error[OLD] = 0;
 8002d04:	4b36      	ldr	r3, [pc, #216]	@ (8002de0 <resetHome+0xe8>)
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	611a      	str	r2, [r3, #16]
	Velocontrol.Error[OLDER] = 0;
 8002d0c:	4b34      	ldr	r3, [pc, #208]	@ (8002de0 <resetHome+0xe8>)
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	615a      	str	r2, [r3, #20]
	Velocontrol.Output[NEW] = 0;
 8002d14:	4b32      	ldr	r3, [pc, #200]	@ (8002de0 <resetHome+0xe8>)
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
	Velocontrol.Output[OLD] = 0;
 8002d1c:	4b30      	ldr	r3, [pc, #192]	@ (8002de0 <resetHome+0xe8>)
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	605a      	str	r2, [r3, #4]
	Velocontrol.Output[OLDER] = 0;
 8002d24:	4b2e      	ldr	r3, [pc, #184]	@ (8002de0 <resetHome+0xe8>)
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]

	Poscontrol.Error[NEW] = 0;
 8002d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002de4 <resetHome+0xec>)
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	60da      	str	r2, [r3, #12]
	Poscontrol.Error[OLD] = 0;
 8002d34:	4b2b      	ldr	r3, [pc, #172]	@ (8002de4 <resetHome+0xec>)
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
	Poscontrol.Error[OLDER] = 0;
 8002d3c:	4b29      	ldr	r3, [pc, #164]	@ (8002de4 <resetHome+0xec>)
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	615a      	str	r2, [r3, #20]
	Poscontrol.Output[NEW] = 0;
 8002d44:	4b27      	ldr	r3, [pc, #156]	@ (8002de4 <resetHome+0xec>)
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
	Poscontrol.Output[OLD] = 0;
 8002d4c:	4b25      	ldr	r3, [pc, #148]	@ (8002de4 <resetHome+0xec>)
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	605a      	str	r2, [r3, #4]
	Poscontrol.Output[OLDER] = 0;
 8002d54:	4b23      	ldr	r3, [pc, #140]	@ (8002de4 <resetHome+0xec>)
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
	Velocontrol.Error[NEW] = 0;
 8002d5c:	4b20      	ldr	r3, [pc, #128]	@ (8002de0 <resetHome+0xe8>)
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	60da      	str	r2, [r3, #12]

	Velocontrol2.Error[OLD] = 0;
 8002d64:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <resetHome+0xf0>)
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	611a      	str	r2, [r3, #16]
	Velocontrol2.Error[OLDER] = 0;
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002de8 <resetHome+0xf0>)
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	615a      	str	r2, [r3, #20]
	Velocontrol2.Output[NEW] = 0;
 8002d74:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <resetHome+0xf0>)
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
	Velocontrol2.Output[OLD] = 0;
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002de8 <resetHome+0xf0>)
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	605a      	str	r2, [r3, #4]
	Velocontrol2.Output[OLDER] = 0;
 8002d84:	4b18      	ldr	r3, [pc, #96]	@ (8002de8 <resetHome+0xf0>)
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]

	Poscontrol2.Error[NEW] = 0;
 8002d8c:	4b17      	ldr	r3, [pc, #92]	@ (8002dec <resetHome+0xf4>)
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	60da      	str	r2, [r3, #12]
	Poscontrol2.Error[OLD] = 0;
 8002d94:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <resetHome+0xf4>)
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
	Poscontrol2.Error[OLDER] = 0;
 8002d9c:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <resetHome+0xf4>)
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	615a      	str	r2, [r3, #20]
	Poscontrol2.Output[NEW] = 0;
 8002da4:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <resetHome+0xf4>)
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
	Poscontrol2.Output[OLD] = 0;
 8002dac:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <resetHome+0xf4>)
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	605a      	str	r2, [r3, #4]
	Poscontrol2.Output[OLDER] = 0;
 8002db4:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <resetHome+0xf4>)
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
	Pos_Start = 0;
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <resetHome+0xf8>)
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
	Velo_Start = 0;
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <resetHome+0xfc>)
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
	t = 0;
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002df8 <resetHome+0x100>)
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20001218 	.word	0x20001218
 8002de4:	20001240 	.word	0x20001240
 8002de8:	20001268 	.word	0x20001268
 8002dec:	20001290 	.word	0x20001290
 8002df0:	200012b8 	.word	0x200012b8
 8002df4:	200012c4 	.word	0x200012c4
 8002df8:	200012d4 	.word	0x200012d4

08002dfc <PIDreset>:
void PIDreset(){
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
	Velocontrol.Error[NEW] = 0;
 8002e00:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <PIDreset+0x70>)
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	60da      	str	r2, [r3, #12]
	Velocontrol.Error[OLD] = 0;
 8002e08:	4b18      	ldr	r3, [pc, #96]	@ (8002e6c <PIDreset+0x70>)
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	611a      	str	r2, [r3, #16]
	Velocontrol.Error[OLDER] = 0;
 8002e10:	4b16      	ldr	r3, [pc, #88]	@ (8002e6c <PIDreset+0x70>)
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	615a      	str	r2, [r3, #20]
	Velocontrol.Output[NEW] = 0;
 8002e18:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <PIDreset+0x70>)
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
	Velocontrol.Output[OLD] = 0;
 8002e20:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <PIDreset+0x70>)
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	605a      	str	r2, [r3, #4]
	Velocontrol.Output[OLDER] = 0;
 8002e28:	4b10      	ldr	r3, [pc, #64]	@ (8002e6c <PIDreset+0x70>)
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]

	Poscontrol.Error[NEW] = 0;
 8002e30:	4b0f      	ldr	r3, [pc, #60]	@ (8002e70 <PIDreset+0x74>)
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	60da      	str	r2, [r3, #12]
	Poscontrol.Error[OLD] = 0;
 8002e38:	4b0d      	ldr	r3, [pc, #52]	@ (8002e70 <PIDreset+0x74>)
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
	Poscontrol.Error[OLDER] = 0;
 8002e40:	4b0b      	ldr	r3, [pc, #44]	@ (8002e70 <PIDreset+0x74>)
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	615a      	str	r2, [r3, #20]
	Poscontrol.Output[NEW] = 0;
 8002e48:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <PIDreset+0x74>)
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
	Poscontrol.Output[OLD] = 0;
 8002e50:	4b07      	ldr	r3, [pc, #28]	@ (8002e70 <PIDreset+0x74>)
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	605a      	str	r2, [r3, #4]
	Poscontrol.Output[OLDER] = 0;
 8002e58:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <PIDreset+0x74>)
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20001218 	.word	0x20001218
 8002e70:	20001240 	.word	0x20001240
 8002e74:	00000000 	.word	0x00000000

08002e78 <QEIEncoderPos_Update>:
void QEIEncoderPos_Update()
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8002e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f38 <QEIEncoderPos_Update+0xc0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	461a      	mov	r2, r3
 8002e84:	4b2d      	ldr	r3, [pc, #180]	@ (8002f3c <QEIEncoderPos_Update+0xc4>)
 8002e86:	601a      	str	r2, [r3, #0]
//	Pos = ((QEIReadRaw)*25*3.14)/8192;
	if(Count >= 0)
 8002e88:	4b2d      	ldr	r3, [pc, #180]	@ (8002f40 <QEIEncoderPos_Update+0xc8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	db21      	blt.n	8002ed4 <QEIEncoderPos_Update+0x5c>
	{
//		Pos = ((QEIReadRaw+(Count*57344))*25*3.14)/8192;
		Pos = ((QEIReadRaw)*25*3.14)/8192;
 8002e90:	4b2a      	ldr	r3, [pc, #168]	@ (8002f3c <QEIEncoderPos_Update+0xc4>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	009a      	lsls	r2, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd fb0c 	bl	80004bc <__aeabi_i2d>
 8002ea4:	a322      	add	r3, pc, #136	@ (adr r3, 8002f30 <QEIEncoderPos_Update+0xb8>)
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f7fd fb71 	bl	8000590 <__aeabi_dmul>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	4b22      	ldr	r3, [pc, #136]	@ (8002f44 <QEIEncoderPos_Update+0xcc>)
 8002ebc:	f7fd fc92 	bl	80007e4 <__aeabi_ddiv>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fe1c 	bl	8000b04 <__aeabi_d2f>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4a1e      	ldr	r2, [pc, #120]	@ (8002f48 <QEIEncoderPos_Update+0xd0>)
 8002ed0:	6013      	str	r3, [r2, #0]
	else
	{
//		Pos	= ((QEIReadRaw-(fabs(Count)*57344))*25*3.14)/8192;
		Pos	= -(((65535-QEIReadRaw)*25*3.14)/8192);
	}
}
 8002ed2:	e028      	b.n	8002f26 <QEIEncoderPos_Update+0xae>
		Pos	= -(((65535-QEIReadRaw)*25*3.14)/8192);
 8002ed4:	4b19      	ldr	r3, [pc, #100]	@ (8002f3c <QEIEncoderPos_Update+0xc4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f5c3 427f 	rsb	r2, r3, #65280	@ 0xff00
 8002edc:	32ff      	adds	r2, #255	@ 0xff
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009a      	lsls	r2, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fae7 	bl	80004bc <__aeabi_i2d>
 8002eee:	a310      	add	r3, pc, #64	@ (adr r3, 8002f30 <QEIEncoderPos_Update+0xb8>)
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f7fd fb4c 	bl	8000590 <__aeabi_dmul>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <QEIEncoderPos_Update+0xcc>)
 8002f06:	f7fd fc6d 	bl	80007e4 <__aeabi_ddiv>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4610      	mov	r0, r2
 8002f10:	4619      	mov	r1, r3
 8002f12:	f7fd fdf7 	bl	8000b04 <__aeabi_d2f>
 8002f16:	4603      	mov	r3, r0
 8002f18:	ee07 3a90 	vmov	s15, r3
 8002f1c:	eef1 7a67 	vneg.f32	s15, s15
 8002f20:	4b09      	ldr	r3, [pc, #36]	@ (8002f48 <QEIEncoderPos_Update+0xd0>)
 8002f22:	edc3 7a00 	vstr	s15, [r3]
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	f3af 8000 	nop.w
 8002f30:	51eb851f 	.word	0x51eb851f
 8002f34:	40091eb8 	.word	0x40091eb8
 8002f38:	200004ac 	.word	0x200004ac
 8002f3c:	20001360 	.word	0x20001360
 8002f40:	2000135c 	.word	0x2000135c
 8002f44:	40c00000 	.word	0x40c00000
 8002f48:	20001354 	.word	0x20001354
 8002f4c:	00000000 	.word	0x00000000

08002f50 <QEIEncoderVel_Update>:
void QEIEncoderVel_Update()
{
 8002f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamp[NEW] = micros();
 8002f58:	f001 f880 	bl	800405c <micros>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4995      	ldr	r1, [pc, #596]	@ (80031b8 <QEIEncoderVel_Update+0x268>)
 8002f62:	e9c1 2302 	strd	r2, r3, [r1, #8]
QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8002f66:	4b95      	ldr	r3, [pc, #596]	@ (80031bc <QEIEncoderVel_Update+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	4a92      	ldr	r2, [pc, #584]	@ (80031b8 <QEIEncoderVel_Update+0x268>)
 8002f6e:	6013      	str	r3, [r2, #0]
//Postion 1 turn calculation
QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8002f70:	4b91      	ldr	r3, [pc, #580]	@ (80031b8 <QEIEncoderVel_Update+0x268>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f78:	ee07 3a90 	vmov	s15, r3
 8002f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f80:	4b8d      	ldr	r3, [pc, #564]	@ (80031b8 <QEIEncoderVel_Update+0x268>)
 8002f82:	edc3 7a06 	vstr	s15, [r3, #24]
//calculate dx
int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8002f86:	4b8c      	ldr	r3, [pc, #560]	@ (80031b8 <QEIEncoderVel_Update+0x268>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b8b      	ldr	r3, [pc, #556]	@ (80031b8 <QEIEncoderVel_Update+0x268>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	607b      	str	r3, [r7, #4]
//Handle Warp around
if(diffPosition > 28672)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002f98:	dd08      	ble.n	8002fac <QEIEncoderVel_Update+0x5c>
{
diffPosition -=57344;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f5a3 4360 	sub.w	r3, r3, #57344	@ 0xe000
 8002fa0:	607b      	str	r3, [r7, #4]
Count-=1;
 8002fa2:	4b87      	ldr	r3, [pc, #540]	@ (80031c0 <QEIEncoderVel_Update+0x270>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	4a85      	ldr	r2, [pc, #532]	@ (80031c0 <QEIEncoderVel_Update+0x270>)
 8002faa:	6013      	str	r3, [r2, #0]
}
if(diffPosition < -28672)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f513 4fe0 	cmn.w	r3, #28672	@ 0x7000
 8002fb2:	da08      	bge.n	8002fc6 <QEIEncoderVel_Update+0x76>
{
diffPosition +=57344;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8002fba:	607b      	str	r3, [r7, #4]
Count+=1;
 8002fbc:	4b80      	ldr	r3, [pc, #512]	@ (80031c0 <QEIEncoderVel_Update+0x270>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	4a7f      	ldr	r2, [pc, #508]	@ (80031c0 <QEIEncoderVel_Update+0x270>)
 8002fc4:	6013      	str	r3, [r2, #0]
}
//calculate dt
float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8002fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80031b8 <QEIEncoderVel_Update+0x268>)
 8002fc8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002fcc:	4b7a      	ldr	r3, [pc, #488]	@ (80031b8 <QEIEncoderVel_Update+0x268>)
 8002fce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fd2:	ebb0 0802 	subs.w	r8, r0, r2
 8002fd6:	eb61 0903 	sbc.w	r9, r1, r3
 8002fda:	4640      	mov	r0, r8
 8002fdc:	4649      	mov	r1, r9
 8002fde:	f7fd faa1 	bl	8000524 <__aeabi_ul2d>
 8002fe2:	a36b      	add	r3, pc, #428	@ (adr r3, 8003190 <QEIEncoderVel_Update+0x240>)
 8002fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe8:	f7fd fad2 	bl	8000590 <__aeabi_dmul>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f7fd fd86 	bl	8000b04 <__aeabi_d2f>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	603b      	str	r3, [r7, #0]
//calculate anglar velocity
QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003006:	ed97 7a00 	vldr	s14, [r7]
 800300a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800300e:	4b6a      	ldr	r3, [pc, #424]	@ (80031b8 <QEIEncoderVel_Update+0x268>)
 8003010:	edc3 7a07 	vstr	s15, [r3, #28]
speed = ((QEIdata.QEIAngularVelocity)/8192)*12.5*2*3.14;
 8003014:	4b68      	ldr	r3, [pc, #416]	@ (80031b8 <QEIEncoderVel_Update+0x268>)
 8003016:	edd3 7a07 	vldr	s15, [r3, #28]
 800301a:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80031c4 <QEIEncoderVel_Update+0x274>
 800301e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003022:	ee16 0a90 	vmov	r0, s13
 8003026:	f7fd fa5b 	bl	80004e0 <__aeabi_f2d>
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	4b66      	ldr	r3, [pc, #408]	@ (80031c8 <QEIEncoderVel_Update+0x278>)
 8003030:	f7fd faae 	bl	8000590 <__aeabi_dmul>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	f7fd f8f0 	bl	8000224 <__adddf3>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	a352      	add	r3, pc, #328	@ (adr r3, 8003198 <QEIEncoderVel_Update+0x248>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	f7fd fa9d 	bl	8000590 <__aeabi_dmul>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	f7fd fd51 	bl	8000b04 <__aeabi_d2f>
 8003062:	4603      	mov	r3, r0
 8003064:	4a59      	ldr	r2, [pc, #356]	@ (80031cc <QEIEncoderVel_Update+0x27c>)
 8003066:	6013      	str	r3, [r2, #0]

speed_fill = (0.969*speed_fill_1)+(0.0155*speed)+(0.0155*speed_1);
 8003068:	4b59      	ldr	r3, [pc, #356]	@ (80031d0 <QEIEncoderVel_Update+0x280>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fa37 	bl	80004e0 <__aeabi_f2d>
 8003072:	a34b      	add	r3, pc, #300	@ (adr r3, 80031a0 <QEIEncoderVel_Update+0x250>)
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	f7fd fa8a 	bl	8000590 <__aeabi_dmul>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4690      	mov	r8, r2
 8003082:	4699      	mov	r9, r3
 8003084:	4b51      	ldr	r3, [pc, #324]	@ (80031cc <QEIEncoderVel_Update+0x27c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fa29 	bl	80004e0 <__aeabi_f2d>
 800308e:	a346      	add	r3, pc, #280	@ (adr r3, 80031a8 <QEIEncoderVel_Update+0x258>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd fa7c 	bl	8000590 <__aeabi_dmul>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4640      	mov	r0, r8
 800309e:	4649      	mov	r1, r9
 80030a0:	f7fd f8c0 	bl	8000224 <__adddf3>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4690      	mov	r8, r2
 80030aa:	4699      	mov	r9, r3
 80030ac:	4b49      	ldr	r3, [pc, #292]	@ (80031d4 <QEIEncoderVel_Update+0x284>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fd fa15 	bl	80004e0 <__aeabi_f2d>
 80030b6:	a33c      	add	r3, pc, #240	@ (adr r3, 80031a8 <QEIEncoderVel_Update+0x258>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f7fd fa68 	bl	8000590 <__aeabi_dmul>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4640      	mov	r0, r8
 80030c6:	4649      	mov	r1, r9
 80030c8:	f7fd f8ac 	bl	8000224 <__adddf3>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	f7fd fd16 	bl	8000b04 <__aeabi_d2f>
 80030d8:	4603      	mov	r3, r0
 80030da:	4a3f      	ldr	r2, [pc, #252]	@ (80031d8 <QEIEncoderVel_Update+0x288>)
 80030dc:	6013      	str	r3, [r2, #0]
speed_1 = speed;
 80030de:	4b3b      	ldr	r3, [pc, #236]	@ (80031cc <QEIEncoderVel_Update+0x27c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a3c      	ldr	r2, [pc, #240]	@ (80031d4 <QEIEncoderVel_Update+0x284>)
 80030e4:	6013      	str	r3, [r2, #0]
speed_fill_1 = speed_fill;
 80030e6:	4b3c      	ldr	r3, [pc, #240]	@ (80031d8 <QEIEncoderVel_Update+0x288>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a39      	ldr	r2, [pc, #228]	@ (80031d0 <QEIEncoderVel_Update+0x280>)
 80030ec:	6013      	str	r3, [r2, #0]
static uint64_t timestamp_Accelation =0;
if(timestamp_Accelation < HAL_GetTick())
 80030ee:	f001 fbbf 	bl	8004870 <HAL_GetTick>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2200      	movs	r2, #0
 80030f6:	461c      	mov	r4, r3
 80030f8:	4615      	mov	r5, r2
 80030fa:	4b38      	ldr	r3, [pc, #224]	@ (80031dc <QEIEncoderVel_Update+0x28c>)
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	42a2      	cmp	r2, r4
 8003102:	41ab      	sbcs	r3, r5
 8003104:	d225      	bcs.n	8003152 <QEIEncoderVel_Update+0x202>
{
Accelation = fabs(speed_fill-speed_fill_1)/0.01;
 8003106:	4b34      	ldr	r3, [pc, #208]	@ (80031d8 <QEIEncoderVel_Update+0x288>)
 8003108:	ed93 7a00 	vldr	s14, [r3]
 800310c:	4b30      	ldr	r3, [pc, #192]	@ (80031d0 <QEIEncoderVel_Update+0x280>)
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003116:	eef0 7ae7 	vabs.f32	s15, s15
 800311a:	ee17 0a90 	vmov	r0, s15
 800311e:	f7fd f9df 	bl	80004e0 <__aeabi_f2d>
 8003122:	a323      	add	r3, pc, #140	@ (adr r3, 80031b0 <QEIEncoderVel_Update+0x260>)
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	f7fd fb5c 	bl	80007e4 <__aeabi_ddiv>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	f7fd fce6 	bl	8000b04 <__aeabi_d2f>
 8003138:	4603      	mov	r3, r0
 800313a:	4a29      	ldr	r2, [pc, #164]	@ (80031e0 <QEIEncoderVel_Update+0x290>)
 800313c:	6013      	str	r3, [r2, #0]
timestamp_Accelation = HAL_GetTick()+10;
 800313e:	f001 fb97 	bl	8004870 <HAL_GetTick>
 8003142:	4603      	mov	r3, r0
 8003144:	330a      	adds	r3, #10
 8003146:	2200      	movs	r2, #0
 8003148:	469a      	mov	sl, r3
 800314a:	4693      	mov	fp, r2
 800314c:	4b23      	ldr	r3, [pc, #140]	@ (80031dc <QEIEncoderVel_Update+0x28c>)
 800314e:	e9c3 ab00 	strd	sl, fp, [r3]





if(speed_fill>MAXspeed)
 8003152:	4b21      	ldr	r3, [pc, #132]	@ (80031d8 <QEIEncoderVel_Update+0x288>)
 8003154:	ed93 7a00 	vldr	s14, [r3]
 8003158:	4b22      	ldr	r3, [pc, #136]	@ (80031e4 <QEIEncoderVel_Update+0x294>)
 800315a:	edd3 7a00 	vldr	s15, [r3]
 800315e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003166:	dd03      	ble.n	8003170 <QEIEncoderVel_Update+0x220>
{
	MAXspeed = speed_fill;
 8003168:	4b1b      	ldr	r3, [pc, #108]	@ (80031d8 <QEIEncoderVel_Update+0x288>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a1d      	ldr	r2, [pc, #116]	@ (80031e4 <QEIEncoderVel_Update+0x294>)
 800316e:	6013      	str	r3, [r2, #0]
}
//store value for next loop
QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <QEIEncoderVel_Update+0x268>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a10      	ldr	r2, [pc, #64]	@ (80031b8 <QEIEncoderVel_Update+0x268>)
 8003176:	6053      	str	r3, [r2, #4]
QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8003178:	4b0f      	ldr	r3, [pc, #60]	@ (80031b8 <QEIEncoderVel_Update+0x268>)
 800317a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800317e:	490e      	ldr	r1, [pc, #56]	@ (80031b8 <QEIEncoderVel_Update+0x268>)
 8003180:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8003184:	bf00      	nop
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318e:	bf00      	nop
 8003190:	a0b5ed8d 	.word	0xa0b5ed8d
 8003194:	3eb0c6f7 	.word	0x3eb0c6f7
 8003198:	51eb851f 	.word	0x51eb851f
 800319c:	40091eb8 	.word	0x40091eb8
 80031a0:	49ba5e35 	.word	0x49ba5e35
 80031a4:	3fef020c 	.word	0x3fef020c
 80031a8:	c8b43958 	.word	0xc8b43958
 80031ac:	3f8fbe76 	.word	0x3f8fbe76
 80031b0:	47ae147b 	.word	0x47ae147b
 80031b4:	3f847ae1 	.word	0x3f847ae1
 80031b8:	20001368 	.word	0x20001368
 80031bc:	200004ac 	.word	0x200004ac
 80031c0:	2000135c 	.word	0x2000135c
 80031c4:	46000000 	.word	0x46000000
 80031c8:	40290000 	.word	0x40290000
 80031cc:	20001340 	.word	0x20001340
 80031d0:	20001350 	.word	0x20001350
 80031d4:	20001344 	.word	0x20001344
 80031d8:	2000134c 	.word	0x2000134c
 80031dc:	200013c8 	.word	0x200013c8
 80031e0:	20001358 	.word	0x20001358
 80031e4:	20001348 	.word	0x20001348

080031e8 <Trajectory>:

void Trajectory()
{
 80031e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
	static uint64_t timestamp_Traject =0;
		int64_t currentTime = micros();
 80031f0:	f000 ff34 	bl	800405c <micros>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	e9c7 2300 	strd	r2, r3, [r7]
		  if(timestamp_Traject < currentTime)
 80031fc:	4b99      	ldr	r3, [pc, #612]	@ (8003464 <Trajectory+0x27c>)
 80031fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003206:	4290      	cmp	r0, r2
 8003208:	eb71 0303 	sbcs.w	r3, r1, r3
 800320c:	f080 8219 	bcs.w	8003642 <Trajectory+0x45a>
		  {
			  switch(state_Tra)
 8003210:	4b95      	ldr	r3, [pc, #596]	@ (8003468 <Trajectory+0x280>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b03      	cmp	r3, #3
 8003216:	f200 81f6 	bhi.w	8003606 <Trajectory+0x41e>
 800321a:	a201      	add	r2, pc, #4	@ (adr r2, 8003220 <Trajectory+0x38>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	08003231 	.word	0x08003231
 8003224:	080033d5 	.word	0x080033d5
 8003228:	08003499 	.word	0x08003499
 800322c:	080035af 	.word	0x080035af
			  	  		  {
			  	  		  case 0:
			  	  			  if(Pos_Start > Pos_Target)
 8003230:	4b8e      	ldr	r3, [pc, #568]	@ (800346c <Trajectory+0x284>)
 8003232:	ed93 7a00 	vldr	s14, [r3]
 8003236:	4b8e      	ldr	r3, [pc, #568]	@ (8003470 <Trajectory+0x288>)
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003244:	dd04      	ble.n	8003250 <Trajectory+0x68>
			  	  			  {
			  	  				  direction = -1;
 8003246:	4b8b      	ldr	r3, [pc, #556]	@ (8003474 <Trajectory+0x28c>)
 8003248:	f04f 32ff 	mov.w	r2, #4294967295
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e002      	b.n	8003256 <Trajectory+0x6e>
			  	  			  }
			  	  			  else
			  	  			  {
			  	  				  direction = 1;
 8003250:	4b88      	ldr	r3, [pc, #544]	@ (8003474 <Trajectory+0x28c>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]
			  	  			  }
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)+((direction*0.5*Max_Acc)*(t*t));
 8003256:	4b88      	ldr	r3, [pc, #544]	@ (8003478 <Trajectory+0x290>)
 8003258:	ed93 7a00 	vldr	s14, [r3]
 800325c:	4b87      	ldr	r3, [pc, #540]	@ (800347c <Trajectory+0x294>)
 800325e:	edd3 7a00 	vldr	s15, [r3]
 8003262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003266:	4b81      	ldr	r3, [pc, #516]	@ (800346c <Trajectory+0x284>)
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003270:	ee17 0a90 	vmov	r0, s15
 8003274:	f7fd f934 	bl	80004e0 <__aeabi_f2d>
 8003278:	4680      	mov	r8, r0
 800327a:	4689      	mov	r9, r1
 800327c:	4b7d      	ldr	r3, [pc, #500]	@ (8003474 <Trajectory+0x28c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7fd f91b 	bl	80004bc <__aeabi_i2d>
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	4b7d      	ldr	r3, [pc, #500]	@ (8003480 <Trajectory+0x298>)
 800328c:	f7fd f980 	bl	8000590 <__aeabi_dmul>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4692      	mov	sl, r2
 8003296:	469b      	mov	fp, r3
 8003298:	4b7a      	ldr	r3, [pc, #488]	@ (8003484 <Trajectory+0x29c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f91f 	bl	80004e0 <__aeabi_f2d>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4650      	mov	r0, sl
 80032a8:	4659      	mov	r1, fp
 80032aa:	f7fd f971 	bl	8000590 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4692      	mov	sl, r2
 80032b4:	469b      	mov	fp, r3
 80032b6:	4b71      	ldr	r3, [pc, #452]	@ (800347c <Trajectory+0x294>)
 80032b8:	ed93 7a00 	vldr	s14, [r3]
 80032bc:	4b6f      	ldr	r3, [pc, #444]	@ (800347c <Trajectory+0x294>)
 80032be:	edd3 7a00 	vldr	s15, [r3]
 80032c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c6:	ee17 0a90 	vmov	r0, s15
 80032ca:	f7fd f909 	bl	80004e0 <__aeabi_f2d>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4650      	mov	r0, sl
 80032d4:	4659      	mov	r1, fp
 80032d6:	f7fd f95b 	bl	8000590 <__aeabi_dmul>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4640      	mov	r0, r8
 80032e0:	4649      	mov	r1, r9
 80032e2:	f7fc ff9f 	bl	8000224 <__adddf3>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	f7fd fc09 	bl	8000b04 <__aeabi_d2f>
 80032f2:	4603      	mov	r3, r0
 80032f4:	4a64      	ldr	r2, [pc, #400]	@ (8003488 <Trajectory+0x2a0>)
 80032f6:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start + direction*Max_Acc*t;
 80032f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003474 <Trajectory+0x28c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	ee07 3a90 	vmov	s15, r3
 8003300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003304:	4b5f      	ldr	r3, [pc, #380]	@ (8003484 <Trajectory+0x29c>)
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800330e:	4b5b      	ldr	r3, [pc, #364]	@ (800347c <Trajectory+0x294>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003318:	4b57      	ldr	r3, [pc, #348]	@ (8003478 <Trajectory+0x290>)
 800331a:	edd3 7a00 	vldr	s15, [r3]
 800331e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003322:	4b5a      	ldr	r3, [pc, #360]	@ (800348c <Trajectory+0x2a4>)
 8003324:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = Max_Acc*direction;
 8003328:	4b52      	ldr	r3, [pc, #328]	@ (8003474 <Trajectory+0x28c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	ee07 3a90 	vmov	s15, r3
 8003330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003334:	4b53      	ldr	r3, [pc, #332]	@ (8003484 <Trajectory+0x29c>)
 8003336:	edd3 7a00 	vldr	s15, [r3]
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	4b54      	ldr	r3, [pc, #336]	@ (8003490 <Trajectory+0x2a8>)
 8003340:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) >= Max_Velo)
 8003344:	4b51      	ldr	r3, [pc, #324]	@ (800348c <Trajectory+0x2a4>)
 8003346:	edd3 7a00 	vldr	s15, [r3]
 800334a:	eeb0 7ae7 	vabs.f32	s14, s15
 800334e:	4b51      	ldr	r3, [pc, #324]	@ (8003494 <Trajectory+0x2ac>)
 8003350:	edd3 7a00 	vldr	s15, [r3]
 8003354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335c:	db0e      	blt.n	800337c <Trajectory+0x194>
			  	  				{
			  	  					state_Tra = 1;
 800335e:	4b42      	ldr	r3, [pc, #264]	@ (8003468 <Trajectory+0x280>)
 8003360:	2201      	movs	r2, #1
 8003362:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 8003364:	4b48      	ldr	r3, [pc, #288]	@ (8003488 <Trajectory+0x2a0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a40      	ldr	r2, [pc, #256]	@ (800346c <Trajectory+0x284>)
 800336a:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 800336c:	4b47      	ldr	r3, [pc, #284]	@ (800348c <Trajectory+0x2a4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a41      	ldr	r2, [pc, #260]	@ (8003478 <Trajectory+0x290>)
 8003372:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 8003374:	4b41      	ldr	r3, [pc, #260]	@ (800347c <Trajectory+0x294>)
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
			  	  				}
			  	  			  if(fabs((q_Pos-Pos_Start)*2) >= fabs(Pos_Target-Pos_Start))
 800337c:	4b42      	ldr	r3, [pc, #264]	@ (8003488 <Trajectory+0x2a0>)
 800337e:	ed93 7a00 	vldr	s14, [r3]
 8003382:	4b3a      	ldr	r3, [pc, #232]	@ (800346c <Trajectory+0x284>)
 8003384:	edd3 7a00 	vldr	s15, [r3]
 8003388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800338c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003390:	eeb0 7ae7 	vabs.f32	s14, s15
 8003394:	4b36      	ldr	r3, [pc, #216]	@ (8003470 <Trajectory+0x288>)
 8003396:	edd3 6a00 	vldr	s13, [r3]
 800339a:	4b34      	ldr	r3, [pc, #208]	@ (800346c <Trajectory+0x284>)
 800339c:	edd3 7a00 	vldr	s15, [r3]
 80033a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033a4:	eef0 7ae7 	vabs.f32	s15, s15
 80033a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b0:	da00      	bge.n	80033b4 <Trajectory+0x1cc>
			  	  				state_Tra = 2;
								Pos_Start = q_Pos;
								Velo_Start = q_Velo;
								t = 0;
			  	  			  }
			  	  			  	break;
 80033b2:	e128      	b.n	8003606 <Trajectory+0x41e>
			  	  				state_Tra = 2;
 80033b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003468 <Trajectory+0x280>)
 80033b6:	2202      	movs	r2, #2
 80033b8:	601a      	str	r2, [r3, #0]
								Pos_Start = q_Pos;
 80033ba:	4b33      	ldr	r3, [pc, #204]	@ (8003488 <Trajectory+0x2a0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a2b      	ldr	r2, [pc, #172]	@ (800346c <Trajectory+0x284>)
 80033c0:	6013      	str	r3, [r2, #0]
								Velo_Start = q_Velo;
 80033c2:	4b32      	ldr	r3, [pc, #200]	@ (800348c <Trajectory+0x2a4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003478 <Trajectory+0x290>)
 80033c8:	6013      	str	r3, [r2, #0]
								t = 0;
 80033ca:	4b2c      	ldr	r3, [pc, #176]	@ (800347c <Trajectory+0x294>)
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 80033d2:	e118      	b.n	8003606 <Trajectory+0x41e>
			  	  		  case 1:
			  	  			  	q_Pos = Pos_Start +(Velo_Start*t);
 80033d4:	4b28      	ldr	r3, [pc, #160]	@ (8003478 <Trajectory+0x290>)
 80033d6:	ed93 7a00 	vldr	s14, [r3]
 80033da:	4b28      	ldr	r3, [pc, #160]	@ (800347c <Trajectory+0x294>)
 80033dc:	edd3 7a00 	vldr	s15, [r3]
 80033e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e4:	4b21      	ldr	r3, [pc, #132]	@ (800346c <Trajectory+0x284>)
 80033e6:	edd3 7a00 	vldr	s15, [r3]
 80033ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ee:	4b26      	ldr	r3, [pc, #152]	@ (8003488 <Trajectory+0x2a0>)
 80033f0:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Velo = Velo_Start;
 80033f4:	4b20      	ldr	r3, [pc, #128]	@ (8003478 <Trajectory+0x290>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a24      	ldr	r2, [pc, #144]	@ (800348c <Trajectory+0x2a4>)
 80033fa:	6013      	str	r3, [r2, #0]
			  	  			  	q_Acc = 0;
 80033fc:	4b24      	ldr	r3, [pc, #144]	@ (8003490 <Trajectory+0x2a8>)
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
			  	  			  if(fabs(Pos_Target-q_Pos) <= (q_Velo*q_Velo)/(2*Max_Acc))
 8003404:	4b1a      	ldr	r3, [pc, #104]	@ (8003470 <Trajectory+0x288>)
 8003406:	ed93 7a00 	vldr	s14, [r3]
 800340a:	4b1f      	ldr	r3, [pc, #124]	@ (8003488 <Trajectory+0x2a0>)
 800340c:	edd3 7a00 	vldr	s15, [r3]
 8003410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003414:	eeb0 7ae7 	vabs.f32	s14, s15
 8003418:	4b1c      	ldr	r3, [pc, #112]	@ (800348c <Trajectory+0x2a4>)
 800341a:	edd3 6a00 	vldr	s13, [r3]
 800341e:	4b1b      	ldr	r3, [pc, #108]	@ (800348c <Trajectory+0x2a4>)
 8003420:	edd3 7a00 	vldr	s15, [r3]
 8003424:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003428:	4b16      	ldr	r3, [pc, #88]	@ (8003484 <Trajectory+0x29c>)
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003432:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343e:	d900      	bls.n	8003442 <Trajectory+0x25a>
			  	  					state_Tra = 2;
			  	  					Pos_Start = q_Pos;
			  	  					Velo_Start = q_Velo;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 8003440:	e0e1      	b.n	8003606 <Trajectory+0x41e>
			  	  					state_Tra = 2;
 8003442:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <Trajectory+0x280>)
 8003444:	2202      	movs	r2, #2
 8003446:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 8003448:	4b0f      	ldr	r3, [pc, #60]	@ (8003488 <Trajectory+0x2a0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a07      	ldr	r2, [pc, #28]	@ (800346c <Trajectory+0x284>)
 800344e:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 8003450:	4b0e      	ldr	r3, [pc, #56]	@ (800348c <Trajectory+0x2a4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a08      	ldr	r2, [pc, #32]	@ (8003478 <Trajectory+0x290>)
 8003456:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 8003458:	4b08      	ldr	r3, [pc, #32]	@ (800347c <Trajectory+0x294>)
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 8003460:	e0d1      	b.n	8003606 <Trajectory+0x41e>
 8003462:	bf00      	nop
 8003464:	200013d0 	.word	0x200013d0
 8003468:	200012d8 	.word	0x200012d8
 800346c:	200012b8 	.word	0x200012b8
 8003470:	200012bc 	.word	0x200012bc
 8003474:	20000214 	.word	0x20000214
 8003478:	200012c4 	.word	0x200012c4
 800347c:	200012d4 	.word	0x200012d4
 8003480:	3fe00000 	.word	0x3fe00000
 8003484:	20000210 	.word	0x20000210
 8003488:	200012c8 	.word	0x200012c8
 800348c:	200012cc 	.word	0x200012cc
 8003490:	200012d0 	.word	0x200012d0
 8003494:	2000020c 	.word	0x2000020c
			  	  		  case 2:
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)-((direction*0.5*Max_Acc)*(t*t));
 8003498:	4b6f      	ldr	r3, [pc, #444]	@ (8003658 <Trajectory+0x470>)
 800349a:	ed93 7a00 	vldr	s14, [r3]
 800349e:	4b6f      	ldr	r3, [pc, #444]	@ (800365c <Trajectory+0x474>)
 80034a0:	edd3 7a00 	vldr	s15, [r3]
 80034a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034a8:	4b6d      	ldr	r3, [pc, #436]	@ (8003660 <Trajectory+0x478>)
 80034aa:	edd3 7a00 	vldr	s15, [r3]
 80034ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b2:	ee17 0a90 	vmov	r0, s15
 80034b6:	f7fd f813 	bl	80004e0 <__aeabi_f2d>
 80034ba:	4680      	mov	r8, r0
 80034bc:	4689      	mov	r9, r1
 80034be:	4b69      	ldr	r3, [pc, #420]	@ (8003664 <Trajectory+0x47c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fc fffa 	bl	80004bc <__aeabi_i2d>
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	4b66      	ldr	r3, [pc, #408]	@ (8003668 <Trajectory+0x480>)
 80034ce:	f7fd f85f 	bl	8000590 <__aeabi_dmul>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4692      	mov	sl, r2
 80034d8:	469b      	mov	fp, r3
 80034da:	4b64      	ldr	r3, [pc, #400]	@ (800366c <Trajectory+0x484>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fc fffe 	bl	80004e0 <__aeabi_f2d>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4650      	mov	r0, sl
 80034ea:	4659      	mov	r1, fp
 80034ec:	f7fd f850 	bl	8000590 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4692      	mov	sl, r2
 80034f6:	469b      	mov	fp, r3
 80034f8:	4b58      	ldr	r3, [pc, #352]	@ (800365c <Trajectory+0x474>)
 80034fa:	ed93 7a00 	vldr	s14, [r3]
 80034fe:	4b57      	ldr	r3, [pc, #348]	@ (800365c <Trajectory+0x474>)
 8003500:	edd3 7a00 	vldr	s15, [r3]
 8003504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003508:	ee17 0a90 	vmov	r0, s15
 800350c:	f7fc ffe8 	bl	80004e0 <__aeabi_f2d>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4650      	mov	r0, sl
 8003516:	4659      	mov	r1, fp
 8003518:	f7fd f83a 	bl	8000590 <__aeabi_dmul>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4640      	mov	r0, r8
 8003522:	4649      	mov	r1, r9
 8003524:	f7fc fe7c 	bl	8000220 <__aeabi_dsub>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	f7fd fae8 	bl	8000b04 <__aeabi_d2f>
 8003534:	4603      	mov	r3, r0
 8003536:	4a4e      	ldr	r2, [pc, #312]	@ (8003670 <Trajectory+0x488>)
 8003538:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start - direction*Max_Acc*t;
 800353a:	4b47      	ldr	r3, [pc, #284]	@ (8003658 <Trajectory+0x470>)
 800353c:	ed93 7a00 	vldr	s14, [r3]
 8003540:	4b48      	ldr	r3, [pc, #288]	@ (8003664 <Trajectory+0x47c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	ee07 3a90 	vmov	s15, r3
 8003548:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800354c:	4b47      	ldr	r3, [pc, #284]	@ (800366c <Trajectory+0x484>)
 800354e:	edd3 7a00 	vldr	s15, [r3]
 8003552:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003556:	4b41      	ldr	r3, [pc, #260]	@ (800365c <Trajectory+0x474>)
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003564:	4b43      	ldr	r3, [pc, #268]	@ (8003674 <Trajectory+0x48c>)
 8003566:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = -direction*Max_Acc;
 800356a:	4b3e      	ldr	r3, [pc, #248]	@ (8003664 <Trajectory+0x47c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	425b      	negs	r3, r3
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003578:	4b3c      	ldr	r3, [pc, #240]	@ (800366c <Trajectory+0x484>)
 800357a:	edd3 7a00 	vldr	s15, [r3]
 800357e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003582:	4b3d      	ldr	r3, [pc, #244]	@ (8003678 <Trajectory+0x490>)
 8003584:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) <= 0)
 8003588:	4b3a      	ldr	r3, [pc, #232]	@ (8003674 <Trajectory+0x48c>)
 800358a:	edd3 7a00 	vldr	s15, [r3]
 800358e:	eef0 7ae7 	vabs.f32	s15, s15
 8003592:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359a:	d900      	bls.n	800359e <Trajectory+0x3b6>
			  	  				{
			  	  					state_Tra = 3;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 800359c:	e033      	b.n	8003606 <Trajectory+0x41e>
			  	  					state_Tra = 3;
 800359e:	4b37      	ldr	r3, [pc, #220]	@ (800367c <Trajectory+0x494>)
 80035a0:	2203      	movs	r2, #3
 80035a2:	601a      	str	r2, [r3, #0]
			  	  					t = 0;
 80035a4:	4b2d      	ldr	r3, [pc, #180]	@ (800365c <Trajectory+0x474>)
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 80035ac:	e02b      	b.n	8003606 <Trajectory+0x41e>
			  	  		  case 3:
			  	  			  	if (FirstTraject == 1)
 80035ae:	4b34      	ldr	r3, [pc, #208]	@ (8003680 <Trajectory+0x498>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d106      	bne.n	80035c4 <Trajectory+0x3dc>
			  	  			  	{
			  	  			  	Old_Target = Pos_Target;
 80035b6:	4b33      	ldr	r3, [pc, #204]	@ (8003684 <Trajectory+0x49c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a33      	ldr	r2, [pc, #204]	@ (8003688 <Trajectory+0x4a0>)
 80035bc:	6013      	str	r3, [r2, #0]
			  	  			  	FirstTraject = 0;
 80035be:	4b30      	ldr	r3, [pc, #192]	@ (8003680 <Trajectory+0x498>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
			  	  			  	}
			  	  			  	if(Pos_Target != Old_Target)
 80035c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003684 <Trajectory+0x49c>)
 80035c6:	ed93 7a00 	vldr	s14, [r3]
 80035ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003688 <Trajectory+0x4a0>)
 80035cc:	edd3 7a00 	vldr	s15, [r3]
 80035d0:	eeb4 7a67 	vcmp.f32	s14, s15
 80035d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d8:	d014      	beq.n	8003604 <Trajectory+0x41c>
			  	  			  	{
			  	  			  		state_Tra = 0;
 80035da:	4b28      	ldr	r3, [pc, #160]	@ (800367c <Trajectory+0x494>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
			  	  			  		t = 0;
 80035e0:	4b1e      	ldr	r3, [pc, #120]	@ (800365c <Trajectory+0x474>)
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
			  	  			  		Pos_Start = Pos;
 80035e8:	4b28      	ldr	r3, [pc, #160]	@ (800368c <Trajectory+0x4a4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003660 <Trajectory+0x478>)
 80035ee:	6013      	str	r3, [r2, #0]
//			  	  			  		Pos_Start = q_Pos;
			  	  			  		Velo_Start = q_Velo;
 80035f0:	4b20      	ldr	r3, [pc, #128]	@ (8003674 <Trajectory+0x48c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a18      	ldr	r2, [pc, #96]	@ (8003658 <Trajectory+0x470>)
 80035f6:	6013      	str	r3, [r2, #0]
			  	  			  		Old_Target = Pos_Target;
 80035f8:	4b22      	ldr	r3, [pc, #136]	@ (8003684 <Trajectory+0x49c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a22      	ldr	r2, [pc, #136]	@ (8003688 <Trajectory+0x4a0>)
 80035fe:	6013      	str	r3, [r2, #0]
			  	  			  		PIDreset();
 8003600:	f7ff fbfc 	bl	8002dfc <PIDreset>

			  	  			  	}
			  	  			  	break;
 8003604:	bf00      	nop
			  	  		  }
		  t = t+0.0001;
 8003606:	4b15      	ldr	r3, [pc, #84]	@ (800365c <Trajectory+0x474>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fc ff68 	bl	80004e0 <__aeabi_f2d>
 8003610:	a30f      	add	r3, pc, #60	@ (adr r3, 8003650 <Trajectory+0x468>)
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	f7fc fe05 	bl	8000224 <__adddf3>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	f7fd fa6f 	bl	8000b04 <__aeabi_d2f>
 8003626:	4603      	mov	r3, r0
 8003628:	4a0c      	ldr	r2, [pc, #48]	@ (800365c <Trajectory+0x474>)
 800362a:	6013      	str	r3, [r2, #0]
		  timestamp_Traject = currentTime + 100;
 800362c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003630:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 8003634:	f143 0500 	adc.w	r5, r3, #0
 8003638:	4622      	mov	r2, r4
 800363a:	462b      	mov	r3, r5
 800363c:	4914      	ldr	r1, [pc, #80]	@ (8003690 <Trajectory+0x4a8>)
 800363e:	e9c1 2300 	strd	r2, r3, [r1]
		  }
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800364c:	f3af 8000 	nop.w
 8003650:	eb1c432d 	.word	0xeb1c432d
 8003654:	3f1a36e2 	.word	0x3f1a36e2
 8003658:	200012c4 	.word	0x200012c4
 800365c:	200012d4 	.word	0x200012d4
 8003660:	200012b8 	.word	0x200012b8
 8003664:	20000214 	.word	0x20000214
 8003668:	3fe00000 	.word	0x3fe00000
 800366c:	20000210 	.word	0x20000210
 8003670:	200012c8 	.word	0x200012c8
 8003674:	200012cc 	.word	0x200012cc
 8003678:	200012d0 	.word	0x200012d0
 800367c:	200012d8 	.word	0x200012d8
 8003680:	20000208 	.word	0x20000208
 8003684:	200012bc 	.word	0x200012bc
 8003688:	200012c0 	.word	0x200012c0
 800368c:	20001354 	.word	0x20001354
 8003690:	200013d0 	.word	0x200013d0

08003694 <PIDposition>:

void PIDposition()
{
 8003694:	b5b0      	push	{r4, r5, r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
	static uint64_t timestamp3 =0;
	int64_t currentTime = micros();
 800369a:	f000 fcdf 	bl	800405c <micros>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	e9c7 2300 	strd	r2, r3, [r7]
	if(currentTime > timestamp3)
 80036a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036aa:	499c      	ldr	r1, [pc, #624]	@ (800391c <PIDposition+0x288>)
 80036ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036b0:	4290      	cmp	r0, r2
 80036b2:	eb71 0303 	sbcs.w	r3, r1, r3
 80036b6:	f080 8102 	bcs.w	80038be <PIDposition+0x22a>
	  {
			Poscontrol.Error[NEW] = q_Pos-Pos;
 80036ba:	4b99      	ldr	r3, [pc, #612]	@ (8003920 <PIDposition+0x28c>)
 80036bc:	ed93 7a00 	vldr	s14, [r3]
 80036c0:	4b98      	ldr	r3, [pc, #608]	@ (8003924 <PIDposition+0x290>)
 80036c2:	edd3 7a00 	vldr	s15, [r3]
 80036c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ca:	4b97      	ldr	r3, [pc, #604]	@ (8003928 <PIDposition+0x294>)
 80036cc:	edc3 7a03 	vstr	s15, [r3, #12]
			Poscontrol.Output[NEW] = ((((Poscontrol.kp*Poscontrol.T)+(Poscontrol.ki*Poscontrol.T*Poscontrol.T)+(Poscontrol.kd))*Poscontrol.Error[NEW])-(((Poscontrol.kp*Poscontrol.T)+(Poscontrol.kd))*Poscontrol.Error[OLD])+(Poscontrol.kd*Poscontrol.Error[OLDER])+(Poscontrol.Output[OLD]*Poscontrol.T))/Poscontrol.T;
 80036d0:	4b95      	ldr	r3, [pc, #596]	@ (8003928 <PIDposition+0x294>)
 80036d2:	ed93 7a06 	vldr	s14, [r3, #24]
 80036d6:	4b94      	ldr	r3, [pc, #592]	@ (8003928 <PIDposition+0x294>)
 80036d8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80036dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036e0:	4b91      	ldr	r3, [pc, #580]	@ (8003928 <PIDposition+0x294>)
 80036e2:	edd3 6a07 	vldr	s13, [r3, #28]
 80036e6:	4b90      	ldr	r3, [pc, #576]	@ (8003928 <PIDposition+0x294>)
 80036e8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80036ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80036f0:	4b8d      	ldr	r3, [pc, #564]	@ (8003928 <PIDposition+0x294>)
 80036f2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80036f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036fe:	4b8a      	ldr	r3, [pc, #552]	@ (8003928 <PIDposition+0x294>)
 8003700:	edd3 7a08 	vldr	s15, [r3, #32]
 8003704:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003708:	4b87      	ldr	r3, [pc, #540]	@ (8003928 <PIDposition+0x294>)
 800370a:	edd3 7a03 	vldr	s15, [r3, #12]
 800370e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003712:	4b85      	ldr	r3, [pc, #532]	@ (8003928 <PIDposition+0x294>)
 8003714:	edd3 6a06 	vldr	s13, [r3, #24]
 8003718:	4b83      	ldr	r3, [pc, #524]	@ (8003928 <PIDposition+0x294>)
 800371a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800371e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003722:	4b81      	ldr	r3, [pc, #516]	@ (8003928 <PIDposition+0x294>)
 8003724:	edd3 7a08 	vldr	s15, [r3, #32]
 8003728:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800372c:	4b7e      	ldr	r3, [pc, #504]	@ (8003928 <PIDposition+0x294>)
 800372e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003736:	ee37 7a67 	vsub.f32	s14, s14, s15
 800373a:	4b7b      	ldr	r3, [pc, #492]	@ (8003928 <PIDposition+0x294>)
 800373c:	edd3 6a08 	vldr	s13, [r3, #32]
 8003740:	4b79      	ldr	r3, [pc, #484]	@ (8003928 <PIDposition+0x294>)
 8003742:	edd3 7a05 	vldr	s15, [r3, #20]
 8003746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800374a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800374e:	4b76      	ldr	r3, [pc, #472]	@ (8003928 <PIDposition+0x294>)
 8003750:	edd3 6a01 	vldr	s13, [r3, #4]
 8003754:	4b74      	ldr	r3, [pc, #464]	@ (8003928 <PIDposition+0x294>)
 8003756:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800375a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800375e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003762:	4b71      	ldr	r3, [pc, #452]	@ (8003928 <PIDposition+0x294>)
 8003764:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800376c:	4b6e      	ldr	r3, [pc, #440]	@ (8003928 <PIDposition+0x294>)
 800376e:	edc3 7a00 	vstr	s15, [r3]
			Poscontrol.Error[OLDER] = Poscontrol.Error[OLD];
 8003772:	4b6d      	ldr	r3, [pc, #436]	@ (8003928 <PIDposition+0x294>)
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	4a6c      	ldr	r2, [pc, #432]	@ (8003928 <PIDposition+0x294>)
 8003778:	6153      	str	r3, [r2, #20]
			Poscontrol.Error[OLD] = Poscontrol.Error[NEW];
 800377a:	4b6b      	ldr	r3, [pc, #428]	@ (8003928 <PIDposition+0x294>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	4a6a      	ldr	r2, [pc, #424]	@ (8003928 <PIDposition+0x294>)
 8003780:	6113      	str	r3, [r2, #16]
			Poscontrol.Output[OLDER] = Poscontrol.Output[OLD];
 8003782:	4b69      	ldr	r3, [pc, #420]	@ (8003928 <PIDposition+0x294>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4a68      	ldr	r2, [pc, #416]	@ (8003928 <PIDposition+0x294>)
 8003788:	6093      	str	r3, [r2, #8]
			Poscontrol.Output[OLD] = Poscontrol.Output[NEW];
 800378a:	4b67      	ldr	r3, [pc, #412]	@ (8003928 <PIDposition+0x294>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a66      	ldr	r2, [pc, #408]	@ (8003928 <PIDposition+0x294>)
 8003790:	6053      	str	r3, [r2, #4]

			Velocontrol.Error[NEW] = Poscontrol.Output[NEW]+q_Velo-speed_fill;
 8003792:	4b65      	ldr	r3, [pc, #404]	@ (8003928 <PIDposition+0x294>)
 8003794:	ed93 7a00 	vldr	s14, [r3]
 8003798:	4b64      	ldr	r3, [pc, #400]	@ (800392c <PIDposition+0x298>)
 800379a:	edd3 7a00 	vldr	s15, [r3]
 800379e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037a2:	4b63      	ldr	r3, [pc, #396]	@ (8003930 <PIDposition+0x29c>)
 80037a4:	edd3 7a00 	vldr	s15, [r3]
 80037a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ac:	4b61      	ldr	r3, [pc, #388]	@ (8003934 <PIDposition+0x2a0>)
 80037ae:	edc3 7a03 	vstr	s15, [r3, #12]
			Velocontrol.Output[NEW] = ((((Velocontrol.kp*Velocontrol.T)+(Velocontrol.ki*Velocontrol.T*Velocontrol.T)+(Velocontrol.kd))*Velocontrol.Error[NEW])-(((Velocontrol.kp*Velocontrol.T)+(Velocontrol.kd))*Velocontrol.Error[OLD])+(Velocontrol.kd*Velocontrol.Error[OLDER])+(Velocontrol.Output[OLD]*Velocontrol.T))/Velocontrol.T;
 80037b2:	4b60      	ldr	r3, [pc, #384]	@ (8003934 <PIDposition+0x2a0>)
 80037b4:	ed93 7a06 	vldr	s14, [r3, #24]
 80037b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003934 <PIDposition+0x2a0>)
 80037ba:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80037be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003934 <PIDposition+0x2a0>)
 80037c4:	edd3 6a07 	vldr	s13, [r3, #28]
 80037c8:	4b5a      	ldr	r3, [pc, #360]	@ (8003934 <PIDposition+0x2a0>)
 80037ca:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80037ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037d2:	4b58      	ldr	r3, [pc, #352]	@ (8003934 <PIDposition+0x2a0>)
 80037d4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80037d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037e0:	4b54      	ldr	r3, [pc, #336]	@ (8003934 <PIDposition+0x2a0>)
 80037e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80037e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037ea:	4b52      	ldr	r3, [pc, #328]	@ (8003934 <PIDposition+0x2a0>)
 80037ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80037f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003934 <PIDposition+0x2a0>)
 80037f6:	edd3 6a06 	vldr	s13, [r3, #24]
 80037fa:	4b4e      	ldr	r3, [pc, #312]	@ (8003934 <PIDposition+0x2a0>)
 80037fc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003800:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003804:	4b4b      	ldr	r3, [pc, #300]	@ (8003934 <PIDposition+0x2a0>)
 8003806:	edd3 7a08 	vldr	s15, [r3, #32]
 800380a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800380e:	4b49      	ldr	r3, [pc, #292]	@ (8003934 <PIDposition+0x2a0>)
 8003810:	edd3 7a04 	vldr	s15, [r3, #16]
 8003814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003818:	ee37 7a67 	vsub.f32	s14, s14, s15
 800381c:	4b45      	ldr	r3, [pc, #276]	@ (8003934 <PIDposition+0x2a0>)
 800381e:	edd3 6a08 	vldr	s13, [r3, #32]
 8003822:	4b44      	ldr	r3, [pc, #272]	@ (8003934 <PIDposition+0x2a0>)
 8003824:	edd3 7a05 	vldr	s15, [r3, #20]
 8003828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800382c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003830:	4b40      	ldr	r3, [pc, #256]	@ (8003934 <PIDposition+0x2a0>)
 8003832:	edd3 6a01 	vldr	s13, [r3, #4]
 8003836:	4b3f      	ldr	r3, [pc, #252]	@ (8003934 <PIDposition+0x2a0>)
 8003838:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800383c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003840:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003844:	4b3b      	ldr	r3, [pc, #236]	@ (8003934 <PIDposition+0x2a0>)
 8003846:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800384a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800384e:	4b39      	ldr	r3, [pc, #228]	@ (8003934 <PIDposition+0x2a0>)
 8003850:	edc3 7a00 	vstr	s15, [r3]
			if(Velocontrol.Output[NEW]>42500)Velocontrol.Output[NEW]=42500;
 8003854:	4b37      	ldr	r3, [pc, #220]	@ (8003934 <PIDposition+0x2a0>)
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8003938 <PIDposition+0x2a4>
 800385e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003866:	dd02      	ble.n	800386e <PIDposition+0x1da>
 8003868:	4b32      	ldr	r3, [pc, #200]	@ (8003934 <PIDposition+0x2a0>)
 800386a:	4a34      	ldr	r2, [pc, #208]	@ (800393c <PIDposition+0x2a8>)
 800386c:	601a      	str	r2, [r3, #0]
			if(Velocontrol.Output[NEW]<-42500)Velocontrol.Output[NEW]=-42500;
 800386e:	4b31      	ldr	r3, [pc, #196]	@ (8003934 <PIDposition+0x2a0>)
 8003870:	edd3 7a00 	vldr	s15, [r3]
 8003874:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003940 <PIDposition+0x2ac>
 8003878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800387c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003880:	d502      	bpl.n	8003888 <PIDposition+0x1f4>
 8003882:	4b2c      	ldr	r3, [pc, #176]	@ (8003934 <PIDposition+0x2a0>)
 8003884:	4a2f      	ldr	r2, [pc, #188]	@ (8003944 <PIDposition+0x2b0>)
 8003886:	601a      	str	r2, [r3, #0]
			Velocontrol.Error[OLDER] = Velocontrol.Error[OLD];
 8003888:	4b2a      	ldr	r3, [pc, #168]	@ (8003934 <PIDposition+0x2a0>)
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	4a29      	ldr	r2, [pc, #164]	@ (8003934 <PIDposition+0x2a0>)
 800388e:	6153      	str	r3, [r2, #20]
			Velocontrol.Error[OLD] = Velocontrol.Error[NEW];
 8003890:	4b28      	ldr	r3, [pc, #160]	@ (8003934 <PIDposition+0x2a0>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4a27      	ldr	r2, [pc, #156]	@ (8003934 <PIDposition+0x2a0>)
 8003896:	6113      	str	r3, [r2, #16]
			Velocontrol.Output[OLDER] = Velocontrol.Output[OLD];
 8003898:	4b26      	ldr	r3, [pc, #152]	@ (8003934 <PIDposition+0x2a0>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4a25      	ldr	r2, [pc, #148]	@ (8003934 <PIDposition+0x2a0>)
 800389e:	6093      	str	r3, [r2, #8]
			Velocontrol.Output[OLD] = Velocontrol.Output[NEW];
 80038a0:	4b24      	ldr	r3, [pc, #144]	@ (8003934 <PIDposition+0x2a0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a23      	ldr	r2, [pc, #140]	@ (8003934 <PIDposition+0x2a0>)
 80038a6:	6053      	str	r3, [r2, #4]
	//					if(fabs(Pos_Target-Pos) <= 0.1)start = 0;
			timestamp3 =currentTime + 100;
 80038a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ac:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 80038b0:	f143 0500 	adc.w	r5, r3, #0
 80038b4:	4622      	mov	r2, r4
 80038b6:	462b      	mov	r3, r5
 80038b8:	4918      	ldr	r1, [pc, #96]	@ (800391c <PIDposition+0x288>)
 80038ba:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  if(Velocontrol.Output[NEW] > 0)
 80038be:	4b1d      	ldr	r3, [pc, #116]	@ (8003934 <PIDposition+0x2a0>)
 80038c0:	edd3 7a00 	vldr	s15, [r3]
 80038c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038cc:	dd10      	ble.n	80038f0 <PIDposition+0x25c>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80038ce:	2200      	movs	r2, #0
 80038d0:	2101      	movs	r1, #1
 80038d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038d6:	f003 fa4d 	bl	8006d74 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Velocontrol.Output[NEW]);
 80038da:	4b16      	ldr	r3, [pc, #88]	@ (8003934 <PIDposition+0x2a0>)
 80038dc:	edd3 7a00 	vldr	s15, [r3]
 80038e0:	4b19      	ldr	r3, [pc, #100]	@ (8003948 <PIDposition+0x2b4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038e8:	ee17 2a90 	vmov	r2, s15
 80038ec:	635a      	str	r2, [r3, #52]	@ 0x34
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(Velocontrol.Output[NEW]));
	  }
}
 80038ee:	e011      	b.n	8003914 <PIDposition+0x280>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80038f0:	2201      	movs	r2, #1
 80038f2:	2101      	movs	r1, #1
 80038f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038f8:	f003 fa3c 	bl	8006d74 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(Velocontrol.Output[NEW]));
 80038fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003934 <PIDposition+0x2a0>)
 80038fe:	edd3 7a00 	vldr	s15, [r3]
 8003902:	eef0 7ae7 	vabs.f32	s15, s15
 8003906:	4b10      	ldr	r3, [pc, #64]	@ (8003948 <PIDposition+0x2b4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800390e:	ee17 2a90 	vmov	r2, s15
 8003912:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bdb0      	pop	{r4, r5, r7, pc}
 800391c:	200013d8 	.word	0x200013d8
 8003920:	200012c8 	.word	0x200012c8
 8003924:	20001354 	.word	0x20001354
 8003928:	20001240 	.word	0x20001240
 800392c:	200012cc 	.word	0x200012cc
 8003930:	2000134c 	.word	0x2000134c
 8003934:	20001218 	.word	0x20001218
 8003938:	47260400 	.word	0x47260400
 800393c:	47260400 	.word	0x47260400
 8003940:	c7260400 	.word	0xc7260400
 8003944:	c7260400 	.word	0xc7260400
 8003948:	20000578 	.word	0x20000578

0800394c <State_To_Mode>:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(Velocontrol2.Output[NEW]));
	  }
}

void State_To_Mode(){
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
        if(registerFrame[0x01].U16 == 0b0001){
 8003950:	4b42      	ldr	r3, [pc, #264]	@ (8003a5c <State_To_Mode+0x110>)
 8003952:	885b      	ldrh	r3, [r3, #2]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d115      	bne.n	8003984 <State_To_Mode+0x38>
        	registerFrame[0x01].U16 = 0b0000;
 8003958:	4b40      	ldr	r3, [pc, #256]	@ (8003a5c <State_To_Mode+0x110>)
 800395a:	2200      	movs	r2, #0
 800395c:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b0001;
 800395e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a5c <State_To_Mode+0x110>)
 8003960:	2201      	movs	r2, #1
 8003962:	841a      	strh	r2, [r3, #32]
        	Mode = 1;
 8003964:	4b3e      	ldr	r3, [pc, #248]	@ (8003a60 <State_To_Mode+0x114>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]
        	state_ALL = 4;
 800396a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a64 <State_To_Mode+0x118>)
 800396c:	2204      	movs	r2, #4
 800396e:	601a      	str	r2, [r3, #0]
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 8003970:	2200      	movs	r2, #0
 8003972:	2108      	movs	r1, #8
 8003974:	483c      	ldr	r0, [pc, #240]	@ (8003a68 <State_To_Mode+0x11c>)
 8003976:	f003 f9fd 	bl	8006d74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 800397a:	2201      	movs	r2, #1
 800397c:	2104      	movs	r1, #4
 800397e:	483a      	ldr	r0, [pc, #232]	@ (8003a68 <State_To_Mode+0x11c>)
 8003980:	f003 f9f8 	bl	8006d74 <HAL_GPIO_WritePin>
        }
        if(registerFrame[0x01].U16 == 0b0010){
 8003984:	4b35      	ldr	r3, [pc, #212]	@ (8003a5c <State_To_Mode+0x110>)
 8003986:	885b      	ldrh	r3, [r3, #2]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d10f      	bne.n	80039ac <State_To_Mode+0x60>
//            Mode = 2;
        	Mode = 1;
 800398c:	4b34      	ldr	r3, [pc, #208]	@ (8003a60 <State_To_Mode+0x114>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]
            state_ALL = 0;
 8003992:	4b34      	ldr	r3, [pc, #208]	@ (8003a64 <State_To_Mode+0x118>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 8003998:	2200      	movs	r2, #0
 800399a:	2108      	movs	r1, #8
 800399c:	4832      	ldr	r0, [pc, #200]	@ (8003a68 <State_To_Mode+0x11c>)
 800399e:	f003 f9e9 	bl	8006d74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 80039a2:	2201      	movs	r2, #1
 80039a4:	2104      	movs	r1, #4
 80039a6:	4830      	ldr	r0, [pc, #192]	@ (8003a68 <State_To_Mode+0x11c>)
 80039a8:	f003 f9e4 	bl	8006d74 <HAL_GPIO_WritePin>
        }
        if(registerFrame[0x01].U16 == 0b0100){
 80039ac:	4b2b      	ldr	r3, [pc, #172]	@ (8003a5c <State_To_Mode+0x110>)
 80039ae:	885b      	ldrh	r3, [r3, #2]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d120      	bne.n	80039f6 <State_To_Mode+0xaa>
//            Mode = 3;
        	Mode = 1;
 80039b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a60 <State_To_Mode+0x114>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
        	registerFrame[0x01].U16 = 0b0000;
 80039ba:	4b28      	ldr	r3, [pc, #160]	@ (8003a5c <State_To_Mode+0x110>)
 80039bc:	2200      	movs	r2, #0
 80039be:	805a      	strh	r2, [r3, #2]
			splitInteger(registerFrame[0x21].U16, Pick_Order);
 80039c0:	4b26      	ldr	r3, [pc, #152]	@ (8003a5c <State_To_Mode+0x110>)
 80039c2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80039c6:	4929      	ldr	r1, [pc, #164]	@ (8003a6c <State_To_Mode+0x120>)
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fa61 	bl	8003e90 <splitInteger>
			splitInteger(registerFrame[0x22].U16, Place_Order);
 80039ce:	4b23      	ldr	r3, [pc, #140]	@ (8003a5c <State_To_Mode+0x110>)
 80039d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039d4:	4926      	ldr	r1, [pc, #152]	@ (8003a70 <State_To_Mode+0x124>)
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fa5a 	bl	8003e90 <splitInteger>
			state_ALL = 5;
 80039dc:	4b21      	ldr	r3, [pc, #132]	@ (8003a64 <State_To_Mode+0x118>)
 80039de:	2205      	movs	r2, #5
 80039e0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 80039e2:	2200      	movs	r2, #0
 80039e4:	2108      	movs	r1, #8
 80039e6:	4820      	ldr	r0, [pc, #128]	@ (8003a68 <State_To_Mode+0x11c>)
 80039e8:	f003 f9c4 	bl	8006d74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 80039ec:	2201      	movs	r2, #1
 80039ee:	2104      	movs	r1, #4
 80039f0:	481d      	ldr	r0, [pc, #116]	@ (8003a68 <State_To_Mode+0x11c>)
 80039f2:	f003 f9bf 	bl	8006d74 <HAL_GPIO_WritePin>
        }
        if(registerFrame[0x01].U16 == 0b1000){
 80039f6:	4b19      	ldr	r3, [pc, #100]	@ (8003a5c <State_To_Mode+0x110>)
 80039f8:	885b      	ldrh	r3, [r3, #2]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d12c      	bne.n	8003a58 <State_To_Mode+0x10c>
//          Point Mode
        	Mode = 1;
 80039fe:	4b18      	ldr	r3, [pc, #96]	@ (8003a60 <State_To_Mode+0x114>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
        	registerFrame[0x01].U16 = 0b0000;
 8003a04:	4b15      	ldr	r3, [pc, #84]	@ (8003a5c <State_To_Mode+0x110>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b00010000;
 8003a0a:	4b14      	ldr	r3, [pc, #80]	@ (8003a5c <State_To_Mode+0x110>)
 8003a0c:	2210      	movs	r2, #16
 8003a0e:	841a      	strh	r2, [r3, #32]
			Goal_Point = registerFrame[0x30].U16/10;
 8003a10:	4b12      	ldr	r3, [pc, #72]	@ (8003a5c <State_To_Mode+0x110>)
 8003a12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003a16:	4a17      	ldr	r2, [pc, #92]	@ (8003a74 <State_To_Mode+0x128>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	08db      	lsrs	r3, r3, #3
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	4b15      	ldr	r3, [pc, #84]	@ (8003a78 <State_To_Mode+0x12c>)
 8003a24:	601a      	str	r2, [r3, #0]
			Pos_Target = Goal_Point;
 8003a26:	4b14      	ldr	r3, [pc, #80]	@ (8003a78 <State_To_Mode+0x12c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a32:	4b12      	ldr	r3, [pc, #72]	@ (8003a7c <State_To_Mode+0x130>)
 8003a34:	edc3 7a00 	vstr	s15, [r3]
			state_ALL = 3;
 8003a38:	4b0a      	ldr	r3, [pc, #40]	@ (8003a64 <State_To_Mode+0x118>)
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	601a      	str	r2, [r3, #0]
			state_ALL_Old = 2;
 8003a3e:	4b10      	ldr	r3, [pc, #64]	@ (8003a80 <State_To_Mode+0x134>)
 8003a40:	2202      	movs	r2, #2
 8003a42:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 8003a44:	2200      	movs	r2, #0
 8003a46:	2108      	movs	r1, #8
 8003a48:	4807      	ldr	r0, [pc, #28]	@ (8003a68 <State_To_Mode+0x11c>)
 8003a4a:	f003 f993 	bl	8006d74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 8003a4e:	2201      	movs	r2, #1
 8003a50:	2104      	movs	r1, #4
 8003a52:	4805      	ldr	r0, [pc, #20]	@ (8003a68 <State_To_Mode+0x11c>)
 8003a54:	f003 f98e 	bl	8006d74 <HAL_GPIO_WritePin>
        }
}
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000fd8 	.word	0x20000fd8
 8003a60:	2000116c 	.word	0x2000116c
 8003a64:	20000204 	.word	0x20000204
 8003a68:	48000800 	.word	0x48000800
 8003a6c:	2000117c 	.word	0x2000117c
 8003a70:	20001190 	.word	0x20001190
 8003a74:	cccccccd 	.word	0xcccccccd
 8003a78:	20001178 	.word	0x20001178
 8003a7c:	200012bc 	.word	0x200012bc
 8003a80:	200011b0 	.word	0x200011b0

08003a84 <Heartbeat>:

void Heartbeat(){
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
        registerFrame[0x00].U16 =22881;
 8003a88:	4b04      	ldr	r3, [pc, #16]	@ (8003a9c <Heartbeat+0x18>)
 8003a8a:	f645 1261 	movw	r2, #22881	@ 0x5961
 8003a8e:	801a      	strh	r2, [r3, #0]
    }
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20000fd8 	.word	0x20000fd8

08003aa0 <Routine>:

void Routine () {
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
        if (registerFrame[0x00].U16 == 18537){
 8003aa4:	4b08      	ldr	r3, [pc, #32]	@ (8003ac8 <Routine+0x28>)
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	f644 0269 	movw	r2, #18537	@ 0x4869
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d105      	bne.n	8003abc <Routine+0x1c>
//            registerFrame[0x04].U16 = Gripper_Movement_Actual_Status;
            registerFrame[0x10].U16 = 0b0001;
 8003ab0:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <Routine+0x28>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	841a      	strh	r2, [r3, #32]
            registerFrame[0x10].U16 = 0b0000;
 8003ab6:	4b04      	ldr	r3, [pc, #16]	@ (8003ac8 <Routine+0x28>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	841a      	strh	r2, [r3, #32]
        }
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000fd8 	.word	0x20000fd8

08003acc <UpdatePosRoutine>:
void UpdatePosRoutine()
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
	if(LeadSW[0] == 0)
 8003ad0:	4b30      	ldr	r3, [pc, #192]	@ (8003b94 <UpdatePosRoutine+0xc8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d103      	bne.n	8003ae0 <UpdatePosRoutine+0x14>
	{
		registerFrame[0x04].U16 = 0b0001;
 8003ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8003b98 <UpdatePosRoutine+0xcc>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	811a      	strh	r2, [r3, #8]
 8003ade:	e00a      	b.n	8003af6 <UpdatePosRoutine+0x2a>
	}
	else if(LeadSW[1] == 0)
 8003ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b94 <UpdatePosRoutine+0xc8>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d103      	bne.n	8003af0 <UpdatePosRoutine+0x24>
	{
		registerFrame[0x04].U16 = 0b0010;
 8003ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b98 <UpdatePosRoutine+0xcc>)
 8003aea:	2202      	movs	r2, #2
 8003aec:	811a      	strh	r2, [r3, #8]
 8003aee:	e002      	b.n	8003af6 <UpdatePosRoutine+0x2a>
	}
	else
	{
		registerFrame[0x04].U16 = 0b0000;
 8003af0:	4b29      	ldr	r3, [pc, #164]	@ (8003b98 <UpdatePosRoutine+0xcc>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	811a      	strh	r2, [r3, #8]
	}
	registerFrame[0x11].U16 = fabs(Pos)*10;
 8003af6:	4b29      	ldr	r3, [pc, #164]	@ (8003b9c <UpdatePosRoutine+0xd0>)
 8003af8:	edd3 7a00 	vldr	s15, [r3]
 8003afc:	eef0 7ae7 	vabs.f32	s15, s15
 8003b00:	ee17 0a90 	vmov	r0, s15
 8003b04:	f7fc fcec 	bl	80004e0 <__aeabi_f2d>
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	4b24      	ldr	r3, [pc, #144]	@ (8003ba0 <UpdatePosRoutine+0xd4>)
 8003b0e:	f7fc fd3f 	bl	8000590 <__aeabi_dmul>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4610      	mov	r0, r2
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f7fc ffd3 	bl	8000ac4 <__aeabi_d2uiz>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	4b1d      	ldr	r3, [pc, #116]	@ (8003b98 <UpdatePosRoutine+0xcc>)
 8003b24:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[0x12].U16 = fabs(speed_fill)*10;
 8003b26:	4b1f      	ldr	r3, [pc, #124]	@ (8003ba4 <UpdatePosRoutine+0xd8>)
 8003b28:	edd3 7a00 	vldr	s15, [r3]
 8003b2c:	eef0 7ae7 	vabs.f32	s15, s15
 8003b30:	ee17 0a90 	vmov	r0, s15
 8003b34:	f7fc fcd4 	bl	80004e0 <__aeabi_f2d>
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	4b18      	ldr	r3, [pc, #96]	@ (8003ba0 <UpdatePosRoutine+0xd4>)
 8003b3e:	f7fc fd27 	bl	8000590 <__aeabi_dmul>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4610      	mov	r0, r2
 8003b48:	4619      	mov	r1, r3
 8003b4a:	f7fc ffbb 	bl	8000ac4 <__aeabi_d2uiz>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <UpdatePosRoutine+0xcc>)
 8003b54:	849a      	strh	r2, [r3, #36]	@ 0x24
	registerFrame[0x13].U16 = Accelation*10;
 8003b56:	4b14      	ldr	r3, [pc, #80]	@ (8003ba8 <UpdatePosRoutine+0xdc>)
 8003b58:	edd3 7a00 	vldr	s15, [r3]
 8003b5c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003b60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b68:	ee17 3a90 	vmov	r3, s15
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <UpdatePosRoutine+0xcc>)
 8003b70:	84da      	strh	r2, [r3, #38]	@ 0x26
	registerFrame[0x40].U16 = X_Actual_Position*10;
 8003b72:	4b0e      	ldr	r3, [pc, #56]	@ (8003bac <UpdatePosRoutine+0xe0>)
 8003b74:	edd3 7a00 	vldr	s15, [r3]
 8003b78:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b84:	ee17 3a90 	vmov	r3, s15
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	4b03      	ldr	r3, [pc, #12]	@ (8003b98 <UpdatePosRoutine+0xcc>)
 8003b8c:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 8003b90:	bf00      	nop
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	200011d8 	.word	0x200011d8
 8003b98:	20000fd8 	.word	0x20000fd8
 8003b9c:	20001354 	.word	0x20001354
 8003ba0:	40240000 	.word	0x40240000
 8003ba4:	2000134c 	.word	0x2000134c
 8003ba8:	20001358 	.word	0x20001358
 8003bac:	20001168 	.word	0x20001168

08003bb0 <Vacuum>:
void Vacuum() {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
        Vacuum_Status = registerFrame[0x02].U16;
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8003be0 <Vacuum+0x30>)
 8003bb6:	889b      	ldrh	r3, [r3, #4]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <Vacuum+0x34>)
 8003bbc:	601a      	str	r2, [r3, #0]
        if(Vacuum_Status == 1)
 8003bbe:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <Vacuum+0x34>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d105      	bne.n	8003bd2 <Vacuum+0x22>
        {
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,1);
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	2140      	movs	r1, #64	@ 0x40
 8003bca:	4807      	ldr	r0, [pc, #28]	@ (8003be8 <Vacuum+0x38>)
 8003bcc:	f003 f8d2 	bl	8006d74 <HAL_GPIO_WritePin>
        }
        else
        {
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
        }
}
 8003bd0:	e004      	b.n	8003bdc <Vacuum+0x2c>
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2140      	movs	r1, #64	@ 0x40
 8003bd6:	4804      	ldr	r0, [pc, #16]	@ (8003be8 <Vacuum+0x38>)
 8003bd8:	f003 f8cc 	bl	8006d74 <HAL_GPIO_WritePin>
}
 8003bdc:	bf00      	nop
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20000fd8 	.word	0x20000fd8
 8003be4:	20001170 	.word	0x20001170
 8003be8:	48000800 	.word	0x48000800

08003bec <GripperMovement>:
//Write Gripper Movement Status
void GripperMovement() {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
        Gripper_Movement_Status = registerFrame[0x03].U16;
 8003bf0:	4b28      	ldr	r3, [pc, #160]	@ (8003c94 <GripperMovement+0xa8>)
 8003bf2:	88db      	ldrh	r3, [r3, #6]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b28      	ldr	r3, [pc, #160]	@ (8003c98 <GripperMovement+0xac>)
 8003bf8:	601a      	str	r2, [r3, #0]
        if( Gripper_Movement_Status == 1)
 8003bfa:	4b27      	ldr	r3, [pc, #156]	@ (8003c98 <GripperMovement+0xac>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d11b      	bne.n	8003c3a <GripperMovement+0x4e>
	   {
        	if(LeadSW[1] == 0)
 8003c02:	4b26      	ldr	r3, [pc, #152]	@ (8003c9c <GripperMovement+0xb0>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10b      	bne.n	8003c22 <GripperMovement+0x36>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2120      	movs	r1, #32
 8003c0e:	4824      	ldr	r0, [pc, #144]	@ (8003ca0 <GripperMovement+0xb4>)
 8003c10:	f003 f8b0 	bl	8006d74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8003c14:	2200      	movs	r2, #0
 8003c16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c1a:	4821      	ldr	r0, [pc, #132]	@ (8003ca0 <GripperMovement+0xb4>)
 8003c1c:	f003 f8aa 	bl	8006d74 <HAL_GPIO_WritePin>
	   else
	   {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
	   }
}
 8003c20:	e036      	b.n	8003c90 <GripperMovement+0xa4>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,1);
 8003c22:	2201      	movs	r2, #1
 8003c24:	2120      	movs	r1, #32
 8003c26:	481e      	ldr	r0, [pc, #120]	@ (8003ca0 <GripperMovement+0xb4>)
 8003c28:	f003 f8a4 	bl	8006d74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c32:	481b      	ldr	r0, [pc, #108]	@ (8003ca0 <GripperMovement+0xb4>)
 8003c34:	f003 f89e 	bl	8006d74 <HAL_GPIO_WritePin>
}
 8003c38:	e02a      	b.n	8003c90 <GripperMovement+0xa4>
        else if(Gripper_Movement_Status == 0)
 8003c3a:	4b17      	ldr	r3, [pc, #92]	@ (8003c98 <GripperMovement+0xac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d11b      	bne.n	8003c7a <GripperMovement+0x8e>
        	if(LeadSW[0] == 0)
 8003c42:	4b16      	ldr	r3, [pc, #88]	@ (8003c9c <GripperMovement+0xb0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10b      	bne.n	8003c62 <GripperMovement+0x76>
        		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2120      	movs	r1, #32
 8003c4e:	4814      	ldr	r0, [pc, #80]	@ (8003ca0 <GripperMovement+0xb4>)
 8003c50:	f003 f890 	bl	8006d74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8003c54:	2200      	movs	r2, #0
 8003c56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c5a:	4811      	ldr	r0, [pc, #68]	@ (8003ca0 <GripperMovement+0xb4>)
 8003c5c:	f003 f88a 	bl	8006d74 <HAL_GPIO_WritePin>
}
 8003c60:	e016      	b.n	8003c90 <GripperMovement+0xa4>
        		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2120      	movs	r1, #32
 8003c66:	480e      	ldr	r0, [pc, #56]	@ (8003ca0 <GripperMovement+0xb4>)
 8003c68:	f003 f884 	bl	8006d74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,1);
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c72:	480b      	ldr	r0, [pc, #44]	@ (8003ca0 <GripperMovement+0xb4>)
 8003c74:	f003 f87e 	bl	8006d74 <HAL_GPIO_WritePin>
}
 8003c78:	e00a      	b.n	8003c90 <GripperMovement+0xa4>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2120      	movs	r1, #32
 8003c7e:	4808      	ldr	r0, [pc, #32]	@ (8003ca0 <GripperMovement+0xb4>)
 8003c80:	f003 f878 	bl	8006d74 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8003c84:	2200      	movs	r2, #0
 8003c86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c8a:	4805      	ldr	r0, [pc, #20]	@ (8003ca0 <GripperMovement+0xb4>)
 8003c8c:	f003 f872 	bl	8006d74 <HAL_GPIO_WritePin>
}
 8003c90:	bf00      	nop
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20000fd8 	.word	0x20000fd8
 8003c98:	20001174 	.word	0x20001174
 8003c9c:	200011d8 	.word	0x200011d8
 8003ca0:	48000800 	.word	0x48000800

08003ca4 <SetHome>:
void SetHome() {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
	if(Mode == 1)
 8003ca8:	4b6b      	ldr	r3, [pc, #428]	@ (8003e58 <SetHome+0x1b4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d16c      	bne.n	8003d8a <SetHome+0xe6>
		{
			registerFrame[0x01].U16 = 0b0000;
 8003cb0:	4b6a      	ldr	r3, [pc, #424]	@ (8003e5c <SetHome+0x1b8>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b0010;
 8003cb6:	4b69      	ldr	r3, [pc, #420]	@ (8003e5c <SetHome+0x1b8>)
 8003cb8:	2202      	movs	r2, #2
 8003cba:	841a      	strh	r2, [r3, #32]
			test = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8003cbc:	2110      	movs	r1, #16
 8003cbe:	4868      	ldr	r0, [pc, #416]	@ (8003e60 <SetHome+0x1bc>)
 8003cc0:	f003 f840 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4b66      	ldr	r3, [pc, #408]	@ (8003e64 <SetHome+0x1c0>)
 8003cca:	601a      	str	r2, [r3, #0]
			if(HOME == 1||HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8003ccc:	4b66      	ldr	r3, [pc, #408]	@ (8003e68 <SetHome+0x1c4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d006      	beq.n	8003ce2 <SetHome+0x3e>
 8003cd4:	2110      	movs	r1, #16
 8003cd6:	4862      	ldr	r0, [pc, #392]	@ (8003e60 <SetHome+0x1bc>)
 8003cd8:	f003 f834 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d144      	bne.n	8003d6c <SetHome+0xc8>
			{
				if(CountHome > 100)
 8003ce2:	4b62      	ldr	r3, [pc, #392]	@ (8003e6c <SetHome+0x1c8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b64      	cmp	r3, #100	@ 0x64
 8003ce8:	dd3a      	ble.n	8003d60 <SetHome+0xbc>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8003cea:	2201      	movs	r2, #1
 8003cec:	2101      	movs	r1, #1
 8003cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cf2:	f003 f83f 	bl	8006d74 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003cf6:	4b5e      	ldr	r3, [pc, #376]	@ (8003e70 <SetHome+0x1cc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(1000);
 8003cfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003d02:	f000 fdc1 	bl	8004888 <HAL_Delay>
					HOME = 0;
 8003d06:	4b58      	ldr	r3, [pc, #352]	@ (8003e68 <SetHome+0x1c4>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim3,0);
 8003d0c:	4b59      	ldr	r3, [pc, #356]	@ (8003e74 <SetHome+0x1d0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2200      	movs	r2, #0
 8003d12:	625a      	str	r2, [r3, #36]	@ 0x24
					Count = 0;
 8003d14:	4b58      	ldr	r3, [pc, #352]	@ (8003e78 <SetHome+0x1d4>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
					QEIdata.Position[NEW] = 0;
 8003d1a:	4b58      	ldr	r3, [pc, #352]	@ (8003e7c <SetHome+0x1d8>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
					QEIdata.Position[OLD] = 0;
 8003d20:	4b56      	ldr	r3, [pc, #344]	@ (8003e7c <SetHome+0x1d8>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	605a      	str	r2, [r3, #4]
					Pos_Start = 0;
 8003d26:	4b56      	ldr	r3, [pc, #344]	@ (8003e80 <SetHome+0x1dc>)
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
					state_ALL = 2;
 8003d2e:	4b55      	ldr	r3, [pc, #340]	@ (8003e84 <SetHome+0x1e0>)
 8003d30:	2202      	movs	r2, #2
 8003d32:	601a      	str	r2, [r3, #0]
					state_Tra = 0;
 8003d34:	4b54      	ldr	r3, [pc, #336]	@ (8003e88 <SetHome+0x1e4>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
					CountHome = 0;
 8003d3a:	4b4c      	ldr	r3, [pc, #304]	@ (8003e6c <SetHome+0x1c8>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
					registerFrame[0x10].U16 = 0b0000;//Reset ModBus
 8003d40:	4b46      	ldr	r3, [pc, #280]	@ (8003e5c <SetHome+0x1b8>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	841a      	strh	r2, [r3, #32]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 8003d46:	2201      	movs	r2, #1
 8003d48:	2108      	movs	r1, #8
 8003d4a:	4850      	ldr	r0, [pc, #320]	@ (8003e8c <SetHome+0x1e8>)
 8003d4c:	f003 f812 	bl	8006d74 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,0);
 8003d50:	2200      	movs	r2, #0
 8003d52:	2104      	movs	r1, #4
 8003d54:	484d      	ldr	r0, [pc, #308]	@ (8003e8c <SetHome+0x1e8>)
 8003d56:	f003 f80d 	bl	8006d74 <HAL_GPIO_WritePin>
					resetHome();
 8003d5a:	f7fe ffcd 	bl	8002cf8 <resetHome>
				if(CountHome > 100)
 8003d5e:	e078      	b.n	8003e52 <SetHome+0x1ae>
				}
				else
				{
					CountHome++;
 8003d60:	4b42      	ldr	r3, [pc, #264]	@ (8003e6c <SetHome+0x1c8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3301      	adds	r3, #1
 8003d66:	4a41      	ldr	r2, [pc, #260]	@ (8003e6c <SetHome+0x1c8>)
 8003d68:	6013      	str	r3, [r2, #0]
				if(CountHome > 100)
 8003d6a:	e072      	b.n	8003e52 <SetHome+0x1ae>
				}
			}
			else
			{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	2101      	movs	r1, #1
 8003d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d74:	f002 fffe 	bl	8006d74 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 7500);
 8003d78:	4b3d      	ldr	r3, [pc, #244]	@ (8003e70 <SetHome+0x1cc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8003d80:	635a      	str	r2, [r3, #52]	@ 0x34
			CountHome = 0;
 8003d82:	4b3a      	ldr	r3, [pc, #232]	@ (8003e6c <SetHome+0x1c8>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 7500);
			CountHome = 0;
			}
		}
    }
 8003d88:	e063      	b.n	8003e52 <SetHome+0x1ae>
			test = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8003d8a:	2110      	movs	r1, #16
 8003d8c:	4834      	ldr	r0, [pc, #208]	@ (8003e60 <SetHome+0x1bc>)
 8003d8e:	f002 ffd9 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003d92:	4603      	mov	r3, r0
 8003d94:	461a      	mov	r2, r3
 8003d96:	4b33      	ldr	r3, [pc, #204]	@ (8003e64 <SetHome+0x1c0>)
 8003d98:	601a      	str	r2, [r3, #0]
			if(HOME == 1||HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8003d9a:	4b33      	ldr	r3, [pc, #204]	@ (8003e68 <SetHome+0x1c4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d006      	beq.n	8003db0 <SetHome+0x10c>
 8003da2:	2110      	movs	r1, #16
 8003da4:	482e      	ldr	r0, [pc, #184]	@ (8003e60 <SetHome+0x1bc>)
 8003da6:	f002 ffcd 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d141      	bne.n	8003e34 <SetHome+0x190>
				if(CountHome > 100)
 8003db0:	4b2e      	ldr	r3, [pc, #184]	@ (8003e6c <SetHome+0x1c8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b64      	cmp	r3, #100	@ 0x64
 8003db6:	dd37      	ble.n	8003e28 <SetHome+0x184>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8003db8:	2201      	movs	r2, #1
 8003dba:	2101      	movs	r1, #1
 8003dbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dc0:	f002 ffd8 	bl	8006d74 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8003e70 <SetHome+0x1cc>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(1000);
 8003dcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003dd0:	f000 fd5a 	bl	8004888 <HAL_Delay>
					HOME = 0;
 8003dd4:	4b24      	ldr	r3, [pc, #144]	@ (8003e68 <SetHome+0x1c4>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim3,0);
 8003dda:	4b26      	ldr	r3, [pc, #152]	@ (8003e74 <SetHome+0x1d0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	625a      	str	r2, [r3, #36]	@ 0x24
					Count = 0;
 8003de2:	4b25      	ldr	r3, [pc, #148]	@ (8003e78 <SetHome+0x1d4>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
					QEIdata.Position[NEW] = 0;
 8003de8:	4b24      	ldr	r3, [pc, #144]	@ (8003e7c <SetHome+0x1d8>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
					QEIdata.Position[OLD] = 0;
 8003dee:	4b23      	ldr	r3, [pc, #140]	@ (8003e7c <SetHome+0x1d8>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	605a      	str	r2, [r3, #4]
					Pos_Start = 0;
 8003df4:	4b22      	ldr	r3, [pc, #136]	@ (8003e80 <SetHome+0x1dc>)
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
					state_ALL = 2;
 8003dfc:	4b21      	ldr	r3, [pc, #132]	@ (8003e84 <SetHome+0x1e0>)
 8003dfe:	2202      	movs	r2, #2
 8003e00:	601a      	str	r2, [r3, #0]
					state_Tra = 0;
 8003e02:	4b21      	ldr	r3, [pc, #132]	@ (8003e88 <SetHome+0x1e4>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
					CountHome = 0;
 8003e08:	4b18      	ldr	r3, [pc, #96]	@ (8003e6c <SetHome+0x1c8>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 8003e0e:	2201      	movs	r2, #1
 8003e10:	2108      	movs	r1, #8
 8003e12:	481e      	ldr	r0, [pc, #120]	@ (8003e8c <SetHome+0x1e8>)
 8003e14:	f002 ffae 	bl	8006d74 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,0);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2104      	movs	r1, #4
 8003e1c:	481b      	ldr	r0, [pc, #108]	@ (8003e8c <SetHome+0x1e8>)
 8003e1e:	f002 ffa9 	bl	8006d74 <HAL_GPIO_WritePin>
					resetHome();
 8003e22:	f7fe ff69 	bl	8002cf8 <resetHome>
				if(CountHome > 100)
 8003e26:	e014      	b.n	8003e52 <SetHome+0x1ae>
					CountHome++;
 8003e28:	4b10      	ldr	r3, [pc, #64]	@ (8003e6c <SetHome+0x1c8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	4a0f      	ldr	r2, [pc, #60]	@ (8003e6c <SetHome+0x1c8>)
 8003e30:	6013      	str	r3, [r2, #0]
				if(CountHome > 100)
 8003e32:	e00e      	b.n	8003e52 <SetHome+0x1ae>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8003e34:	2201      	movs	r2, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e3c:	f002 ff9a 	bl	8006d74 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 7500);
 8003e40:	4b0b      	ldr	r3, [pc, #44]	@ (8003e70 <SetHome+0x1cc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8003e48:	635a      	str	r2, [r3, #52]	@ 0x34
			CountHome = 0;
 8003e4a:	4b08      	ldr	r3, [pc, #32]	@ (8003e6c <SetHome+0x1c8>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
    }
 8003e50:	e7ff      	b.n	8003e52 <SetHome+0x1ae>
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	2000116c 	.word	0x2000116c
 8003e5c:	20000fd8 	.word	0x20000fd8
 8003e60:	48000400 	.word	0x48000400
 8003e64:	200011a4 	.word	0x200011a4
 8003e68:	200011bc 	.word	0x200011bc
 8003e6c:	200011e8 	.word	0x200011e8
 8003e70:	20000578 	.word	0x20000578
 8003e74:	200004ac 	.word	0x200004ac
 8003e78:	2000135c 	.word	0x2000135c
 8003e7c:	20001368 	.word	0x20001368
 8003e80:	200012b8 	.word	0x200012b8
 8003e84:	20000204 	.word	0x20000204
 8003e88:	200012d8 	.word	0x200012d8
 8003e8c:	48000800 	.word	0x48000800

08003e90 <splitInteger>:

void splitInteger(int number, int *digitsArray) {
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
    int temp = number;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	60fb      	str	r3, [r7, #12]
    for (int b = 0; b < 5; b++) {
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	e01d      	b.n	8003ee0 <splitInteger+0x50>
        digitsArray[4 - b] = temp % 10;  // Getting the last digit
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f1c3 0304 	rsb	r3, r3, #4
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	18d0      	adds	r0, r2, r3
 8003eb0:	68f9      	ldr	r1, [r7, #12]
 8003eb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ef4 <splitInteger+0x64>)
 8003eb4:	fb83 2301 	smull	r2, r3, r3, r1
 8003eb8:	109a      	asrs	r2, r3, #2
 8003eba:	17cb      	asrs	r3, r1, #31
 8003ebc:	1ad2      	subs	r2, r2, r3
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	1aca      	subs	r2, r1, r3
 8003ec8:	6002      	str	r2, [r0, #0]
        temp /= 10;  // Removing the last digit
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a09      	ldr	r2, [pc, #36]	@ (8003ef4 <splitInteger+0x64>)
 8003ece:	fb82 1203 	smull	r1, r2, r2, r3
 8003ed2:	1092      	asrs	r2, r2, #2
 8003ed4:	17db      	asrs	r3, r3, #31
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	60fb      	str	r3, [r7, #12]
    for (int b = 0; b < 5; b++) {
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	3301      	adds	r3, #1
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	ddde      	ble.n	8003ea4 <splitInteger+0x14>
    }
}
 8003ee6:	bf00      	nop
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	66666667 	.word	0x66666667

08003ef8 <SensorRead>:
void SensorRead()
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
	ButtonTest[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8003efc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f04:	f002 ff1e 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b39      	ldr	r3, [pc, #228]	@ (8003ff4 <SensorRead+0xfc>)
 8003f0e:	601a      	str	r2, [r3, #0]
	ButtonTest[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8003f10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f14:	4838      	ldr	r0, [pc, #224]	@ (8003ff8 <SensorRead+0x100>)
 8003f16:	f002 ff15 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4b35      	ldr	r3, [pc, #212]	@ (8003ff4 <SensorRead+0xfc>)
 8003f20:	605a      	str	r2, [r3, #4]
	ButtonTest[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8003f22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f2a:	f002 ff0b 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	461a      	mov	r2, r3
 8003f32:	4b30      	ldr	r3, [pc, #192]	@ (8003ff4 <SensorRead+0xfc>)
 8003f34:	609a      	str	r2, [r3, #8]
	ButtonTest[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8003f36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f3e:	f002 ff01 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003f42:	4603      	mov	r3, r0
 8003f44:	461a      	mov	r2, r3
 8003f46:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff4 <SensorRead+0xfc>)
 8003f48:	60da      	str	r2, [r3, #12]
	ButtonTest[4] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8003f4a:	2180      	movs	r1, #128	@ 0x80
 8003f4c:	482b      	ldr	r0, [pc, #172]	@ (8003ffc <SensorRead+0x104>)
 8003f4e:	f002 fef9 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003f52:	4603      	mov	r3, r0
 8003f54:	461a      	mov	r2, r3
 8003f56:	4b27      	ldr	r3, [pc, #156]	@ (8003ff4 <SensorRead+0xfc>)
 8003f58:	611a      	str	r2, [r3, #16]
	ButtonTest[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8003f5a:	2140      	movs	r1, #64	@ 0x40
 8003f5c:	4826      	ldr	r0, [pc, #152]	@ (8003ff8 <SensorRead+0x100>)
 8003f5e:	f002 fef1 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003f62:	4603      	mov	r3, r0
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b23      	ldr	r3, [pc, #140]	@ (8003ff4 <SensorRead+0xfc>)
 8003f68:	615a      	str	r2, [r3, #20]
	LeadSW[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	4822      	ldr	r0, [pc, #136]	@ (8003ff8 <SensorRead+0x100>)
 8003f6e:	f002 fee9 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003f72:	4603      	mov	r3, r0
 8003f74:	461a      	mov	r2, r3
 8003f76:	4b22      	ldr	r3, [pc, #136]	@ (8004000 <SensorRead+0x108>)
 8003f78:	601a      	str	r2, [r3, #0]
	LeadSW[1] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8003f7a:	2102      	movs	r1, #2
 8003f7c:	481f      	ldr	r0, [pc, #124]	@ (8003ffc <SensorRead+0x104>)
 8003f7e:	f002 fee1 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003f82:	4603      	mov	r3, r0
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b1e      	ldr	r3, [pc, #120]	@ (8004000 <SensorRead+0x108>)
 8003f88:	605a      	str	r2, [r3, #4]
	test = LeadSW[1] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1);
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8004000 <SensorRead+0x108>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <SensorRead+0xaa>
 8003f92:	4b1b      	ldr	r3, [pc, #108]	@ (8004000 <SensorRead+0x108>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d105      	bne.n	8003fa6 <SensorRead+0xae>
 8003f9a:	4b19      	ldr	r3, [pc, #100]	@ (8004000 <SensorRead+0x108>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <SensorRead+0xae>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <SensorRead+0xb0>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	4a16      	ldr	r2, [pc, #88]	@ (8004004 <SensorRead+0x10c>)
 8003faa:	6013      	str	r3, [r2, #0]
	test2 = LeadSW[0] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1);
 8003fac:	4b14      	ldr	r3, [pc, #80]	@ (8004000 <SensorRead+0x108>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d007      	beq.n	8003fc4 <SensorRead+0xcc>
 8003fb4:	4b12      	ldr	r3, [pc, #72]	@ (8004000 <SensorRead+0x108>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d105      	bne.n	8003fc8 <SensorRead+0xd0>
 8003fbc:	4b10      	ldr	r3, [pc, #64]	@ (8004000 <SensorRead+0x108>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <SensorRead+0xd0>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <SensorRead+0xd2>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4a0f      	ldr	r2, [pc, #60]	@ (8004008 <SensorRead+0x110>)
 8003fcc:	6013      	str	r3, [r2, #0]
	emer = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); //emer
 8003fce:	2110      	movs	r1, #16
 8003fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fd4:	f002 feb6 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <SensorRead+0x114>)
 8003fde:	601a      	str	r2, [r3, #0]
	resetBut = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2); //reset
 8003fe0:	2104      	movs	r1, #4
 8003fe2:	4805      	ldr	r0, [pc, #20]	@ (8003ff8 <SensorRead+0x100>)
 8003fe4:	f002 feae 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	461a      	mov	r2, r3
 8003fec:	4b08      	ldr	r3, [pc, #32]	@ (8004010 <SensorRead+0x118>)
 8003fee:	601a      	str	r2, [r3, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	200011c0 	.word	0x200011c0
 8003ff8:	48000400 	.word	0x48000400
 8003ffc:	48000800 	.word	0x48000800
 8004000:	200011d8 	.word	0x200011d8
 8004004:	200011a4 	.word	0x200011a4
 8004008:	200011a8 	.word	0x200011a8
 800400c:	20001210 	.word	0x20001210
 8004010:	20001214 	.word	0x20001214

08004014 <HAL_TIM_PeriodElapsedCallback>:
//		CountProxi = 0;
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b5b0      	push	{r4, r5, r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
if(htim == &htim5)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a0c      	ldr	r2, [pc, #48]	@ (8004050 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d108      	bne.n	8004036 <HAL_TIM_PeriodElapsedCallback+0x22>
{
_micros += UINT32_MAX;
 8004024:	4b0b      	ldr	r3, [pc, #44]	@ (8004054 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402a:	1e54      	subs	r4, r2, #1
 800402c:	f143 0500 	adc.w	r5, r3, #0
 8004030:	4b08      	ldr	r3, [pc, #32]	@ (8004054 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004032:	e9c3 4500 	strd	r4, r5, [r3]
}
if(htim == &htim6)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a07      	ldr	r2, [pc, #28]	@ (8004058 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d103      	bne.n	8004046 <HAL_TIM_PeriodElapsedCallback+0x32>
{
	Heartbeat();
 800403e:	f7ff fd21 	bl	8003a84 <Heartbeat>
	Routine();
 8004042:	f7ff fd2d 	bl	8003aa0 <Routine>
}
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bdb0      	pop	{r4, r5, r7, pc}
 800404e:	bf00      	nop
 8004050:	20000644 	.word	0x20000644
 8004054:	20001390 	.word	0x20001390
 8004058:	20000710 	.word	0x20000710

0800405c <micros>:
uint64_t micros()
{
 800405c:	b4b0      	push	{r4, r5, r7}
 800405e:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8004060:	4b09      	ldr	r3, [pc, #36]	@ (8004088 <micros+0x2c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	2200      	movs	r2, #0
 8004068:	4618      	mov	r0, r3
 800406a:	4611      	mov	r1, r2
 800406c:	4b07      	ldr	r3, [pc, #28]	@ (800408c <micros+0x30>)
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	1884      	adds	r4, r0, r2
 8004074:	eb41 0503 	adc.w	r5, r1, r3
 8004078:	4622      	mov	r2, r4
 800407a:	462b      	mov	r3, r5
}
 800407c:	4610      	mov	r0, r2
 800407e:	4619      	mov	r1, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	bcb0      	pop	{r4, r5, r7}
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000644 	.word	0x20000644
 800408c:	20001390 	.word	0x20001390

08004090 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040a0:	d102      	bne.n	80040a8 <HAL_GPIO_EXTI_Callback+0x18>
	{
		start  = 1;
 80040a2:	4b04      	ldr	r3, [pc, #16]	@ (80040b4 <HAL_GPIO_EXTI_Callback+0x24>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
//	if(GPIO_Pin == GPIO_PIN_5)
//	{
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//		HOME = 2;
//	}
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	200011ac 	.word	0x200011ac

080040b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040bc:	b672      	cpsid	i
}
 80040be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040c0:	bf00      	nop
 80040c2:	e7fd      	b.n	80040c0 <Error_Handler+0x8>

080040c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004108 <HAL_MspInit+0x44>)
 80040cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004108 <HAL_MspInit+0x44>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80040d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004108 <HAL_MspInit+0x44>)
 80040d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	607b      	str	r3, [r7, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040e2:	4b09      	ldr	r3, [pc, #36]	@ (8004108 <HAL_MspInit+0x44>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e6:	4a08      	ldr	r2, [pc, #32]	@ (8004108 <HAL_MspInit+0x44>)
 80040e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ee:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <HAL_MspInit+0x44>)
 80040f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80040fa:	f002 ff29 	bl	8006f50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000

0800410c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b09e      	sub	sp, #120	@ 0x78
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004114:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	609a      	str	r2, [r3, #8]
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004124:	f107 0310 	add.w	r3, r7, #16
 8004128:	2254      	movs	r2, #84	@ 0x54
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f007 fded 	bl	800bd0c <memset>
  if(hadc->Instance==ADC3)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a33      	ldr	r2, [pc, #204]	@ (8004204 <HAL_ADC_MspInit+0xf8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d15f      	bne.n	80041fc <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800413c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004140:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8004142:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004146:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004148:	f107 0310 	add.w	r3, r7, #16
 800414c:	4618      	mov	r0, r3
 800414e:	f003 fc3d 	bl	80079cc <HAL_RCCEx_PeriphCLKConfig>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004158:	f7ff ffae 	bl	80040b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 800415c:	4b2a      	ldr	r3, [pc, #168]	@ (8004208 <HAL_ADC_MspInit+0xfc>)
 800415e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004160:	4a29      	ldr	r2, [pc, #164]	@ (8004208 <HAL_ADC_MspInit+0xfc>)
 8004162:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004168:	4b27      	ldr	r3, [pc, #156]	@ (8004208 <HAL_ADC_MspInit+0xfc>)
 800416a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800416c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004174:	4b24      	ldr	r3, [pc, #144]	@ (8004208 <HAL_ADC_MspInit+0xfc>)
 8004176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004178:	4a23      	ldr	r2, [pc, #140]	@ (8004208 <HAL_ADC_MspInit+0xfc>)
 800417a:	f043 0302 	orr.w	r3, r3, #2
 800417e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004180:	4b21      	ldr	r3, [pc, #132]	@ (8004208 <HAL_ADC_MspInit+0xfc>)
 8004182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = JOY_Y_Pin|JOY_X_Pin;
 800418c:	f242 0302 	movw	r3, #8194	@ 0x2002
 8004190:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004192:	2303      	movs	r3, #3
 8004194:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004196:	2300      	movs	r3, #0
 8004198:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800419a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800419e:	4619      	mov	r1, r3
 80041a0:	481a      	ldr	r0, [pc, #104]	@ (800420c <HAL_ADC_MspInit+0x100>)
 80041a2:	f002 fc4d 	bl	8006a40 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Channel3;
 80041a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004210 <HAL_ADC_MspInit+0x104>)
 80041a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004214 <HAL_ADC_MspInit+0x108>)
 80041aa:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80041ac:	4b18      	ldr	r3, [pc, #96]	@ (8004210 <HAL_ADC_MspInit+0x104>)
 80041ae:	2225      	movs	r2, #37	@ 0x25
 80041b0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041b2:	4b17      	ldr	r3, [pc, #92]	@ (8004210 <HAL_ADC_MspInit+0x104>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80041b8:	4b15      	ldr	r3, [pc, #84]	@ (8004210 <HAL_ADC_MspInit+0x104>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80041be:	4b14      	ldr	r3, [pc, #80]	@ (8004210 <HAL_ADC_MspInit+0x104>)
 80041c0:	2280      	movs	r2, #128	@ 0x80
 80041c2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041c4:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <HAL_ADC_MspInit+0x104>)
 80041c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041ca:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041cc:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <HAL_ADC_MspInit+0x104>)
 80041ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041d2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80041d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004210 <HAL_ADC_MspInit+0x104>)
 80041d6:	2220      	movs	r2, #32
 80041d8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80041da:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <HAL_ADC_MspInit+0x104>)
 80041dc:	2200      	movs	r2, #0
 80041de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80041e0:	480b      	ldr	r0, [pc, #44]	@ (8004210 <HAL_ADC_MspInit+0x104>)
 80041e2:	f002 f8fb 	bl	80063dc <HAL_DMA_Init>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80041ec:	f7ff ff64 	bl	80040b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a07      	ldr	r2, [pc, #28]	@ (8004210 <HAL_ADC_MspInit+0x104>)
 80041f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80041f6:	4a06      	ldr	r2, [pc, #24]	@ (8004210 <HAL_ADC_MspInit+0x104>)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80041fc:	bf00      	nop
 80041fe:	3778      	adds	r7, #120	@ 0x78
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	50000400 	.word	0x50000400
 8004208:	40021000 	.word	0x40021000
 800420c:	48000400 	.word	0x48000400
 8004210:	200002b4 	.word	0x200002b4
 8004214:	40020030 	.word	0x40020030

08004218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	@ 0x28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a4f      	ldr	r2, [pc, #316]	@ (8004364 <HAL_TIM_Base_MspInit+0x14c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d114      	bne.n	8004254 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800422a:	4b4f      	ldr	r3, [pc, #316]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 800422c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422e:	4a4e      	ldr	r2, [pc, #312]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 8004230:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004234:	6613      	str	r3, [r2, #96]	@ 0x60
 8004236:	4b4c      	ldr	r3, [pc, #304]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 8004238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004242:	2200      	movs	r2, #0
 8004244:	2100      	movs	r1, #0
 8004246:	2019      	movs	r0, #25
 8004248:	f002 f893 	bl	8006372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800424c:	2019      	movs	r0, #25
 800424e:	f002 f8aa 	bl	80063a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004252:	e082      	b.n	800435a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800425c:	d10c      	bne.n	8004278 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800425e:	4b42      	ldr	r3, [pc, #264]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004262:	4a41      	ldr	r2, [pc, #260]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	6593      	str	r3, [r2, #88]	@ 0x58
 800426a:	4b3f      	ldr	r3, [pc, #252]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 800426c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	623b      	str	r3, [r7, #32]
 8004274:	6a3b      	ldr	r3, [r7, #32]
}
 8004276:	e070      	b.n	800435a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a3b      	ldr	r2, [pc, #236]	@ (800436c <HAL_TIM_Base_MspInit+0x154>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d10c      	bne.n	800429c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004282:	4b39      	ldr	r3, [pc, #228]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004286:	4a38      	ldr	r2, [pc, #224]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 8004288:	f043 0304 	orr.w	r3, r3, #4
 800428c:	6593      	str	r3, [r2, #88]	@ 0x58
 800428e:	4b36      	ldr	r3, [pc, #216]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	69fb      	ldr	r3, [r7, #28]
}
 800429a:	e05e      	b.n	800435a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM5)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a33      	ldr	r2, [pc, #204]	@ (8004370 <HAL_TIM_Base_MspInit+0x158>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d114      	bne.n	80042d0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80042a6:	4b30      	ldr	r3, [pc, #192]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 80042ac:	f043 0308 	orr.w	r3, r3, #8
 80042b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	2100      	movs	r1, #0
 80042c2:	2032      	movs	r0, #50	@ 0x32
 80042c4:	f002 f855 	bl	8006372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80042c8:	2032      	movs	r0, #50	@ 0x32
 80042ca:	f002 f86c 	bl	80063a6 <HAL_NVIC_EnableIRQ>
}
 80042ce:	e044      	b.n	800435a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a27      	ldr	r2, [pc, #156]	@ (8004374 <HAL_TIM_Base_MspInit+0x15c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d114      	bne.n	8004304 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80042da:	4b23      	ldr	r3, [pc, #140]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 80042dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042de:	4a22      	ldr	r2, [pc, #136]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 80042e0:	f043 0310 	orr.w	r3, r3, #16
 80042e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042e6:	4b20      	ldr	r3, [pc, #128]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80042f2:	2200      	movs	r2, #0
 80042f4:	2100      	movs	r1, #0
 80042f6:	2036      	movs	r0, #54	@ 0x36
 80042f8:	f002 f83b 	bl	8006372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80042fc:	2036      	movs	r0, #54	@ 0x36
 80042fe:	f002 f852 	bl	80063a6 <HAL_NVIC_EnableIRQ>
}
 8004302:	e02a      	b.n	800435a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM8)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1b      	ldr	r2, [pc, #108]	@ (8004378 <HAL_TIM_Base_MspInit+0x160>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10c      	bne.n	8004328 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800430e:	4b16      	ldr	r3, [pc, #88]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 8004310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004312:	4a15      	ldr	r2, [pc, #84]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 8004314:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004318:	6613      	str	r3, [r2, #96]	@ 0x60
 800431a:	4b13      	ldr	r3, [pc, #76]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 800431c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800431e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	693b      	ldr	r3, [r7, #16]
}
 8004326:	e018      	b.n	800435a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a13      	ldr	r2, [pc, #76]	@ (800437c <HAL_TIM_Base_MspInit+0x164>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d113      	bne.n	800435a <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004332:	4b0d      	ldr	r3, [pc, #52]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 8004334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004336:	4a0c      	ldr	r2, [pc, #48]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 8004338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800433c:	6613      	str	r3, [r2, #96]	@ 0x60
 800433e:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <HAL_TIM_Base_MspInit+0x150>)
 8004340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800434a:	2200      	movs	r2, #0
 800434c:	2100      	movs	r1, #0
 800434e:	2019      	movs	r0, #25
 8004350:	f002 f80f 	bl	8006372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004354:	2019      	movs	r0, #25
 8004356:	f002 f826 	bl	80063a6 <HAL_NVIC_EnableIRQ>
}
 800435a:	bf00      	nop
 800435c:	3728      	adds	r7, #40	@ 0x28
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40012c00 	.word	0x40012c00
 8004368:	40021000 	.word	0x40021000
 800436c:	40000800 	.word	0x40000800
 8004370:	40000c00 	.word	0x40000c00
 8004374:	40001000 	.word	0x40001000
 8004378:	40013400 	.word	0x40013400
 800437c:	40014400 	.word	0x40014400

08004380 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	@ 0x28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004388:	f107 0314 	add.w	r3, r7, #20
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1b      	ldr	r2, [pc, #108]	@ (800440c <HAL_TIM_Encoder_MspInit+0x8c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d130      	bne.n	8004404 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004410 <HAL_TIM_Encoder_MspInit+0x90>)
 80043a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004410 <HAL_TIM_Encoder_MspInit+0x90>)
 80043a8:	f043 0302 	orr.w	r3, r3, #2
 80043ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80043ae:	4b18      	ldr	r3, [pc, #96]	@ (8004410 <HAL_TIM_Encoder_MspInit+0x90>)
 80043b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ba:	4b15      	ldr	r3, [pc, #84]	@ (8004410 <HAL_TIM_Encoder_MspInit+0x90>)
 80043bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043be:	4a14      	ldr	r2, [pc, #80]	@ (8004410 <HAL_TIM_Encoder_MspInit+0x90>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043c6:	4b12      	ldr	r3, [pc, #72]	@ (8004410 <HAL_TIM_Encoder_MspInit+0x90>)
 80043c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_Encoder_A_Pin|TIM3_Encoder_B_Pin;
 80043d2:	23c0      	movs	r3, #192	@ 0xc0
 80043d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d6:	2302      	movs	r3, #2
 80043d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043de:	2300      	movs	r3, #0
 80043e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043e2:	2302      	movs	r3, #2
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e6:	f107 0314 	add.w	r3, r7, #20
 80043ea:	4619      	mov	r1, r3
 80043ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043f0:	f002 fb26 	bl	8006a40 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80043f4:	2200      	movs	r2, #0
 80043f6:	2100      	movs	r1, #0
 80043f8:	201d      	movs	r0, #29
 80043fa:	f001 ffba 	bl	8006372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80043fe:	201d      	movs	r0, #29
 8004400:	f001 ffd1 	bl	80063a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004404:	bf00      	nop
 8004406:	3728      	adds	r7, #40	@ 0x28
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40000400 	.word	0x40000400
 8004410:	40021000 	.word	0x40021000

08004414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441c:	f107 030c 	add.w	r3, r7, #12
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	60da      	str	r2, [r3, #12]
 800442a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a12      	ldr	r2, [pc, #72]	@ (800447c <HAL_TIM_MspPostInit+0x68>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d11d      	bne.n	8004472 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004436:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <HAL_TIM_MspPostInit+0x6c>)
 8004438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443a:	4a11      	ldr	r2, [pc, #68]	@ (8004480 <HAL_TIM_MspPostInit+0x6c>)
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004442:	4b0f      	ldr	r3, [pc, #60]	@ (8004480 <HAL_TIM_MspPostInit+0x6c>)
 8004444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_PWM_Pin;
 800444e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004452:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004454:	2302      	movs	r3, #2
 8004456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445c:	2300      	movs	r3, #0
 800445e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004460:	230a      	movs	r3, #10
 8004462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_PWM_GPIO_Port, &GPIO_InitStruct);
 8004464:	f107 030c 	add.w	r3, r7, #12
 8004468:	4619      	mov	r1, r3
 800446a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800446e:	f002 fae7 	bl	8006a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004472:	bf00      	nop
 8004474:	3720      	adds	r7, #32
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40000800 	.word	0x40000800
 8004480:	40021000 	.word	0x40021000

08004484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b09e      	sub	sp, #120	@ 0x78
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800448c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	609a      	str	r2, [r3, #8]
 8004498:	60da      	str	r2, [r3, #12]
 800449a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800449c:	f107 0310 	add.w	r3, r7, #16
 80044a0:	2254      	movs	r2, #84	@ 0x54
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f007 fc31 	bl	800bd0c <memset>
  if(huart->Instance==USART2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4d      	ldr	r2, [pc, #308]	@ (80045e4 <HAL_UART_MspInit+0x160>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	f040 8092 	bne.w	80045da <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80044b6:	2302      	movs	r3, #2
 80044b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044be:	f107 0310 	add.w	r3, r7, #16
 80044c2:	4618      	mov	r0, r3
 80044c4:	f003 fa82 	bl	80079cc <HAL_RCCEx_PeriphCLKConfig>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80044ce:	f7ff fdf3 	bl	80040b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80044d2:	4b45      	ldr	r3, [pc, #276]	@ (80045e8 <HAL_UART_MspInit+0x164>)
 80044d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d6:	4a44      	ldr	r2, [pc, #272]	@ (80045e8 <HAL_UART_MspInit+0x164>)
 80044d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80044de:	4b42      	ldr	r3, [pc, #264]	@ (80045e8 <HAL_UART_MspInit+0x164>)
 80044e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ea:	4b3f      	ldr	r3, [pc, #252]	@ (80045e8 <HAL_UART_MspInit+0x164>)
 80044ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ee:	4a3e      	ldr	r2, [pc, #248]	@ (80045e8 <HAL_UART_MspInit+0x164>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044f6:	4b3c      	ldr	r3, [pc, #240]	@ (80045e8 <HAL_UART_MspInit+0x164>)
 80044f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004502:	230c      	movs	r3, #12
 8004504:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004506:	2302      	movs	r3, #2
 8004508:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450a:	2300      	movs	r3, #0
 800450c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450e:	2300      	movs	r3, #0
 8004510:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004512:	2307      	movs	r3, #7
 8004514:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004516:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800451a:	4619      	mov	r1, r3
 800451c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004520:	f002 fa8e 	bl	8006a40 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004524:	4b31      	ldr	r3, [pc, #196]	@ (80045ec <HAL_UART_MspInit+0x168>)
 8004526:	4a32      	ldr	r2, [pc, #200]	@ (80045f0 <HAL_UART_MspInit+0x16c>)
 8004528:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800452a:	4b30      	ldr	r3, [pc, #192]	@ (80045ec <HAL_UART_MspInit+0x168>)
 800452c:	221a      	movs	r2, #26
 800452e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004530:	4b2e      	ldr	r3, [pc, #184]	@ (80045ec <HAL_UART_MspInit+0x168>)
 8004532:	2200      	movs	r2, #0
 8004534:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004536:	4b2d      	ldr	r3, [pc, #180]	@ (80045ec <HAL_UART_MspInit+0x168>)
 8004538:	2200      	movs	r2, #0
 800453a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800453c:	4b2b      	ldr	r3, [pc, #172]	@ (80045ec <HAL_UART_MspInit+0x168>)
 800453e:	2280      	movs	r2, #128	@ 0x80
 8004540:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004542:	4b2a      	ldr	r3, [pc, #168]	@ (80045ec <HAL_UART_MspInit+0x168>)
 8004544:	2200      	movs	r2, #0
 8004546:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004548:	4b28      	ldr	r3, [pc, #160]	@ (80045ec <HAL_UART_MspInit+0x168>)
 800454a:	2200      	movs	r2, #0
 800454c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800454e:	4b27      	ldr	r3, [pc, #156]	@ (80045ec <HAL_UART_MspInit+0x168>)
 8004550:	2200      	movs	r2, #0
 8004552:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004554:	4b25      	ldr	r3, [pc, #148]	@ (80045ec <HAL_UART_MspInit+0x168>)
 8004556:	2200      	movs	r2, #0
 8004558:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800455a:	4824      	ldr	r0, [pc, #144]	@ (80045ec <HAL_UART_MspInit+0x168>)
 800455c:	f001 ff3e 	bl	80063dc <HAL_DMA_Init>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004566:	f7ff fda7 	bl	80040b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1f      	ldr	r2, [pc, #124]	@ (80045ec <HAL_UART_MspInit+0x168>)
 800456e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004572:	4a1e      	ldr	r2, [pc, #120]	@ (80045ec <HAL_UART_MspInit+0x168>)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004578:	4b1e      	ldr	r3, [pc, #120]	@ (80045f4 <HAL_UART_MspInit+0x170>)
 800457a:	4a1f      	ldr	r2, [pc, #124]	@ (80045f8 <HAL_UART_MspInit+0x174>)
 800457c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800457e:	4b1d      	ldr	r3, [pc, #116]	@ (80045f4 <HAL_UART_MspInit+0x170>)
 8004580:	221b      	movs	r2, #27
 8004582:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004584:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <HAL_UART_MspInit+0x170>)
 8004586:	2210      	movs	r2, #16
 8004588:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800458a:	4b1a      	ldr	r3, [pc, #104]	@ (80045f4 <HAL_UART_MspInit+0x170>)
 800458c:	2200      	movs	r2, #0
 800458e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004590:	4b18      	ldr	r3, [pc, #96]	@ (80045f4 <HAL_UART_MspInit+0x170>)
 8004592:	2280      	movs	r2, #128	@ 0x80
 8004594:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004596:	4b17      	ldr	r3, [pc, #92]	@ (80045f4 <HAL_UART_MspInit+0x170>)
 8004598:	2200      	movs	r2, #0
 800459a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800459c:	4b15      	ldr	r3, [pc, #84]	@ (80045f4 <HAL_UART_MspInit+0x170>)
 800459e:	2200      	movs	r2, #0
 80045a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80045a2:	4b14      	ldr	r3, [pc, #80]	@ (80045f4 <HAL_UART_MspInit+0x170>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80045a8:	4b12      	ldr	r3, [pc, #72]	@ (80045f4 <HAL_UART_MspInit+0x170>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80045ae:	4811      	ldr	r0, [pc, #68]	@ (80045f4 <HAL_UART_MspInit+0x170>)
 80045b0:	f001 ff14 	bl	80063dc <HAL_DMA_Init>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80045ba:	f7ff fd7d 	bl	80040b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a0c      	ldr	r2, [pc, #48]	@ (80045f4 <HAL_UART_MspInit+0x170>)
 80045c2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80045c4:	4a0b      	ldr	r2, [pc, #44]	@ (80045f4 <HAL_UART_MspInit+0x170>)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80045ca:	2200      	movs	r2, #0
 80045cc:	2100      	movs	r1, #0
 80045ce:	2026      	movs	r0, #38	@ 0x26
 80045d0:	f001 fecf 	bl	8006372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045d4:	2026      	movs	r0, #38	@ 0x26
 80045d6:	f001 fee6 	bl	80063a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80045da:	bf00      	nop
 80045dc:	3778      	adds	r7, #120	@ 0x78
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40004400 	.word	0x40004400
 80045e8:	40021000 	.word	0x40021000
 80045ec:	20000a40 	.word	0x20000a40
 80045f0:	40020008 	.word	0x40020008
 80045f4:	20000aa0 	.word	0x20000aa0
 80045f8:	4002001c 	.word	0x4002001c

080045fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004600:	bf00      	nop
 8004602:	e7fd      	b.n	8004600 <NMI_Handler+0x4>

08004604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004608:	bf00      	nop
 800460a:	e7fd      	b.n	8004608 <HardFault_Handler+0x4>

0800460c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004610:	bf00      	nop
 8004612:	e7fd      	b.n	8004610 <MemManage_Handler+0x4>

08004614 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004618:	bf00      	nop
 800461a:	e7fd      	b.n	8004618 <BusFault_Handler+0x4>

0800461c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004620:	bf00      	nop
 8004622:	e7fd      	b.n	8004620 <UsageFault_Handler+0x4>

08004624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004628:	bf00      	nop
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004632:	b480      	push	{r7}
 8004634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004636:	bf00      	nop
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004652:	f000 f8fb 	bl	800484c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004656:	bf00      	nop
 8004658:	bd80      	pop	{r7, pc}

0800465a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Lowerprox_Pin);
 800465e:	2010      	movs	r0, #16
 8004660:	f002 fbba 	bl	8006dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004664:	bf00      	nop
 8004666:	bd80      	pop	{r7, pc}

08004668 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800466c:	4802      	ldr	r0, [pc, #8]	@ (8004678 <DMA1_Channel1_IRQHandler+0x10>)
 800466e:	f002 f898 	bl	80067a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000a40 	.word	0x20000a40

0800467c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004680:	4802      	ldr	r0, [pc, #8]	@ (800468c <DMA1_Channel2_IRQHandler+0x10>)
 8004682:	f002 f88e 	bl	80067a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000aa0 	.word	0x20000aa0

08004690 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004694:	4802      	ldr	r0, [pc, #8]	@ (80046a0 <DMA1_Channel3_IRQHandler+0x10>)
 8004696:	f002 f884 	bl	80067a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	200002b4 	.word	0x200002b4

080046a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UpperProx_Pin);
 80046a8:	2020      	movs	r0, #32
 80046aa:	f002 fb95 	bl	8006dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80046ae:	bf00      	nop
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046b8:	4803      	ldr	r0, [pc, #12]	@ (80046c8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80046ba:	f004 f8d9 	bl	8008870 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80046be:	4803      	ldr	r0, [pc, #12]	@ (80046cc <TIM1_UP_TIM16_IRQHandler+0x18>)
 80046c0:	f004 f8d6 	bl	8008870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80046c4:	bf00      	nop
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20000314 	.word	0x20000314
 80046cc:	200008a8 	.word	0x200008a8

080046d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80046d4:	4802      	ldr	r0, [pc, #8]	@ (80046e0 <TIM3_IRQHandler+0x10>)
 80046d6:	f004 f8cb 	bl	8008870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80046da:	bf00      	nop
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	200004ac 	.word	0x200004ac

080046e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046e8:	4802      	ldr	r0, [pc, #8]	@ (80046f4 <USART2_IRQHandler+0x10>)
 80046ea:	f005 fe01 	bl	800a2f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000974 	.word	0x20000974

080046f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80046fc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004700:	f002 fb6a 	bl	8006dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}

08004708 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800470c:	4802      	ldr	r0, [pc, #8]	@ (8004718 <TIM5_IRQHandler+0x10>)
 800470e:	f004 f8af 	bl	8008870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004712:	bf00      	nop
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000644 	.word	0x20000644

0800471c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004720:	4802      	ldr	r0, [pc, #8]	@ (800472c <TIM6_DAC_IRQHandler+0x10>)
 8004722:	f004 f8a5 	bl	8008870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004726:	bf00      	nop
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000710 	.word	0x20000710

08004730 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004734:	4b06      	ldr	r3, [pc, #24]	@ (8004750 <SystemInit+0x20>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473a:	4a05      	ldr	r2, [pc, #20]	@ (8004750 <SystemInit+0x20>)
 800473c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004740:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004744:	bf00      	nop
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	e000ed00 	.word	0xe000ed00

08004754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004754:	480d      	ldr	r0, [pc, #52]	@ (800478c <LoopForever+0x2>)

  mov   sp, r0          /* set stack pointer */
 8004756:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004758:	f7ff ffea 	bl	8004730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800475c:	480c      	ldr	r0, [pc, #48]	@ (8004790 <LoopForever+0x6>)
  ldr r1, =_edata
 800475e:	490d      	ldr	r1, [pc, #52]	@ (8004794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004760:	4a0d      	ldr	r2, [pc, #52]	@ (8004798 <LoopForever+0xe>)
  movs r3, #0
 8004762:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004764:	e002      	b.n	800476c <LoopCopyDataInit>

08004766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800476a:	3304      	adds	r3, #4

0800476c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800476c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800476e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004770:	d3f9      	bcc.n	8004766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004772:	4a0a      	ldr	r2, [pc, #40]	@ (800479c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004774:	4c0a      	ldr	r4, [pc, #40]	@ (80047a0 <LoopForever+0x16>)
  movs r3, #0
 8004776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004778:	e001      	b.n	800477e <LoopFillZerobss>

0800477a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800477a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800477c:	3204      	adds	r2, #4

0800477e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800477e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004780:	d3fb      	bcc.n	800477a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004782:	f007 facb 	bl	800bd1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004786:	f7fc febb 	bl	8001500 <main>

0800478a <LoopForever>:

LoopForever:
    b LoopForever
 800478a:	e7fe      	b.n	800478a <LoopForever>
  ldr   r0, =_estack
 800478c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004794:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8004798:	0800bde8 	.word	0x0800bde8
  ldr r2, =_sbss
 800479c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80047a0:	200013e4 	.word	0x200013e4

080047a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047a4:	e7fe      	b.n	80047a4 <ADC1_2_IRQHandler>

080047a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047b0:	2003      	movs	r0, #3
 80047b2:	f001 fdd3 	bl	800635c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047b6:	2000      	movs	r0, #0
 80047b8:	f000 f80e 	bl	80047d8 <HAL_InitTick>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	71fb      	strb	r3, [r7, #7]
 80047c6:	e001      	b.n	80047cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80047c8:	f7ff fc7c 	bl	80040c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047cc:	79fb      	ldrb	r3, [r7, #7]

}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80047e4:	4b16      	ldr	r3, [pc, #88]	@ (8004840 <HAL_InitTick+0x68>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d022      	beq.n	8004832 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80047ec:	4b15      	ldr	r3, [pc, #84]	@ (8004844 <HAL_InitTick+0x6c>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	4b13      	ldr	r3, [pc, #76]	@ (8004840 <HAL_InitTick+0x68>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80047f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	4618      	mov	r0, r3
 8004802:	f001 fdde 	bl	80063c2 <HAL_SYSTICK_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10f      	bne.n	800482c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b0f      	cmp	r3, #15
 8004810:	d809      	bhi.n	8004826 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004812:	2200      	movs	r2, #0
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	f04f 30ff 	mov.w	r0, #4294967295
 800481a:	f001 fdaa 	bl	8006372 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800481e:	4a0a      	ldr	r2, [pc, #40]	@ (8004848 <HAL_InitTick+0x70>)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e007      	b.n	8004836 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	73fb      	strb	r3, [r7, #15]
 800482a:	e004      	b.n	8004836 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
 8004830:	e001      	b.n	8004836 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000220 	.word	0x20000220
 8004844:	20000218 	.word	0x20000218
 8004848:	2000021c 	.word	0x2000021c

0800484c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004850:	4b05      	ldr	r3, [pc, #20]	@ (8004868 <HAL_IncTick+0x1c>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	4b05      	ldr	r3, [pc, #20]	@ (800486c <HAL_IncTick+0x20>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4413      	add	r3, r2
 800485a:	4a03      	ldr	r2, [pc, #12]	@ (8004868 <HAL_IncTick+0x1c>)
 800485c:	6013      	str	r3, [r2, #0]
}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	200013e0 	.word	0x200013e0
 800486c:	20000220 	.word	0x20000220

08004870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return uwTick;
 8004874:	4b03      	ldr	r3, [pc, #12]	@ (8004884 <HAL_GetTick+0x14>)
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	4618      	mov	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	200013e0 	.word	0x200013e0

08004888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004890:	f7ff ffee 	bl	8004870 <HAL_GetTick>
 8004894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d004      	beq.n	80048ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80048a2:	4b09      	ldr	r3, [pc, #36]	@ (80048c8 <HAL_Delay+0x40>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4413      	add	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048ac:	bf00      	nop
 80048ae:	f7ff ffdf 	bl	8004870 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d8f7      	bhi.n	80048ae <HAL_Delay+0x26>
  {
  }
}
 80048be:	bf00      	nop
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000220 	.word	0x20000220

080048cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	609a      	str	r2, [r3, #8]
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	609a      	str	r2, [r3, #8]
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3360      	adds	r3, #96	@ 0x60
 8004946:	461a      	mov	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <LL_ADC_SetOffset+0x44>)
 8004956:	4013      	ands	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	4313      	orrs	r3, r2
 8004964:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	03fff000 	.word	0x03fff000

0800497c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3360      	adds	r3, #96	@ 0x60
 800498a:	461a      	mov	r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3360      	adds	r3, #96	@ 0x60
 80049b8:	461a      	mov	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80049de:	b480      	push	{r7}
 80049e0:	b087      	sub	sp, #28
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3360      	adds	r3, #96	@ 0x60
 80049ee:	461a      	mov	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004a08:	bf00      	nop
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3360      	adds	r3, #96	@ 0x60
 8004a24:	461a      	mov	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	615a      	str	r2, [r3, #20]
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b087      	sub	sp, #28
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3330      	adds	r3, #48	@ 0x30
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	4413      	add	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	211f      	movs	r1, #31
 8004ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	401a      	ands	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	0e9b      	lsrs	r3, r3, #26
 8004ace:	f003 011f 	and.w	r1, r3, #31
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	431a      	orrs	r2, r3
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b087      	sub	sp, #28
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3314      	adds	r3, #20
 8004afe:	461a      	mov	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	0e5b      	lsrs	r3, r3, #25
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	4413      	add	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	0d1b      	lsrs	r3, r3, #20
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	2107      	movs	r1, #7
 8004b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	401a      	ands	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	0d1b      	lsrs	r3, r3, #20
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b32:	431a      	orrs	r2, r3
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	401a      	ands	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f003 0318 	and.w	r3, r3, #24
 8004b66:	4908      	ldr	r1, [pc, #32]	@ (8004b88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004b68:	40d9      	lsrs	r1, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	400b      	ands	r3, r1
 8004b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b72:	431a      	orrs	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	0007ffff 	.word	0x0007ffff

08004b8c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 031f 	and.w	r3, r3, #31
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004bb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6093      	str	r3, [r2, #8]
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004be0:	d101      	bne.n	8004be6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004c04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c08:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c30:	d101      	bne.n	8004c36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c58:	f043 0201 	orr.w	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c80:	f043 0202 	orr.w	r2, r3, #2
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <LL_ADC_IsEnabled+0x18>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e000      	b.n	8004cae <LL_ADC_IsEnabled+0x1a>
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d101      	bne.n	8004cd2 <LL_ADC_IsDisableOngoing+0x18>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <LL_ADC_IsDisableOngoing+0x1a>
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004cf4:	f043 0204 	orr.w	r2, r3, #4
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d101      	bne.n	8004d20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d101      	bne.n	8004d46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d54:	b590      	push	{r4, r7, lr}
 8004d56:	b089      	sub	sp, #36	@ 0x24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e1a9      	b.n	80050c2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff f9c5 	bl	800410c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff ff19 	bl	8004bcc <LL_ADC_IsDeepPowerDownEnabled>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d004      	beq.n	8004daa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff feff 	bl	8004ba8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff ff34 	bl	8004c1c <LL_ADC_IsInternalRegulatorEnabled>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d115      	bne.n	8004de6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff ff18 	bl	8004bf4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dc4:	4b9c      	ldr	r3, [pc, #624]	@ (8005038 <HAL_ADC_Init+0x2e4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	099b      	lsrs	r3, r3, #6
 8004dca:	4a9c      	ldr	r2, [pc, #624]	@ (800503c <HAL_ADC_Init+0x2e8>)
 8004dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd0:	099b      	lsrs	r3, r3, #6
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004dd8:	e002      	b.n	8004de0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f9      	bne.n	8004dda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff ff16 	bl	8004c1c <LL_ADC_IsInternalRegulatorEnabled>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10d      	bne.n	8004e12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dfa:	f043 0210 	orr.w	r2, r3, #16
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e06:	f043 0201 	orr.w	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff ff76 	bl	8004d08 <LL_ADC_REG_IsConversionOngoing>
 8004e1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f040 8142 	bne.w	80050b0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f040 813e 	bne.w	80050b0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e38:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004e3c:	f043 0202 	orr.w	r2, r3, #2
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff ff23 	bl	8004c94 <LL_ADC_IsEnabled>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d141      	bne.n	8004ed8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e5c:	d004      	beq.n	8004e68 <HAL_ADC_Init+0x114>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a77      	ldr	r2, [pc, #476]	@ (8005040 <HAL_ADC_Init+0x2ec>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d10f      	bne.n	8004e88 <HAL_ADC_Init+0x134>
 8004e68:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004e6c:	f7ff ff12 	bl	8004c94 <LL_ADC_IsEnabled>
 8004e70:	4604      	mov	r4, r0
 8004e72:	4873      	ldr	r0, [pc, #460]	@ (8005040 <HAL_ADC_Init+0x2ec>)
 8004e74:	f7ff ff0e 	bl	8004c94 <LL_ADC_IsEnabled>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	4323      	orrs	r3, r4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bf0c      	ite	eq
 8004e80:	2301      	moveq	r3, #1
 8004e82:	2300      	movne	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	e012      	b.n	8004eae <HAL_ADC_Init+0x15a>
 8004e88:	486e      	ldr	r0, [pc, #440]	@ (8005044 <HAL_ADC_Init+0x2f0>)
 8004e8a:	f7ff ff03 	bl	8004c94 <LL_ADC_IsEnabled>
 8004e8e:	4604      	mov	r4, r0
 8004e90:	486d      	ldr	r0, [pc, #436]	@ (8005048 <HAL_ADC_Init+0x2f4>)
 8004e92:	f7ff feff 	bl	8004c94 <LL_ADC_IsEnabled>
 8004e96:	4603      	mov	r3, r0
 8004e98:	431c      	orrs	r4, r3
 8004e9a:	486c      	ldr	r0, [pc, #432]	@ (800504c <HAL_ADC_Init+0x2f8>)
 8004e9c:	f7ff fefa 	bl	8004c94 <LL_ADC_IsEnabled>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	4323      	orrs	r3, r4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bf0c      	ite	eq
 8004ea8:	2301      	moveq	r3, #1
 8004eaa:	2300      	movne	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d012      	beq.n	8004ed8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004eba:	d004      	beq.n	8004ec6 <HAL_ADC_Init+0x172>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a5f      	ldr	r2, [pc, #380]	@ (8005040 <HAL_ADC_Init+0x2ec>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d101      	bne.n	8004eca <HAL_ADC_Init+0x176>
 8004ec6:	4a62      	ldr	r2, [pc, #392]	@ (8005050 <HAL_ADC_Init+0x2fc>)
 8004ec8:	e000      	b.n	8004ecc <HAL_ADC_Init+0x178>
 8004eca:	4a62      	ldr	r2, [pc, #392]	@ (8005054 <HAL_ADC_Init+0x300>)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f7ff fcfa 	bl	80048cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	7f5b      	ldrb	r3, [r3, #29]
 8004edc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ee2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004ee8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004eee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ef6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d106      	bne.n	8004f14 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	045b      	lsls	r3, r3, #17
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f28:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	4b48      	ldr	r3, [pc, #288]	@ (8005058 <HAL_ADC_Init+0x304>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	69b9      	ldr	r1, [r7, #24]
 8004f40:	430b      	orrs	r3, r1
 8004f42:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fee5 	bl	8004d2e <LL_ADC_INJ_IsConversionOngoing>
 8004f64:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d17f      	bne.n	800506c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d17c      	bne.n	800506c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f76:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f7e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f80:	4313      	orrs	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f8e:	f023 0302 	bic.w	r3, r3, #2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	69b9      	ldr	r1, [r7, #24]
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d017      	beq.n	8004fd4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004fb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004fbc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004fc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6911      	ldr	r1, [r2, #16]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004fd2:	e013      	b.n	8004ffc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004fe2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6812      	ldr	r2, [r2, #0]
 8004ff0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ff4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ff8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005002:	2b01      	cmp	r3, #1
 8005004:	d12a      	bne.n	800505c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005010:	f023 0304 	bic.w	r3, r3, #4
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800501c:	4311      	orrs	r1, r2
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005022:	4311      	orrs	r1, r2
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005028:	430a      	orrs	r2, r1
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0201 	orr.w	r2, r2, #1
 8005034:	611a      	str	r2, [r3, #16]
 8005036:	e019      	b.n	800506c <HAL_ADC_Init+0x318>
 8005038:	20000218 	.word	0x20000218
 800503c:	053e2d63 	.word	0x053e2d63
 8005040:	50000100 	.word	0x50000100
 8005044:	50000400 	.word	0x50000400
 8005048:	50000500 	.word	0x50000500
 800504c:	50000600 	.word	0x50000600
 8005050:	50000300 	.word	0x50000300
 8005054:	50000700 	.word	0x50000700
 8005058:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0201 	bic.w	r2, r2, #1
 800506a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d10c      	bne.n	800508e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507a:	f023 010f 	bic.w	r1, r3, #15
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	1e5a      	subs	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	631a      	str	r2, [r3, #48]	@ 0x30
 800508c:	e007      	b.n	800509e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 020f 	bic.w	r2, r2, #15
 800509c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a2:	f023 0303 	bic.w	r3, r3, #3
 80050a6:	f043 0201 	orr.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80050ae:	e007      	b.n	80050c0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b4:	f043 0210 	orr.w	r2, r3, #16
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80050c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3724      	adds	r7, #36	@ 0x24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd90      	pop	{r4, r7, pc}
 80050ca:	bf00      	nop

080050cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050e0:	d004      	beq.n	80050ec <HAL_ADC_Start_DMA+0x20>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a5a      	ldr	r2, [pc, #360]	@ (8005250 <HAL_ADC_Start_DMA+0x184>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d101      	bne.n	80050f0 <HAL_ADC_Start_DMA+0x24>
 80050ec:	4b59      	ldr	r3, [pc, #356]	@ (8005254 <HAL_ADC_Start_DMA+0x188>)
 80050ee:	e000      	b.n	80050f2 <HAL_ADC_Start_DMA+0x26>
 80050f0:	4b59      	ldr	r3, [pc, #356]	@ (8005258 <HAL_ADC_Start_DMA+0x18c>)
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff fd4a 	bl	8004b8c <LL_ADC_GetMultimode>
 80050f8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff fe02 	bl	8004d08 <LL_ADC_REG_IsConversionOngoing>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	f040 809b 	bne.w	8005242 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_ADC_Start_DMA+0x4e>
 8005116:	2302      	movs	r3, #2
 8005118:	e096      	b.n	8005248 <HAL_ADC_Start_DMA+0x17c>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a4d      	ldr	r2, [pc, #308]	@ (800525c <HAL_ADC_Start_DMA+0x190>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d008      	beq.n	800513e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b05      	cmp	r3, #5
 8005136:	d002      	beq.n	800513e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b09      	cmp	r3, #9
 800513c:	d17a      	bne.n	8005234 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 fcf6 	bl	8005b30 <ADC_Enable>
 8005144:	4603      	mov	r3, r0
 8005146:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005148:	7dfb      	ldrb	r3, [r7, #23]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d16d      	bne.n	800522a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005152:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a3a      	ldr	r2, [pc, #232]	@ (8005250 <HAL_ADC_Start_DMA+0x184>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_ADC_Start_DMA+0xb4>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a3b      	ldr	r2, [pc, #236]	@ (8005260 <HAL_ADC_Start_DMA+0x194>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d002      	beq.n	800517c <HAL_ADC_Start_DMA+0xb0>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	e003      	b.n	8005184 <HAL_ADC_Start_DMA+0xb8>
 800517c:	4b39      	ldr	r3, [pc, #228]	@ (8005264 <HAL_ADC_Start_DMA+0x198>)
 800517e:	e001      	b.n	8005184 <HAL_ADC_Start_DMA+0xb8>
 8005180:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	4293      	cmp	r3, r2
 800518a:	d002      	beq.n	8005192 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d105      	bne.n	800519e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005196:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d006      	beq.n	80051b8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ae:	f023 0206 	bic.w	r2, r3, #6
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80051b6:	e002      	b.n	80051be <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c2:	4a29      	ldr	r2, [pc, #164]	@ (8005268 <HAL_ADC_Start_DMA+0x19c>)
 80051c4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ca:	4a28      	ldr	r2, [pc, #160]	@ (800526c <HAL_ADC_Start_DMA+0x1a0>)
 80051cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d2:	4a27      	ldr	r2, [pc, #156]	@ (8005270 <HAL_ADC_Start_DMA+0x1a4>)
 80051d4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	221c      	movs	r2, #28
 80051dc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0210 	orr.w	r2, r2, #16
 80051f4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3340      	adds	r3, #64	@ 0x40
 8005210:	4619      	mov	r1, r3
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f001 f989 	bl	800652c <HAL_DMA_Start_IT>
 800521a:	4603      	mov	r3, r0
 800521c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff fd5c 	bl	8004ce0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005228:	e00d      	b.n	8005246 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005232:	e008      	b.n	8005246 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005240:	e001      	b.n	8005246 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005242:	2302      	movs	r3, #2
 8005244:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005246:	7dfb      	ldrb	r3, [r7, #23]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	50000100 	.word	0x50000100
 8005254:	50000300 	.word	0x50000300
 8005258:	50000700 	.word	0x50000700
 800525c:	50000600 	.word	0x50000600
 8005260:	50000500 	.word	0x50000500
 8005264:	50000400 	.word	0x50000400
 8005268:	08005d1b 	.word	0x08005d1b
 800526c:	08005df3 	.word	0x08005df3
 8005270:	08005e0f 	.word	0x08005e0f

08005274 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b0b6      	sub	sp, #216	@ 0xd8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80052c0:	2300      	movs	r3, #0
 80052c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d102      	bne.n	80052d4 <HAL_ADC_ConfigChannel+0x24>
 80052ce:	2302      	movs	r3, #2
 80052d0:	f000 bc13 	b.w	8005afa <HAL_ADC_ConfigChannel+0x84a>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff fd11 	bl	8004d08 <LL_ADC_REG_IsConversionOngoing>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f040 83f3 	bne.w	8005ad4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f7ff fbcb 	bl	8004a96 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff fcff 	bl	8004d08 <LL_ADC_REG_IsConversionOngoing>
 800530a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fd0b 	bl	8004d2e <LL_ADC_INJ_IsConversionOngoing>
 8005318:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800531c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005320:	2b00      	cmp	r3, #0
 8005322:	f040 81d9 	bne.w	80056d8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005326:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 81d4 	bne.w	80056d8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005338:	d10f      	bne.n	800535a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2200      	movs	r2, #0
 8005344:	4619      	mov	r1, r3
 8005346:	f7ff fbd2 	bl	8004aee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fb79 	bl	8004a4a <LL_ADC_SetSamplingTimeCommonConfig>
 8005358:	e00e      	b.n	8005378 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	6819      	ldr	r1, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	461a      	mov	r2, r3
 8005368:	f7ff fbc1 	bl	8004aee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2100      	movs	r1, #0
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fb69 	bl	8004a4a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	08db      	lsrs	r3, r3, #3
 8005384:	f003 0303 	and.w	r3, r3, #3
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b04      	cmp	r3, #4
 8005398:	d022      	beq.n	80053e0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6919      	ldr	r1, [r3, #16]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053aa:	f7ff fac3 	bl	8004934 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6919      	ldr	r1, [r3, #16]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f7ff fb0f 	bl	80049de <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d102      	bne.n	80053d6 <HAL_ADC_ConfigChannel+0x126>
 80053d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053d4:	e000      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x128>
 80053d6:	2300      	movs	r3, #0
 80053d8:	461a      	mov	r2, r3
 80053da:	f7ff fb1b 	bl	8004a14 <LL_ADC_SetOffsetSaturation>
 80053de:	e17b      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2100      	movs	r1, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff fac8 	bl	800497c <LL_ADC_GetOffsetChannel>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10a      	bne.n	800540c <HAL_ADC_ConfigChannel+0x15c>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2100      	movs	r1, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff fabd 	bl	800497c <LL_ADC_GetOffsetChannel>
 8005402:	4603      	mov	r3, r0
 8005404:	0e9b      	lsrs	r3, r3, #26
 8005406:	f003 021f 	and.w	r2, r3, #31
 800540a:	e01e      	b.n	800544a <HAL_ADC_ConfigChannel+0x19a>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2100      	movs	r1, #0
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff fab2 	bl	800497c <LL_ADC_GetOffsetChannel>
 8005418:	4603      	mov	r3, r0
 800541a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005422:	fa93 f3a3 	rbit	r3, r3
 8005426:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800542a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800542e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005432:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800543a:	2320      	movs	r3, #32
 800543c:	e004      	b.n	8005448 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800543e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005442:	fab3 f383 	clz	r3, r3
 8005446:	b2db      	uxtb	r3, r3
 8005448:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005452:	2b00      	cmp	r3, #0
 8005454:	d105      	bne.n	8005462 <HAL_ADC_ConfigChannel+0x1b2>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	0e9b      	lsrs	r3, r3, #26
 800545c:	f003 031f 	and.w	r3, r3, #31
 8005460:	e018      	b.n	8005494 <HAL_ADC_ConfigChannel+0x1e4>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800546e:	fa93 f3a3 	rbit	r3, r3
 8005472:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800547a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800547e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005486:	2320      	movs	r3, #32
 8005488:	e004      	b.n	8005494 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800548a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800548e:	fab3 f383 	clz	r3, r3
 8005492:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005494:	429a      	cmp	r2, r3
 8005496:	d106      	bne.n	80054a6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2200      	movs	r2, #0
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff fa81 	bl	80049a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2101      	movs	r1, #1
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff fa65 	bl	800497c <LL_ADC_GetOffsetChannel>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <HAL_ADC_ConfigChannel+0x222>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2101      	movs	r1, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff fa5a 	bl	800497c <LL_ADC_GetOffsetChannel>
 80054c8:	4603      	mov	r3, r0
 80054ca:	0e9b      	lsrs	r3, r3, #26
 80054cc:	f003 021f 	and.w	r2, r3, #31
 80054d0:	e01e      	b.n	8005510 <HAL_ADC_ConfigChannel+0x260>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2101      	movs	r1, #1
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fa4f 	bl	800497c <LL_ADC_GetOffsetChannel>
 80054de:	4603      	mov	r3, r0
 80054e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80054e8:	fa93 f3a3 	rbit	r3, r3
 80054ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80054f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80054f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005500:	2320      	movs	r3, #32
 8005502:	e004      	b.n	800550e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005504:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005508:	fab3 f383 	clz	r3, r3
 800550c:	b2db      	uxtb	r3, r3
 800550e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005518:	2b00      	cmp	r3, #0
 800551a:	d105      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x278>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	0e9b      	lsrs	r3, r3, #26
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	e018      	b.n	800555a <HAL_ADC_ConfigChannel+0x2aa>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005534:	fa93 f3a3 	rbit	r3, r3
 8005538:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800553c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005544:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800554c:	2320      	movs	r3, #32
 800554e:	e004      	b.n	800555a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005554:	fab3 f383 	clz	r3, r3
 8005558:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800555a:	429a      	cmp	r2, r3
 800555c:	d106      	bne.n	800556c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2200      	movs	r2, #0
 8005564:	2101      	movs	r1, #1
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff fa1e 	bl	80049a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2102      	movs	r1, #2
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff fa02 	bl	800497c <LL_ADC_GetOffsetChannel>
 8005578:	4603      	mov	r3, r0
 800557a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10a      	bne.n	8005598 <HAL_ADC_ConfigChannel+0x2e8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2102      	movs	r1, #2
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff f9f7 	bl	800497c <LL_ADC_GetOffsetChannel>
 800558e:	4603      	mov	r3, r0
 8005590:	0e9b      	lsrs	r3, r3, #26
 8005592:	f003 021f 	and.w	r2, r3, #31
 8005596:	e01e      	b.n	80055d6 <HAL_ADC_ConfigChannel+0x326>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2102      	movs	r1, #2
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff f9ec 	bl	800497c <LL_ADC_GetOffsetChannel>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055ae:	fa93 f3a3 	rbit	r3, r3
 80055b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80055b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80055be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80055c6:	2320      	movs	r3, #32
 80055c8:	e004      	b.n	80055d4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80055ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055ce:	fab3 f383 	clz	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d105      	bne.n	80055ee <HAL_ADC_ConfigChannel+0x33e>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	0e9b      	lsrs	r3, r3, #26
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	e016      	b.n	800561c <HAL_ADC_ConfigChannel+0x36c>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055fa:	fa93 f3a3 	rbit	r3, r3
 80055fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005600:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005602:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005606:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800560e:	2320      	movs	r3, #32
 8005610:	e004      	b.n	800561c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005612:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005616:	fab3 f383 	clz	r3, r3
 800561a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800561c:	429a      	cmp	r2, r3
 800561e:	d106      	bne.n	800562e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2200      	movs	r2, #0
 8005626:	2102      	movs	r1, #2
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff f9bd 	bl	80049a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2103      	movs	r1, #3
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff f9a1 	bl	800497c <LL_ADC_GetOffsetChannel>
 800563a:	4603      	mov	r3, r0
 800563c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <HAL_ADC_ConfigChannel+0x3aa>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2103      	movs	r1, #3
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff f996 	bl	800497c <LL_ADC_GetOffsetChannel>
 8005650:	4603      	mov	r3, r0
 8005652:	0e9b      	lsrs	r3, r3, #26
 8005654:	f003 021f 	and.w	r2, r3, #31
 8005658:	e017      	b.n	800568a <HAL_ADC_ConfigChannel+0x3da>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2103      	movs	r1, #3
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff f98b 	bl	800497c <LL_ADC_GetOffsetChannel>
 8005666:	4603      	mov	r3, r0
 8005668:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800566c:	fa93 f3a3 	rbit	r3, r3
 8005670:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005672:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005674:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005676:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800567c:	2320      	movs	r3, #32
 800567e:	e003      	b.n	8005688 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005680:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005682:	fab3 f383 	clz	r3, r3
 8005686:	b2db      	uxtb	r3, r3
 8005688:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005692:	2b00      	cmp	r3, #0
 8005694:	d105      	bne.n	80056a2 <HAL_ADC_ConfigChannel+0x3f2>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	0e9b      	lsrs	r3, r3, #26
 800569c:	f003 031f 	and.w	r3, r3, #31
 80056a0:	e011      	b.n	80056c6 <HAL_ADC_ConfigChannel+0x416>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056aa:	fa93 f3a3 	rbit	r3, r3
 80056ae:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80056b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80056b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80056ba:	2320      	movs	r3, #32
 80056bc:	e003      	b.n	80056c6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80056be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056c0:	fab3 f383 	clz	r3, r3
 80056c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d106      	bne.n	80056d8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	2103      	movs	r1, #3
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff f968 	bl	80049a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff fad9 	bl	8004c94 <LL_ADC_IsEnabled>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f040 813d 	bne.w	8005964 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6819      	ldr	r1, [r3, #0]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	461a      	mov	r2, r3
 80056f8:	f7ff fa24 	bl	8004b44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	4aa2      	ldr	r2, [pc, #648]	@ (800598c <HAL_ADC_ConfigChannel+0x6dc>)
 8005702:	4293      	cmp	r3, r2
 8005704:	f040 812e 	bne.w	8005964 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <HAL_ADC_ConfigChannel+0x480>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	0e9b      	lsrs	r3, r3, #26
 800571e:	3301      	adds	r3, #1
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	2b09      	cmp	r3, #9
 8005726:	bf94      	ite	ls
 8005728:	2301      	movls	r3, #1
 800572a:	2300      	movhi	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	e019      	b.n	8005764 <HAL_ADC_ConfigChannel+0x4b4>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005738:	fa93 f3a3 	rbit	r3, r3
 800573c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800573e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005740:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005742:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005748:	2320      	movs	r3, #32
 800574a:	e003      	b.n	8005754 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800574c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800574e:	fab3 f383 	clz	r3, r3
 8005752:	b2db      	uxtb	r3, r3
 8005754:	3301      	adds	r3, #1
 8005756:	f003 031f 	and.w	r3, r3, #31
 800575a:	2b09      	cmp	r3, #9
 800575c:	bf94      	ite	ls
 800575e:	2301      	movls	r3, #1
 8005760:	2300      	movhi	r3, #0
 8005762:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005764:	2b00      	cmp	r3, #0
 8005766:	d079      	beq.n	800585c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005770:	2b00      	cmp	r3, #0
 8005772:	d107      	bne.n	8005784 <HAL_ADC_ConfigChannel+0x4d4>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	0e9b      	lsrs	r3, r3, #26
 800577a:	3301      	adds	r3, #1
 800577c:	069b      	lsls	r3, r3, #26
 800577e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005782:	e015      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x500>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800578c:	fa93 f3a3 	rbit	r3, r3
 8005790:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005794:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800579c:	2320      	movs	r3, #32
 800579e:	e003      	b.n	80057a8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80057a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057a2:	fab3 f383 	clz	r3, r3
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	3301      	adds	r3, #1
 80057aa:	069b      	lsls	r3, r3, #26
 80057ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d109      	bne.n	80057d0 <HAL_ADC_ConfigChannel+0x520>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	0e9b      	lsrs	r3, r3, #26
 80057c2:	3301      	adds	r3, #1
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	2101      	movs	r1, #1
 80057ca:	fa01 f303 	lsl.w	r3, r1, r3
 80057ce:	e017      	b.n	8005800 <HAL_ADC_ConfigChannel+0x550>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d8:	fa93 f3a3 	rbit	r3, r3
 80057dc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80057de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80057e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80057e8:	2320      	movs	r3, #32
 80057ea:	e003      	b.n	80057f4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80057ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ee:	fab3 f383 	clz	r3, r3
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	3301      	adds	r3, #1
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	2101      	movs	r1, #1
 80057fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005800:	ea42 0103 	orr.w	r1, r2, r3
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <HAL_ADC_ConfigChannel+0x576>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	0e9b      	lsrs	r3, r3, #26
 8005816:	3301      	adds	r3, #1
 8005818:	f003 021f 	and.w	r2, r3, #31
 800581c:	4613      	mov	r3, r2
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	4413      	add	r3, r2
 8005822:	051b      	lsls	r3, r3, #20
 8005824:	e018      	b.n	8005858 <HAL_ADC_ConfigChannel+0x5a8>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582e:	fa93 f3a3 	rbit	r3, r3
 8005832:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800583e:	2320      	movs	r3, #32
 8005840:	e003      	b.n	800584a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005844:	fab3 f383 	clz	r3, r3
 8005848:	b2db      	uxtb	r3, r3
 800584a:	3301      	adds	r3, #1
 800584c:	f003 021f 	and.w	r2, r3, #31
 8005850:	4613      	mov	r3, r2
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	4413      	add	r3, r2
 8005856:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005858:	430b      	orrs	r3, r1
 800585a:	e07e      	b.n	800595a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005864:	2b00      	cmp	r3, #0
 8005866:	d107      	bne.n	8005878 <HAL_ADC_ConfigChannel+0x5c8>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	0e9b      	lsrs	r3, r3, #26
 800586e:	3301      	adds	r3, #1
 8005870:	069b      	lsls	r3, r3, #26
 8005872:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005876:	e015      	b.n	80058a4 <HAL_ADC_ConfigChannel+0x5f4>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005880:	fa93 f3a3 	rbit	r3, r3
 8005884:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005888:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005890:	2320      	movs	r3, #32
 8005892:	e003      	b.n	800589c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005896:	fab3 f383 	clz	r3, r3
 800589a:	b2db      	uxtb	r3, r3
 800589c:	3301      	adds	r3, #1
 800589e:	069b      	lsls	r3, r3, #26
 80058a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d109      	bne.n	80058c4 <HAL_ADC_ConfigChannel+0x614>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	0e9b      	lsrs	r3, r3, #26
 80058b6:	3301      	adds	r3, #1
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	2101      	movs	r1, #1
 80058be:	fa01 f303 	lsl.w	r3, r1, r3
 80058c2:	e017      	b.n	80058f4 <HAL_ADC_ConfigChannel+0x644>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	fa93 f3a3 	rbit	r3, r3
 80058d0:	61fb      	str	r3, [r7, #28]
  return result;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80058dc:	2320      	movs	r3, #32
 80058de:	e003      	b.n	80058e8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	fab3 f383 	clz	r3, r3
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	3301      	adds	r3, #1
 80058ea:	f003 031f 	and.w	r3, r3, #31
 80058ee:	2101      	movs	r1, #1
 80058f0:	fa01 f303 	lsl.w	r3, r1, r3
 80058f4:	ea42 0103 	orr.w	r1, r2, r3
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10d      	bne.n	8005920 <HAL_ADC_ConfigChannel+0x670>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	0e9b      	lsrs	r3, r3, #26
 800590a:	3301      	adds	r3, #1
 800590c:	f003 021f 	and.w	r2, r3, #31
 8005910:	4613      	mov	r3, r2
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	4413      	add	r3, r2
 8005916:	3b1e      	subs	r3, #30
 8005918:	051b      	lsls	r3, r3, #20
 800591a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800591e:	e01b      	b.n	8005958 <HAL_ADC_ConfigChannel+0x6a8>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	fa93 f3a3 	rbit	r3, r3
 800592c:	613b      	str	r3, [r7, #16]
  return result;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005938:	2320      	movs	r3, #32
 800593a:	e003      	b.n	8005944 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	fab3 f383 	clz	r3, r3
 8005942:	b2db      	uxtb	r3, r3
 8005944:	3301      	adds	r3, #1
 8005946:	f003 021f 	and.w	r2, r3, #31
 800594a:	4613      	mov	r3, r2
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	4413      	add	r3, r2
 8005950:	3b1e      	subs	r3, #30
 8005952:	051b      	lsls	r3, r3, #20
 8005954:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005958:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800595e:	4619      	mov	r1, r3
 8005960:	f7ff f8c5 	bl	8004aee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	4b09      	ldr	r3, [pc, #36]	@ (8005990 <HAL_ADC_ConfigChannel+0x6e0>)
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 80be 	beq.w	8005aee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800597a:	d004      	beq.n	8005986 <HAL_ADC_ConfigChannel+0x6d6>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a04      	ldr	r2, [pc, #16]	@ (8005994 <HAL_ADC_ConfigChannel+0x6e4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d10a      	bne.n	800599c <HAL_ADC_ConfigChannel+0x6ec>
 8005986:	4b04      	ldr	r3, [pc, #16]	@ (8005998 <HAL_ADC_ConfigChannel+0x6e8>)
 8005988:	e009      	b.n	800599e <HAL_ADC_ConfigChannel+0x6ee>
 800598a:	bf00      	nop
 800598c:	407f0000 	.word	0x407f0000
 8005990:	80080000 	.word	0x80080000
 8005994:	50000100 	.word	0x50000100
 8005998:	50000300 	.word	0x50000300
 800599c:	4b59      	ldr	r3, [pc, #356]	@ (8005b04 <HAL_ADC_ConfigChannel+0x854>)
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe ffba 	bl	8004918 <LL_ADC_GetCommonPathInternalCh>
 80059a4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a56      	ldr	r2, [pc, #344]	@ (8005b08 <HAL_ADC_ConfigChannel+0x858>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d004      	beq.n	80059bc <HAL_ADC_ConfigChannel+0x70c>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a55      	ldr	r2, [pc, #340]	@ (8005b0c <HAL_ADC_ConfigChannel+0x85c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d13a      	bne.n	8005a32 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80059bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d134      	bne.n	8005a32 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059d0:	d005      	beq.n	80059de <HAL_ADC_ConfigChannel+0x72e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a4e      	ldr	r2, [pc, #312]	@ (8005b10 <HAL_ADC_ConfigChannel+0x860>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	f040 8085 	bne.w	8005ae8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059e6:	d004      	beq.n	80059f2 <HAL_ADC_ConfigChannel+0x742>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a49      	ldr	r2, [pc, #292]	@ (8005b14 <HAL_ADC_ConfigChannel+0x864>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d101      	bne.n	80059f6 <HAL_ADC_ConfigChannel+0x746>
 80059f2:	4a49      	ldr	r2, [pc, #292]	@ (8005b18 <HAL_ADC_ConfigChannel+0x868>)
 80059f4:	e000      	b.n	80059f8 <HAL_ADC_ConfigChannel+0x748>
 80059f6:	4a43      	ldr	r2, [pc, #268]	@ (8005b04 <HAL_ADC_ConfigChannel+0x854>)
 80059f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a00:	4619      	mov	r1, r3
 8005a02:	4610      	mov	r0, r2
 8005a04:	f7fe ff75 	bl	80048f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a08:	4b44      	ldr	r3, [pc, #272]	@ (8005b1c <HAL_ADC_ConfigChannel+0x86c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	099b      	lsrs	r3, r3, #6
 8005a0e:	4a44      	ldr	r2, [pc, #272]	@ (8005b20 <HAL_ADC_ConfigChannel+0x870>)
 8005a10:	fba2 2303 	umull	r2, r3, r2, r3
 8005a14:	099b      	lsrs	r3, r3, #6
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	4613      	mov	r3, r2
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a22:	e002      	b.n	8005a2a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1f9      	bne.n	8005a24 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a30:	e05a      	b.n	8005ae8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a3b      	ldr	r2, [pc, #236]	@ (8005b24 <HAL_ADC_ConfigChannel+0x874>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d125      	bne.n	8005a88 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11f      	bne.n	8005a88 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a31      	ldr	r2, [pc, #196]	@ (8005b14 <HAL_ADC_ConfigChannel+0x864>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d104      	bne.n	8005a5c <HAL_ADC_ConfigChannel+0x7ac>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a34      	ldr	r2, [pc, #208]	@ (8005b28 <HAL_ADC_ConfigChannel+0x878>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d047      	beq.n	8005aec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a64:	d004      	beq.n	8005a70 <HAL_ADC_ConfigChannel+0x7c0>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8005b14 <HAL_ADC_ConfigChannel+0x864>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d101      	bne.n	8005a74 <HAL_ADC_ConfigChannel+0x7c4>
 8005a70:	4a29      	ldr	r2, [pc, #164]	@ (8005b18 <HAL_ADC_ConfigChannel+0x868>)
 8005a72:	e000      	b.n	8005a76 <HAL_ADC_ConfigChannel+0x7c6>
 8005a74:	4a23      	ldr	r2, [pc, #140]	@ (8005b04 <HAL_ADC_ConfigChannel+0x854>)
 8005a76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4610      	mov	r0, r2
 8005a82:	f7fe ff36 	bl	80048f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a86:	e031      	b.n	8005aec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a27      	ldr	r2, [pc, #156]	@ (8005b2c <HAL_ADC_ConfigChannel+0x87c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d12d      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005a92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d127      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b14 <HAL_ADC_ConfigChannel+0x864>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d022      	beq.n	8005aee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ab0:	d004      	beq.n	8005abc <HAL_ADC_ConfigChannel+0x80c>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a17      	ldr	r2, [pc, #92]	@ (8005b14 <HAL_ADC_ConfigChannel+0x864>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d101      	bne.n	8005ac0 <HAL_ADC_ConfigChannel+0x810>
 8005abc:	4a16      	ldr	r2, [pc, #88]	@ (8005b18 <HAL_ADC_ConfigChannel+0x868>)
 8005abe:	e000      	b.n	8005ac2 <HAL_ADC_ConfigChannel+0x812>
 8005ac0:	4a10      	ldr	r2, [pc, #64]	@ (8005b04 <HAL_ADC_ConfigChannel+0x854>)
 8005ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ac6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f7fe ff10 	bl	80048f2 <LL_ADC_SetCommonPathInternalCh>
 8005ad2:	e00c      	b.n	8005aee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad8:	f043 0220 	orr.w	r2, r3, #32
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005ae6:	e002      	b.n	8005aee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ae8:	bf00      	nop
 8005aea:	e000      	b.n	8005aee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005aec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005af6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	37d8      	adds	r7, #216	@ 0xd8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	50000700 	.word	0x50000700
 8005b08:	c3210000 	.word	0xc3210000
 8005b0c:	90c00010 	.word	0x90c00010
 8005b10:	50000600 	.word	0x50000600
 8005b14:	50000100 	.word	0x50000100
 8005b18:	50000300 	.word	0x50000300
 8005b1c:	20000218 	.word	0x20000218
 8005b20:	053e2d63 	.word	0x053e2d63
 8005b24:	c7520000 	.word	0xc7520000
 8005b28:	50000500 	.word	0x50000500
 8005b2c:	cb840000 	.word	0xcb840000

08005b30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff f8a7 	bl	8004c94 <LL_ADC_IsEnabled>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d176      	bne.n	8005c3a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	4b3c      	ldr	r3, [pc, #240]	@ (8005c44 <ADC_Enable+0x114>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00d      	beq.n	8005b76 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b5e:	f043 0210 	orr.w	r2, r3, #16
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b6a:	f043 0201 	orr.w	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e062      	b.n	8005c3c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff f862 	bl	8004c44 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b88:	d004      	beq.n	8005b94 <ADC_Enable+0x64>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a2e      	ldr	r2, [pc, #184]	@ (8005c48 <ADC_Enable+0x118>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d101      	bne.n	8005b98 <ADC_Enable+0x68>
 8005b94:	4b2d      	ldr	r3, [pc, #180]	@ (8005c4c <ADC_Enable+0x11c>)
 8005b96:	e000      	b.n	8005b9a <ADC_Enable+0x6a>
 8005b98:	4b2d      	ldr	r3, [pc, #180]	@ (8005c50 <ADC_Enable+0x120>)
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fe febc 	bl	8004918 <LL_ADC_GetCommonPathInternalCh>
 8005ba0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005ba2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d013      	beq.n	8005bd2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005baa:	4b2a      	ldr	r3, [pc, #168]	@ (8005c54 <ADC_Enable+0x124>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	099b      	lsrs	r3, r3, #6
 8005bb0:	4a29      	ldr	r2, [pc, #164]	@ (8005c58 <ADC_Enable+0x128>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	099b      	lsrs	r3, r3, #6
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	4613      	mov	r3, r2
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005bc4:	e002      	b.n	8005bcc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f9      	bne.n	8005bc6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005bd2:	f7fe fe4d 	bl	8004870 <HAL_GetTick>
 8005bd6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bd8:	e028      	b.n	8005c2c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7ff f858 	bl	8004c94 <LL_ADC_IsEnabled>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d104      	bne.n	8005bf4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff f828 	bl	8004c44 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005bf4:	f7fe fe3c 	bl	8004870 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d914      	bls.n	8005c2c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d00d      	beq.n	8005c2c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c14:	f043 0210 	orr.w	r2, r3, #16
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c20:	f043 0201 	orr.w	r2, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e007      	b.n	8005c3c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d1cf      	bne.n	8005bda <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	8000003f 	.word	0x8000003f
 8005c48:	50000100 	.word	0x50000100
 8005c4c:	50000300 	.word	0x50000300
 8005c50:	50000700 	.word	0x50000700
 8005c54:	20000218 	.word	0x20000218
 8005c58:	053e2d63 	.word	0x053e2d63

08005c5c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff f826 	bl	8004cba <LL_ADC_IsDisableOngoing>
 8005c6e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff f80d 	bl	8004c94 <LL_ADC_IsEnabled>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d047      	beq.n	8005d10 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d144      	bne.n	8005d10 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 030d 	and.w	r3, r3, #13
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d10c      	bne.n	8005cae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe ffe7 	bl	8004c6c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2203      	movs	r2, #3
 8005ca4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005ca6:	f7fe fde3 	bl	8004870 <HAL_GetTick>
 8005caa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005cac:	e029      	b.n	8005d02 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb2:	f043 0210 	orr.w	r2, r3, #16
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cbe:	f043 0201 	orr.w	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e023      	b.n	8005d12 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005cca:	f7fe fdd1 	bl	8004870 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d914      	bls.n	8005d02 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00d      	beq.n	8005d02 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cea:	f043 0210 	orr.w	r2, r3, #16
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf6:	f043 0201 	orr.w	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e007      	b.n	8005d12 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1dc      	bne.n	8005cca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d14b      	bne.n	8005dcc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d38:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d021      	beq.n	8005d92 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe fe8c 	bl	8004a70 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d032      	beq.n	8005dc4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d12b      	bne.n	8005dc4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d11f      	bne.n	8005dc4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d88:	f043 0201 	orr.w	r2, r3, #1
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d90:	e018      	b.n	8005dc4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d111      	bne.n	8005dc4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d105      	bne.n	8005dc4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dbc:	f043 0201 	orr.w	r2, r3, #1
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7ff fa55 	bl	8005274 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005dca:	e00e      	b.n	8005dea <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7ff fa5f 	bl	800529c <HAL_ADC_ErrorCallback>
}
 8005dde:	e004      	b.n	8005dea <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f7ff fa41 	bl	8005288 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e06:	bf00      	nop
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e2c:	f043 0204 	orr.w	r2, r3, #4
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff fa31 	bl	800529c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e3a:	bf00      	nop
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <LL_ADC_IsEnabled>:
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <LL_ADC_IsEnabled+0x18>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <LL_ADC_IsEnabled+0x1a>
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <LL_ADC_StartCalibration>:
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005e7a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	609a      	str	r2, [r3, #8]
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <LL_ADC_IsCalibrationOnGoing>:
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005eae:	d101      	bne.n	8005eb4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e000      	b.n	8005eb6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <LL_ADC_REG_IsConversionOngoing>:
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d101      	bne.n	8005eda <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_ADCEx_Calibration_Start+0x1c>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e04d      	b.n	8005fa0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7ff fea5 	bl	8005c5c <ADC_Disable>
 8005f12:	4603      	mov	r3, r0
 8005f14:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d136      	bne.n	8005f8a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f20:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005f24:	f023 0302 	bic.w	r3, r3, #2
 8005f28:	f043 0202 	orr.w	r2, r3, #2
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6839      	ldr	r1, [r7, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff ff96 	bl	8005e68 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005f3c:	e014      	b.n	8005f68 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	3301      	adds	r3, #1
 8005f42:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4a18      	ldr	r2, [pc, #96]	@ (8005fa8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d90d      	bls.n	8005f68 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f50:	f023 0312 	bic.w	r3, r3, #18
 8005f54:	f043 0210 	orr.w	r2, r3, #16
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e01b      	b.n	8005fa0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff ff94 	bl	8005e9a <LL_ADC_IsCalibrationOnGoing>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e2      	bne.n	8005f3e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f7c:	f023 0303 	bic.w	r3, r3, #3
 8005f80:	f043 0201 	orr.w	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f88:	e005      	b.n	8005f96 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f8e:	f043 0210 	orr.w	r2, r3, #16
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	0004de01 	.word	0x0004de01

08005fac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005fac:	b590      	push	{r4, r7, lr}
 8005fae:	b0a1      	sub	sp, #132	@ 0x84
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e0e7      	b.n	800619a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fe2:	d102      	bne.n	8005fea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80061a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fe6:	60bb      	str	r3, [r7, #8]
 8005fe8:	e009      	b.n	8005ffe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a6e      	ldr	r2, [pc, #440]	@ (80061a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d102      	bne.n	8005ffa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005ff4:	4b6d      	ldr	r3, [pc, #436]	@ (80061ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005ff6:	60bb      	str	r3, [r7, #8]
 8005ff8:	e001      	b.n	8005ffe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10b      	bne.n	800601c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006008:	f043 0220 	orr.w	r2, r3, #32
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e0be      	b.n	800619a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff ff4f 	bl	8005ec2 <LL_ADC_REG_IsConversionOngoing>
 8006024:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff ff49 	bl	8005ec2 <LL_ADC_REG_IsConversionOngoing>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	f040 80a0 	bne.w	8006178 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006038:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800603a:	2b00      	cmp	r3, #0
 800603c:	f040 809c 	bne.w	8006178 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006048:	d004      	beq.n	8006054 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a55      	ldr	r2, [pc, #340]	@ (80061a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d101      	bne.n	8006058 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006054:	4b56      	ldr	r3, [pc, #344]	@ (80061b0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006056:	e000      	b.n	800605a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006058:	4b56      	ldr	r3, [pc, #344]	@ (80061b4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800605a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d04b      	beq.n	80060fc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006064:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	6859      	ldr	r1, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006076:	035b      	lsls	r3, r3, #13
 8006078:	430b      	orrs	r3, r1
 800607a:	431a      	orrs	r2, r3
 800607c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800607e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006088:	d004      	beq.n	8006094 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a45      	ldr	r2, [pc, #276]	@ (80061a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d10f      	bne.n	80060b4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006094:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006098:	f7ff fed3 	bl	8005e42 <LL_ADC_IsEnabled>
 800609c:	4604      	mov	r4, r0
 800609e:	4841      	ldr	r0, [pc, #260]	@ (80061a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80060a0:	f7ff fecf 	bl	8005e42 <LL_ADC_IsEnabled>
 80060a4:	4603      	mov	r3, r0
 80060a6:	4323      	orrs	r3, r4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	bf0c      	ite	eq
 80060ac:	2301      	moveq	r3, #1
 80060ae:	2300      	movne	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	e012      	b.n	80060da <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80060b4:	483c      	ldr	r0, [pc, #240]	@ (80061a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80060b6:	f7ff fec4 	bl	8005e42 <LL_ADC_IsEnabled>
 80060ba:	4604      	mov	r4, r0
 80060bc:	483b      	ldr	r0, [pc, #236]	@ (80061ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80060be:	f7ff fec0 	bl	8005e42 <LL_ADC_IsEnabled>
 80060c2:	4603      	mov	r3, r0
 80060c4:	431c      	orrs	r4, r3
 80060c6:	483c      	ldr	r0, [pc, #240]	@ (80061b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80060c8:	f7ff febb 	bl	8005e42 <LL_ADC_IsEnabled>
 80060cc:	4603      	mov	r3, r0
 80060ce:	4323      	orrs	r3, r4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bf0c      	ite	eq
 80060d4:	2301      	moveq	r3, #1
 80060d6:	2300      	movne	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d056      	beq.n	800618c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80060de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80060e6:	f023 030f 	bic.w	r3, r3, #15
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	6811      	ldr	r1, [r2, #0]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	6892      	ldr	r2, [r2, #8]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	431a      	orrs	r2, r3
 80060f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060f8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80060fa:	e047      	b.n	800618c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80060fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006104:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006106:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006110:	d004      	beq.n	800611c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a23      	ldr	r2, [pc, #140]	@ (80061a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d10f      	bne.n	800613c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800611c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006120:	f7ff fe8f 	bl	8005e42 <LL_ADC_IsEnabled>
 8006124:	4604      	mov	r4, r0
 8006126:	481f      	ldr	r0, [pc, #124]	@ (80061a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006128:	f7ff fe8b 	bl	8005e42 <LL_ADC_IsEnabled>
 800612c:	4603      	mov	r3, r0
 800612e:	4323      	orrs	r3, r4
 8006130:	2b00      	cmp	r3, #0
 8006132:	bf0c      	ite	eq
 8006134:	2301      	moveq	r3, #1
 8006136:	2300      	movne	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	e012      	b.n	8006162 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800613c:	481a      	ldr	r0, [pc, #104]	@ (80061a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800613e:	f7ff fe80 	bl	8005e42 <LL_ADC_IsEnabled>
 8006142:	4604      	mov	r4, r0
 8006144:	4819      	ldr	r0, [pc, #100]	@ (80061ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006146:	f7ff fe7c 	bl	8005e42 <LL_ADC_IsEnabled>
 800614a:	4603      	mov	r3, r0
 800614c:	431c      	orrs	r4, r3
 800614e:	481a      	ldr	r0, [pc, #104]	@ (80061b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006150:	f7ff fe77 	bl	8005e42 <LL_ADC_IsEnabled>
 8006154:	4603      	mov	r3, r0
 8006156:	4323      	orrs	r3, r4
 8006158:	2b00      	cmp	r3, #0
 800615a:	bf0c      	ite	eq
 800615c:	2301      	moveq	r3, #1
 800615e:	2300      	movne	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d012      	beq.n	800618c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006166:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800616e:	f023 030f 	bic.w	r3, r3, #15
 8006172:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006174:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006176:	e009      	b.n	800618c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800617c:	f043 0220 	orr.w	r2, r3, #32
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800618a:	e000      	b.n	800618e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800618c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006196:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800619a:	4618      	mov	r0, r3
 800619c:	3784      	adds	r7, #132	@ 0x84
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd90      	pop	{r4, r7, pc}
 80061a2:	bf00      	nop
 80061a4:	50000100 	.word	0x50000100
 80061a8:	50000400 	.word	0x50000400
 80061ac:	50000500 	.word	0x50000500
 80061b0:	50000300 	.word	0x50000300
 80061b4:	50000700 	.word	0x50000700
 80061b8:	50000600 	.word	0x50000600

080061bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006200 <__NVIC_SetPriorityGrouping+0x44>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80061d8:	4013      	ands	r3, r2
 80061da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80061e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061ee:	4a04      	ldr	r2, [pc, #16]	@ (8006200 <__NVIC_SetPriorityGrouping+0x44>)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	60d3      	str	r3, [r2, #12]
}
 80061f4:	bf00      	nop
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	e000ed00 	.word	0xe000ed00

08006204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006208:	4b04      	ldr	r3, [pc, #16]	@ (800621c <__NVIC_GetPriorityGrouping+0x18>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	0a1b      	lsrs	r3, r3, #8
 800620e:	f003 0307 	and.w	r3, r3, #7
}
 8006212:	4618      	mov	r0, r3
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	e000ed00 	.word	0xe000ed00

08006220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800622a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800622e:	2b00      	cmp	r3, #0
 8006230:	db0b      	blt.n	800624a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	f003 021f 	and.w	r2, r3, #31
 8006238:	4907      	ldr	r1, [pc, #28]	@ (8006258 <__NVIC_EnableIRQ+0x38>)
 800623a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	2001      	movs	r0, #1
 8006242:	fa00 f202 	lsl.w	r2, r0, r2
 8006246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	e000e100 	.word	0xe000e100

0800625c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	6039      	str	r1, [r7, #0]
 8006266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800626c:	2b00      	cmp	r3, #0
 800626e:	db0a      	blt.n	8006286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	b2da      	uxtb	r2, r3
 8006274:	490c      	ldr	r1, [pc, #48]	@ (80062a8 <__NVIC_SetPriority+0x4c>)
 8006276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800627a:	0112      	lsls	r2, r2, #4
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	440b      	add	r3, r1
 8006280:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006284:	e00a      	b.n	800629c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	b2da      	uxtb	r2, r3
 800628a:	4908      	ldr	r1, [pc, #32]	@ (80062ac <__NVIC_SetPriority+0x50>)
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	3b04      	subs	r3, #4
 8006294:	0112      	lsls	r2, r2, #4
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	440b      	add	r3, r1
 800629a:	761a      	strb	r2, [r3, #24]
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	e000e100 	.word	0xe000e100
 80062ac:	e000ed00 	.word	0xe000ed00

080062b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b089      	sub	sp, #36	@ 0x24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f1c3 0307 	rsb	r3, r3, #7
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	bf28      	it	cs
 80062ce:	2304      	movcs	r3, #4
 80062d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	3304      	adds	r3, #4
 80062d6:	2b06      	cmp	r3, #6
 80062d8:	d902      	bls.n	80062e0 <NVIC_EncodePriority+0x30>
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	3b03      	subs	r3, #3
 80062de:	e000      	b.n	80062e2 <NVIC_EncodePriority+0x32>
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062e4:	f04f 32ff 	mov.w	r2, #4294967295
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	43da      	mvns	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	401a      	ands	r2, r3
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062f8:	f04f 31ff 	mov.w	r1, #4294967295
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006302:	43d9      	mvns	r1, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006308:	4313      	orrs	r3, r2
         );
}
 800630a:	4618      	mov	r0, r3
 800630c:	3724      	adds	r7, #36	@ 0x24
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3b01      	subs	r3, #1
 8006324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006328:	d301      	bcc.n	800632e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800632a:	2301      	movs	r3, #1
 800632c:	e00f      	b.n	800634e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800632e:	4a0a      	ldr	r2, [pc, #40]	@ (8006358 <SysTick_Config+0x40>)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3b01      	subs	r3, #1
 8006334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006336:	210f      	movs	r1, #15
 8006338:	f04f 30ff 	mov.w	r0, #4294967295
 800633c:	f7ff ff8e 	bl	800625c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006340:	4b05      	ldr	r3, [pc, #20]	@ (8006358 <SysTick_Config+0x40>)
 8006342:	2200      	movs	r2, #0
 8006344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006346:	4b04      	ldr	r3, [pc, #16]	@ (8006358 <SysTick_Config+0x40>)
 8006348:	2207      	movs	r2, #7
 800634a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	e000e010 	.word	0xe000e010

0800635c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff ff29 	bl	80061bc <__NVIC_SetPriorityGrouping>
}
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b086      	sub	sp, #24
 8006376:	af00      	add	r7, sp, #0
 8006378:	4603      	mov	r3, r0
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	607a      	str	r2, [r7, #4]
 800637e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006380:	f7ff ff40 	bl	8006204 <__NVIC_GetPriorityGrouping>
 8006384:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	6978      	ldr	r0, [r7, #20]
 800638c:	f7ff ff90 	bl	80062b0 <NVIC_EncodePriority>
 8006390:	4602      	mov	r2, r0
 8006392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006396:	4611      	mov	r1, r2
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff ff5f 	bl	800625c <__NVIC_SetPriority>
}
 800639e:	bf00      	nop
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	4603      	mov	r3, r0
 80063ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff ff33 	bl	8006220 <__NVIC_EnableIRQ>
}
 80063ba:	bf00      	nop
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff ffa4 	bl	8006318 <SysTick_Config>
 80063d0:	4603      	mov	r3, r0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e08d      	b.n	800650a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	4b47      	ldr	r3, [pc, #284]	@ (8006514 <HAL_DMA_Init+0x138>)
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d80f      	bhi.n	800641a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	4b45      	ldr	r3, [pc, #276]	@ (8006518 <HAL_DMA_Init+0x13c>)
 8006402:	4413      	add	r3, r2
 8006404:	4a45      	ldr	r2, [pc, #276]	@ (800651c <HAL_DMA_Init+0x140>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	091b      	lsrs	r3, r3, #4
 800640c:	009a      	lsls	r2, r3, #2
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a42      	ldr	r2, [pc, #264]	@ (8006520 <HAL_DMA_Init+0x144>)
 8006416:	641a      	str	r2, [r3, #64]	@ 0x40
 8006418:	e00e      	b.n	8006438 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	4b40      	ldr	r3, [pc, #256]	@ (8006524 <HAL_DMA_Init+0x148>)
 8006422:	4413      	add	r3, r2
 8006424:	4a3d      	ldr	r2, [pc, #244]	@ (800651c <HAL_DMA_Init+0x140>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	091b      	lsrs	r3, r3, #4
 800642c:	009a      	lsls	r2, r3, #2
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a3c      	ldr	r2, [pc, #240]	@ (8006528 <HAL_DMA_Init+0x14c>)
 8006436:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800644e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006452:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800645c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006468:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006474:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa76 	bl	800697c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006498:	d102      	bne.n	80064a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d010      	beq.n	80064e0 <HAL_DMA_Init+0x104>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d80c      	bhi.n	80064e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fa96 	bl	80069f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80064dc:	605a      	str	r2, [r3, #4]
 80064de:	e008      	b.n	80064f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	40020407 	.word	0x40020407
 8006518:	bffdfff8 	.word	0xbffdfff8
 800651c:	cccccccd 	.word	0xcccccccd
 8006520:	40020000 	.word	0x40020000
 8006524:	bffdfbf8 	.word	0xbffdfbf8
 8006528:	40020400 	.word	0x40020400

0800652c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_DMA_Start_IT+0x20>
 8006548:	2302      	movs	r3, #2
 800654a:	e066      	b.n	800661a <HAL_DMA_Start_IT+0xee>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b01      	cmp	r3, #1
 800655e:	d155      	bne.n	800660c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	68b9      	ldr	r1, [r7, #8]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f9bb 	bl	8006900 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658e:	2b00      	cmp	r3, #0
 8006590:	d008      	beq.n	80065a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 020e 	orr.w	r2, r2, #14
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	e00f      	b.n	80065c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0204 	bic.w	r2, r2, #4
 80065b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f042 020a 	orr.w	r2, r2, #10
 80065c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0201 	orr.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	e005      	b.n	8006618 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006614:	2302      	movs	r3, #2
 8006616:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006618:	7dfb      	ldrb	r3, [r7, #23]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d005      	beq.n	8006646 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2204      	movs	r2, #4
 800663e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	73fb      	strb	r3, [r7, #15]
 8006644:	e037      	b.n	80066b6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 020e 	bic.w	r2, r2, #14
 8006654:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006660:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006664:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0201 	bic.w	r2, r2, #1
 8006674:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800667a:	f003 021f 	and.w	r2, r3, #31
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006682:	2101      	movs	r1, #1
 8006684:	fa01 f202 	lsl.w	r2, r1, r2
 8006688:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006692:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00c      	beq.n	80066b6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066aa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80066b4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d00d      	beq.n	8006708 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2204      	movs	r2, #4
 80066f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	73fb      	strb	r3, [r7, #15]
 8006706:	e047      	b.n	8006798 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 020e 	bic.w	r2, r2, #14
 8006716:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0201 	bic.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006732:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006736:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800673c:	f003 021f 	and.w	r2, r3, #31
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006744:	2101      	movs	r1, #1
 8006746:	fa01 f202 	lsl.w	r2, r1, r2
 800674a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006754:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00c      	beq.n	8006778 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006768:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800676c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006776:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
    }
  }
  return status;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067be:	f003 031f 	and.w	r3, r3, #31
 80067c2:	2204      	movs	r2, #4
 80067c4:	409a      	lsls	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d026      	beq.n	800681c <HAL_DMA_IRQHandler+0x7a>
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d021      	beq.n	800681c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d107      	bne.n	80067f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 0204 	bic.w	r2, r2, #4
 80067f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fa:	f003 021f 	and.w	r2, r3, #31
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006802:	2104      	movs	r1, #4
 8006804:	fa01 f202 	lsl.w	r2, r1, r2
 8006808:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800680e:	2b00      	cmp	r3, #0
 8006810:	d071      	beq.n	80068f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800681a:	e06c      	b.n	80068f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	2202      	movs	r2, #2
 8006826:	409a      	lsls	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4013      	ands	r3, r2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d02e      	beq.n	800688e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d029      	beq.n	800688e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10b      	bne.n	8006860 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 020a 	bic.w	r2, r2, #10
 8006856:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006864:	f003 021f 	and.w	r2, r3, #31
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686c:	2102      	movs	r1, #2
 800686e:	fa01 f202 	lsl.w	r2, r1, r2
 8006872:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006880:	2b00      	cmp	r3, #0
 8006882:	d038      	beq.n	80068f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800688c:	e033      	b.n	80068f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	f003 031f 	and.w	r3, r3, #31
 8006896:	2208      	movs	r2, #8
 8006898:	409a      	lsls	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4013      	ands	r3, r2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d02a      	beq.n	80068f8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d025      	beq.n	80068f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 020e 	bic.w	r2, r2, #14
 80068ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c0:	f003 021f 	and.w	r2, r3, #31
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c8:	2101      	movs	r1, #1
 80068ca:	fa01 f202 	lsl.w	r2, r1, r2
 80068ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d004      	beq.n	80068f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80068f6:	bf00      	nop
 80068f8:	bf00      	nop
}
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006916:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006928:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692e:	f003 021f 	and.w	r2, r3, #31
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006936:	2101      	movs	r1, #1
 8006938:	fa01 f202 	lsl.w	r2, r1, r2
 800693c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	2b10      	cmp	r3, #16
 800694c:	d108      	bne.n	8006960 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800695e:	e007      	b.n	8006970 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	60da      	str	r2, [r3, #12]
}
 8006970:	bf00      	nop
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	4b16      	ldr	r3, [pc, #88]	@ (80069e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800698c:	429a      	cmp	r2, r3
 800698e:	d802      	bhi.n	8006996 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006990:	4b15      	ldr	r3, [pc, #84]	@ (80069e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	e001      	b.n	800699a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006996:	4b15      	ldr	r3, [pc, #84]	@ (80069ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006998:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	3b08      	subs	r3, #8
 80069a6:	4a12      	ldr	r2, [pc, #72]	@ (80069f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80069a8:	fba2 2303 	umull	r2, r3, r2, r3
 80069ac:	091b      	lsrs	r3, r3, #4
 80069ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b4:	089b      	lsrs	r3, r3, #2
 80069b6:	009a      	lsls	r2, r3, #2
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	4413      	add	r3, r2
 80069bc:	461a      	mov	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a0b      	ldr	r2, [pc, #44]	@ (80069f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80069c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f003 031f 	and.w	r3, r3, #31
 80069ce:	2201      	movs	r2, #1
 80069d0:	409a      	lsls	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80069d6:	bf00      	nop
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40020407 	.word	0x40020407
 80069e8:	40020800 	.word	0x40020800
 80069ec:	40020820 	.word	0x40020820
 80069f0:	cccccccd 	.word	0xcccccccd
 80069f4:	40020880 	.word	0x40020880

080069f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	461a      	mov	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a08      	ldr	r2, [pc, #32]	@ (8006a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006a1a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	f003 031f 	and.w	r3, r3, #31
 8006a24:	2201      	movs	r2, #1
 8006a26:	409a      	lsls	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	1000823f 	.word	0x1000823f
 8006a3c:	40020940 	.word	0x40020940

08006a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006a4e:	e15a      	b.n	8006d06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	2101      	movs	r1, #1
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 814c 	beq.w	8006d00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d005      	beq.n	8006a80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d130      	bne.n	8006ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	43db      	mvns	r3, r3
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	4013      	ands	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	fa02 f303 	lsl.w	r3, r2, r3
 8006abe:	43db      	mvns	r3, r3
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	091b      	lsrs	r3, r3, #4
 8006acc:	f003 0201 	and.w	r2, r3, #1
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d017      	beq.n	8006b1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	2203      	movs	r2, #3
 8006afa:	fa02 f303 	lsl.w	r3, r2, r3
 8006afe:	43db      	mvns	r3, r3
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4013      	ands	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d123      	bne.n	8006b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	08da      	lsrs	r2, r3, #3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3208      	adds	r2, #8
 8006b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	220f      	movs	r2, #15
 8006b42:	fa02 f303 	lsl.w	r3, r2, r3
 8006b46:	43db      	mvns	r3, r3
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	691a      	ldr	r2, [r3, #16]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	08da      	lsrs	r2, r3, #3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3208      	adds	r2, #8
 8006b6c:	6939      	ldr	r1, [r7, #16]
 8006b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	2203      	movs	r2, #3
 8006b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b82:	43db      	mvns	r3, r3
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	4013      	ands	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f003 0203 	and.w	r2, r3, #3
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 80a6 	beq.w	8006d00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8006d24 <HAL_GPIO_Init+0x2e4>)
 8006bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bb8:	4a5a      	ldr	r2, [pc, #360]	@ (8006d24 <HAL_GPIO_Init+0x2e4>)
 8006bba:	f043 0301 	orr.w	r3, r3, #1
 8006bbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8006bc0:	4b58      	ldr	r3, [pc, #352]	@ (8006d24 <HAL_GPIO_Init+0x2e4>)
 8006bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	60bb      	str	r3, [r7, #8]
 8006bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bcc:	4a56      	ldr	r2, [pc, #344]	@ (8006d28 <HAL_GPIO_Init+0x2e8>)
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	089b      	lsrs	r3, r3, #2
 8006bd2:	3302      	adds	r3, #2
 8006bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	220f      	movs	r2, #15
 8006be4:	fa02 f303 	lsl.w	r3, r2, r3
 8006be8:	43db      	mvns	r3, r3
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4013      	ands	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006bf6:	d01f      	beq.n	8006c38 <HAL_GPIO_Init+0x1f8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a4c      	ldr	r2, [pc, #304]	@ (8006d2c <HAL_GPIO_Init+0x2ec>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d019      	beq.n	8006c34 <HAL_GPIO_Init+0x1f4>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a4b      	ldr	r2, [pc, #300]	@ (8006d30 <HAL_GPIO_Init+0x2f0>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d013      	beq.n	8006c30 <HAL_GPIO_Init+0x1f0>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a4a      	ldr	r2, [pc, #296]	@ (8006d34 <HAL_GPIO_Init+0x2f4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00d      	beq.n	8006c2c <HAL_GPIO_Init+0x1ec>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a49      	ldr	r2, [pc, #292]	@ (8006d38 <HAL_GPIO_Init+0x2f8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d007      	beq.n	8006c28 <HAL_GPIO_Init+0x1e8>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a48      	ldr	r2, [pc, #288]	@ (8006d3c <HAL_GPIO_Init+0x2fc>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d101      	bne.n	8006c24 <HAL_GPIO_Init+0x1e4>
 8006c20:	2305      	movs	r3, #5
 8006c22:	e00a      	b.n	8006c3a <HAL_GPIO_Init+0x1fa>
 8006c24:	2306      	movs	r3, #6
 8006c26:	e008      	b.n	8006c3a <HAL_GPIO_Init+0x1fa>
 8006c28:	2304      	movs	r3, #4
 8006c2a:	e006      	b.n	8006c3a <HAL_GPIO_Init+0x1fa>
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e004      	b.n	8006c3a <HAL_GPIO_Init+0x1fa>
 8006c30:	2302      	movs	r3, #2
 8006c32:	e002      	b.n	8006c3a <HAL_GPIO_Init+0x1fa>
 8006c34:	2301      	movs	r3, #1
 8006c36:	e000      	b.n	8006c3a <HAL_GPIO_Init+0x1fa>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	f002 0203 	and.w	r2, r2, #3
 8006c40:	0092      	lsls	r2, r2, #2
 8006c42:	4093      	lsls	r3, r2
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c4a:	4937      	ldr	r1, [pc, #220]	@ (8006d28 <HAL_GPIO_Init+0x2e8>)
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	089b      	lsrs	r3, r3, #2
 8006c50:	3302      	adds	r3, #2
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c58:	4b39      	ldr	r3, [pc, #228]	@ (8006d40 <HAL_GPIO_Init+0x300>)
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	43db      	mvns	r3, r3
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4013      	ands	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006c7c:	4a30      	ldr	r2, [pc, #192]	@ (8006d40 <HAL_GPIO_Init+0x300>)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006c82:	4b2f      	ldr	r3, [pc, #188]	@ (8006d40 <HAL_GPIO_Init+0x300>)
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006ca6:	4a26      	ldr	r2, [pc, #152]	@ (8006d40 <HAL_GPIO_Init+0x300>)
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006cac:	4b24      	ldr	r3, [pc, #144]	@ (8006d40 <HAL_GPIO_Init+0x300>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	43db      	mvns	r3, r3
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d40 <HAL_GPIO_Init+0x300>)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8006d40 <HAL_GPIO_Init+0x300>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	43db      	mvns	r3, r3
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006cfa:	4a11      	ldr	r2, [pc, #68]	@ (8006d40 <HAL_GPIO_Init+0x300>)
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	3301      	adds	r3, #1
 8006d04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f47f ae9d 	bne.w	8006a50 <HAL_GPIO_Init+0x10>
  }
}
 8006d16:	bf00      	nop
 8006d18:	bf00      	nop
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	40021000 	.word	0x40021000
 8006d28:	40010000 	.word	0x40010000
 8006d2c:	48000400 	.word	0x48000400
 8006d30:	48000800 	.word	0x48000800
 8006d34:	48000c00 	.word	0x48000c00
 8006d38:	48001000 	.word	0x48001000
 8006d3c:	48001400 	.word	0x48001400
 8006d40:	40010400 	.word	0x40010400

08006d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	887b      	ldrh	r3, [r7, #2]
 8006d56:	4013      	ands	r3, r2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	73fb      	strb	r3, [r7, #15]
 8006d60:	e001      	b.n	8006d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	807b      	strh	r3, [r7, #2]
 8006d80:	4613      	mov	r3, r2
 8006d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d84:	787b      	ldrb	r3, [r7, #1]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006d8a:	887a      	ldrh	r2, [r7, #2]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006d90:	e002      	b.n	8006d98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006d92:	887a      	ldrh	r2, [r7, #2]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006db6:	887a      	ldrh	r2, [r7, #2]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	041a      	lsls	r2, r3, #16
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	43d9      	mvns	r1, r3
 8006dc2:	887b      	ldrh	r3, [r7, #2]
 8006dc4:	400b      	ands	r3, r1
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	619a      	str	r2, [r3, #24]
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006de2:	4b08      	ldr	r3, [pc, #32]	@ (8006e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	4013      	ands	r3, r2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d006      	beq.n	8006dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006dee:	4a05      	ldr	r2, [pc, #20]	@ (8006e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006df0:	88fb      	ldrh	r3, [r7, #6]
 8006df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006df4:	88fb      	ldrh	r3, [r7, #6]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fd f94a 	bl	8004090 <HAL_GPIO_EXTI_Callback>
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	40010400 	.word	0x40010400

08006e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d141      	bne.n	8006e9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e16:	4b4b      	ldr	r3, [pc, #300]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e22:	d131      	bne.n	8006e88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e24:	4b47      	ldr	r3, [pc, #284]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e2a:	4a46      	ldr	r2, [pc, #280]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e34:	4b43      	ldr	r3, [pc, #268]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e3c:	4a41      	ldr	r2, [pc, #260]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e44:	4b40      	ldr	r3, [pc, #256]	@ (8006f48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2232      	movs	r2, #50	@ 0x32
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	4a3f      	ldr	r2, [pc, #252]	@ (8006f4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e50:	fba2 2303 	umull	r2, r3, r2, r3
 8006e54:	0c9b      	lsrs	r3, r3, #18
 8006e56:	3301      	adds	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e5a:	e002      	b.n	8006e62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e62:	4b38      	ldr	r3, [pc, #224]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e6e:	d102      	bne.n	8006e76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f2      	bne.n	8006e5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e76:	4b33      	ldr	r3, [pc, #204]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e82:	d158      	bne.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e057      	b.n	8006f38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e88:	4b2e      	ldr	r3, [pc, #184]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006e98:	e04d      	b.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ea0:	d141      	bne.n	8006f26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ea2:	4b28      	ldr	r3, [pc, #160]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eae:	d131      	bne.n	8006f14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006eb0:	4b24      	ldr	r3, [pc, #144]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eb6:	4a23      	ldr	r2, [pc, #140]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ebc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ec0:	4b20      	ldr	r3, [pc, #128]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ece:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2232      	movs	r2, #50	@ 0x32
 8006ed6:	fb02 f303 	mul.w	r3, r2, r3
 8006eda:	4a1c      	ldr	r2, [pc, #112]	@ (8006f4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006edc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee0:	0c9b      	lsrs	r3, r3, #18
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ee6:	e002      	b.n	8006eee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eee:	4b15      	ldr	r3, [pc, #84]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006efa:	d102      	bne.n	8006f02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1f2      	bne.n	8006ee8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f02:	4b10      	ldr	r3, [pc, #64]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f0e:	d112      	bne.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e011      	b.n	8006f38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f14:	4b0b      	ldr	r3, [pc, #44]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f24:	e007      	b.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f26:	4b07      	ldr	r3, [pc, #28]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f2e:	4a05      	ldr	r2, [pc, #20]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	40007000 	.word	0x40007000
 8006f48:	20000218 	.word	0x20000218
 8006f4c:	431bde83 	.word	0x431bde83

08006f50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006f54:	4b05      	ldr	r3, [pc, #20]	@ (8006f6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	4a04      	ldr	r2, [pc, #16]	@ (8006f6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f5e:	6093      	str	r3, [r2, #8]
}
 8006f60:	bf00      	nop
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40007000 	.word	0x40007000

08006f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e2fe      	b.n	8007580 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d075      	beq.n	800707a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f8e:	4b97      	ldr	r3, [pc, #604]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f003 030c 	and.w	r3, r3, #12
 8006f96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f98:	4b94      	ldr	r3, [pc, #592]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f003 0303 	and.w	r3, r3, #3
 8006fa0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b0c      	cmp	r3, #12
 8006fa6:	d102      	bne.n	8006fae <HAL_RCC_OscConfig+0x3e>
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d002      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x44>
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d10b      	bne.n	8006fcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fb4:	4b8d      	ldr	r3, [pc, #564]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d05b      	beq.n	8007078 <HAL_RCC_OscConfig+0x108>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d157      	bne.n	8007078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e2d9      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fd4:	d106      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x74>
 8006fd6:	4b85      	ldr	r3, [pc, #532]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a84      	ldr	r2, [pc, #528]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	e01d      	b.n	8007020 <HAL_RCC_OscConfig+0xb0>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fec:	d10c      	bne.n	8007008 <HAL_RCC_OscConfig+0x98>
 8006fee:	4b7f      	ldr	r3, [pc, #508]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a7e      	ldr	r2, [pc, #504]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	4b7c      	ldr	r3, [pc, #496]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a7b      	ldr	r2, [pc, #492]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	e00b      	b.n	8007020 <HAL_RCC_OscConfig+0xb0>
 8007008:	4b78      	ldr	r3, [pc, #480]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a77      	ldr	r2, [pc, #476]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800700e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007012:	6013      	str	r3, [r2, #0]
 8007014:	4b75      	ldr	r3, [pc, #468]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a74      	ldr	r2, [pc, #464]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800701a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800701e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d013      	beq.n	8007050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007028:	f7fd fc22 	bl	8004870 <HAL_GetTick>
 800702c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800702e:	e008      	b.n	8007042 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007030:	f7fd fc1e 	bl	8004870 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b64      	cmp	r3, #100	@ 0x64
 800703c:	d901      	bls.n	8007042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e29e      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007042:	4b6a      	ldr	r3, [pc, #424]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0f0      	beq.n	8007030 <HAL_RCC_OscConfig+0xc0>
 800704e:	e014      	b.n	800707a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007050:	f7fd fc0e 	bl	8004870 <HAL_GetTick>
 8007054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007056:	e008      	b.n	800706a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007058:	f7fd fc0a 	bl	8004870 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b64      	cmp	r3, #100	@ 0x64
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e28a      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800706a:	4b60      	ldr	r3, [pc, #384]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f0      	bne.n	8007058 <HAL_RCC_OscConfig+0xe8>
 8007076:	e000      	b.n	800707a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d075      	beq.n	8007172 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007086:	4b59      	ldr	r3, [pc, #356]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 030c 	and.w	r3, r3, #12
 800708e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007090:	4b56      	ldr	r3, [pc, #344]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	2b0c      	cmp	r3, #12
 800709e:	d102      	bne.n	80070a6 <HAL_RCC_OscConfig+0x136>
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d002      	beq.n	80070ac <HAL_RCC_OscConfig+0x13c>
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d11f      	bne.n	80070ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070ac:	4b4f      	ldr	r3, [pc, #316]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <HAL_RCC_OscConfig+0x154>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e25d      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c4:	4b49      	ldr	r3, [pc, #292]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	061b      	lsls	r3, r3, #24
 80070d2:	4946      	ldr	r1, [pc, #280]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80070d8:	4b45      	ldr	r3, [pc, #276]	@ (80071f0 <HAL_RCC_OscConfig+0x280>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fd fb7b 	bl	80047d8 <HAL_InitTick>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d043      	beq.n	8007170 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e249      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d023      	beq.n	800713c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070f4:	4b3d      	ldr	r3, [pc, #244]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a3c      	ldr	r2, [pc, #240]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007100:	f7fd fbb6 	bl	8004870 <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007106:	e008      	b.n	800711a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007108:	f7fd fbb2 	bl	8004870 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e232      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800711a:	4b34      	ldr	r3, [pc, #208]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f0      	beq.n	8007108 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007126:	4b31      	ldr	r3, [pc, #196]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	061b      	lsls	r3, r3, #24
 8007134:	492d      	ldr	r1, [pc, #180]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007136:	4313      	orrs	r3, r2
 8007138:	604b      	str	r3, [r1, #4]
 800713a:	e01a      	b.n	8007172 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800713c:	4b2b      	ldr	r3, [pc, #172]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a2a      	ldr	r2, [pc, #168]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007142:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007148:	f7fd fb92 	bl	8004870 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007150:	f7fd fb8e 	bl	8004870 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e20e      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007162:	4b22      	ldr	r3, [pc, #136]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0x1e0>
 800716e:	e000      	b.n	8007172 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007170:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	d041      	beq.n	8007202 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d01c      	beq.n	80071c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007186:	4b19      	ldr	r3, [pc, #100]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800718c:	4a17      	ldr	r2, [pc, #92]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800718e:	f043 0301 	orr.w	r3, r3, #1
 8007192:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007196:	f7fd fb6b 	bl	8004870 <HAL_GetTick>
 800719a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800719c:	e008      	b.n	80071b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800719e:	f7fd fb67 	bl	8004870 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d901      	bls.n	80071b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e1e7      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071b0:	4b0e      	ldr	r3, [pc, #56]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80071b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0ef      	beq.n	800719e <HAL_RCC_OscConfig+0x22e>
 80071be:	e020      	b.n	8007202 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071c0:	4b0a      	ldr	r3, [pc, #40]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80071c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071c6:	4a09      	ldr	r2, [pc, #36]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80071c8:	f023 0301 	bic.w	r3, r3, #1
 80071cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d0:	f7fd fb4e 	bl	8004870 <HAL_GetTick>
 80071d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071d6:	e00d      	b.n	80071f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071d8:	f7fd fb4a 	bl	8004870 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d906      	bls.n	80071f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e1ca      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
 80071ea:	bf00      	nop
 80071ec:	40021000 	.word	0x40021000
 80071f0:	2000021c 	.word	0x2000021c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071f4:	4b8c      	ldr	r3, [pc, #560]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80071f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1ea      	bne.n	80071d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 80a6 	beq.w	800735c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007210:	2300      	movs	r3, #0
 8007212:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007214:	4b84      	ldr	r3, [pc, #528]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <HAL_RCC_OscConfig+0x2b4>
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <HAL_RCC_OscConfig+0x2b6>
 8007224:	2300      	movs	r3, #0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00d      	beq.n	8007246 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800722a:	4b7f      	ldr	r3, [pc, #508]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 800722c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722e:	4a7e      	ldr	r2, [pc, #504]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007234:	6593      	str	r3, [r2, #88]	@ 0x58
 8007236:	4b7c      	ldr	r3, [pc, #496]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800723a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007242:	2301      	movs	r3, #1
 8007244:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007246:	4b79      	ldr	r3, [pc, #484]	@ (800742c <HAL_RCC_OscConfig+0x4bc>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724e:	2b00      	cmp	r3, #0
 8007250:	d118      	bne.n	8007284 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007252:	4b76      	ldr	r3, [pc, #472]	@ (800742c <HAL_RCC_OscConfig+0x4bc>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a75      	ldr	r2, [pc, #468]	@ (800742c <HAL_RCC_OscConfig+0x4bc>)
 8007258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800725c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800725e:	f7fd fb07 	bl	8004870 <HAL_GetTick>
 8007262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007264:	e008      	b.n	8007278 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007266:	f7fd fb03 	bl	8004870 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d901      	bls.n	8007278 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e183      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007278:	4b6c      	ldr	r3, [pc, #432]	@ (800742c <HAL_RCC_OscConfig+0x4bc>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0f0      	beq.n	8007266 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d108      	bne.n	800729e <HAL_RCC_OscConfig+0x32e>
 800728c:	4b66      	ldr	r3, [pc, #408]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 800728e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007292:	4a65      	ldr	r2, [pc, #404]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007294:	f043 0301 	orr.w	r3, r3, #1
 8007298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800729c:	e024      	b.n	80072e8 <HAL_RCC_OscConfig+0x378>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	d110      	bne.n	80072c8 <HAL_RCC_OscConfig+0x358>
 80072a6:	4b60      	ldr	r3, [pc, #384]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ac:	4a5e      	ldr	r2, [pc, #376]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072ae:	f043 0304 	orr.w	r3, r3, #4
 80072b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072b6:	4b5c      	ldr	r3, [pc, #368]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072bc:	4a5a      	ldr	r2, [pc, #360]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072be:	f043 0301 	orr.w	r3, r3, #1
 80072c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072c6:	e00f      	b.n	80072e8 <HAL_RCC_OscConfig+0x378>
 80072c8:	4b57      	ldr	r3, [pc, #348]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ce:	4a56      	ldr	r2, [pc, #344]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072d8:	4b53      	ldr	r3, [pc, #332]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072de:	4a52      	ldr	r2, [pc, #328]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072e0:	f023 0304 	bic.w	r3, r3, #4
 80072e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d016      	beq.n	800731e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f0:	f7fd fabe 	bl	8004870 <HAL_GetTick>
 80072f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072f6:	e00a      	b.n	800730e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072f8:	f7fd faba 	bl	8004870 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007306:	4293      	cmp	r3, r2
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e138      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800730e:	4b46      	ldr	r3, [pc, #280]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0ed      	beq.n	80072f8 <HAL_RCC_OscConfig+0x388>
 800731c:	e015      	b.n	800734a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800731e:	f7fd faa7 	bl	8004870 <HAL_GetTick>
 8007322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007324:	e00a      	b.n	800733c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007326:	f7fd faa3 	bl	8004870 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007334:	4293      	cmp	r3, r2
 8007336:	d901      	bls.n	800733c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e121      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800733c:	4b3a      	ldr	r3, [pc, #232]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1ed      	bne.n	8007326 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800734a:	7ffb      	ldrb	r3, [r7, #31]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d105      	bne.n	800735c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007350:	4b35      	ldr	r3, [pc, #212]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007354:	4a34      	ldr	r2, [pc, #208]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800735a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0320 	and.w	r3, r3, #32
 8007364:	2b00      	cmp	r3, #0
 8007366:	d03c      	beq.n	80073e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01c      	beq.n	80073aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007370:	4b2d      	ldr	r3, [pc, #180]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007372:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007376:	4a2c      	ldr	r2, [pc, #176]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007378:	f043 0301 	orr.w	r3, r3, #1
 800737c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007380:	f7fd fa76 	bl	8004870 <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007388:	f7fd fa72 	bl	8004870 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e0f2      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800739a:	4b23      	ldr	r3, [pc, #140]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 800739c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0ef      	beq.n	8007388 <HAL_RCC_OscConfig+0x418>
 80073a8:	e01b      	b.n	80073e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80073ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80073b2:	f023 0301 	bic.w	r3, r3, #1
 80073b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ba:	f7fd fa59 	bl	8004870 <HAL_GetTick>
 80073be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073c0:	e008      	b.n	80073d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073c2:	f7fd fa55 	bl	8004870 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d901      	bls.n	80073d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e0d5      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073d4:	4b14      	ldr	r3, [pc, #80]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80073d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1ef      	bne.n	80073c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 80c9 	beq.w	800757e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 030c 	and.w	r3, r3, #12
 80073f4:	2b0c      	cmp	r3, #12
 80073f6:	f000 8083 	beq.w	8007500 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d15e      	bne.n	80074c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007402:	4b09      	ldr	r3, [pc, #36]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a08      	ldr	r2, [pc, #32]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007408:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800740c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740e:	f7fd fa2f 	bl	8004870 <HAL_GetTick>
 8007412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007414:	e00c      	b.n	8007430 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007416:	f7fd fa2b 	bl	8004870 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d905      	bls.n	8007430 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e0ab      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
 8007428:	40021000 	.word	0x40021000
 800742c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007430:	4b55      	ldr	r3, [pc, #340]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1ec      	bne.n	8007416 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800743c:	4b52      	ldr	r3, [pc, #328]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	4b52      	ldr	r3, [pc, #328]	@ (800758c <HAL_RCC_OscConfig+0x61c>)
 8007442:	4013      	ands	r3, r2
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6a11      	ldr	r1, [r2, #32]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800744c:	3a01      	subs	r2, #1
 800744e:	0112      	lsls	r2, r2, #4
 8007450:	4311      	orrs	r1, r2
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007456:	0212      	lsls	r2, r2, #8
 8007458:	4311      	orrs	r1, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800745e:	0852      	lsrs	r2, r2, #1
 8007460:	3a01      	subs	r2, #1
 8007462:	0552      	lsls	r2, r2, #21
 8007464:	4311      	orrs	r1, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800746a:	0852      	lsrs	r2, r2, #1
 800746c:	3a01      	subs	r2, #1
 800746e:	0652      	lsls	r2, r2, #25
 8007470:	4311      	orrs	r1, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007476:	06d2      	lsls	r2, r2, #27
 8007478:	430a      	orrs	r2, r1
 800747a:	4943      	ldr	r1, [pc, #268]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 800747c:	4313      	orrs	r3, r2
 800747e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007480:	4b41      	ldr	r3, [pc, #260]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a40      	ldr	r2, [pc, #256]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 8007486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800748a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800748c:	4b3e      	ldr	r3, [pc, #248]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	4a3d      	ldr	r2, [pc, #244]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 8007492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007496:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007498:	f7fd f9ea 	bl	8004870 <HAL_GetTick>
 800749c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a0:	f7fd f9e6 	bl	8004870 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e066      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074b2:	4b35      	ldr	r3, [pc, #212]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f0      	beq.n	80074a0 <HAL_RCC_OscConfig+0x530>
 80074be:	e05e      	b.n	800757e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074c0:	4b31      	ldr	r3, [pc, #196]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a30      	ldr	r2, [pc, #192]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074cc:	f7fd f9d0 	bl	8004870 <HAL_GetTick>
 80074d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d4:	f7fd f9cc 	bl	8004870 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e04c      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074e6:	4b28      	ldr	r3, [pc, #160]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1f0      	bne.n	80074d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80074f2:	4b25      	ldr	r3, [pc, #148]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	4924      	ldr	r1, [pc, #144]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074f8:	4b25      	ldr	r3, [pc, #148]	@ (8007590 <HAL_RCC_OscConfig+0x620>)
 80074fa:	4013      	ands	r3, r2
 80074fc:	60cb      	str	r3, [r1, #12]
 80074fe:	e03e      	b.n	800757e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d101      	bne.n	800750c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e039      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800750c:	4b1e      	ldr	r3, [pc, #120]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f003 0203 	and.w	r2, r3, #3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	429a      	cmp	r2, r3
 800751e:	d12c      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800752a:	3b01      	subs	r3, #1
 800752c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752e:	429a      	cmp	r2, r3
 8007530:	d123      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800753e:	429a      	cmp	r2, r3
 8007540:	d11b      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800754e:	429a      	cmp	r2, r3
 8007550:	d113      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755c:	085b      	lsrs	r3, r3, #1
 800755e:	3b01      	subs	r3, #1
 8007560:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007562:	429a      	cmp	r2, r3
 8007564:	d109      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007570:	085b      	lsrs	r3, r3, #1
 8007572:	3b01      	subs	r3, #1
 8007574:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007576:	429a      	cmp	r2, r3
 8007578:	d001      	beq.n	800757e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e000      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3720      	adds	r7, #32
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	40021000 	.word	0x40021000
 800758c:	019f800c 	.word	0x019f800c
 8007590:	feeefffc 	.word	0xfeeefffc

08007594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e11e      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075ac:	4b91      	ldr	r3, [pc, #580]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 030f 	and.w	r3, r3, #15
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d910      	bls.n	80075dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ba:	4b8e      	ldr	r3, [pc, #568]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f023 020f 	bic.w	r2, r3, #15
 80075c2:	498c      	ldr	r1, [pc, #560]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ca:	4b8a      	ldr	r3, [pc, #552]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d001      	beq.n	80075dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e106      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d073      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d129      	bne.n	8007644 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075f0:	4b81      	ldr	r3, [pc, #516]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0f4      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007600:	f000 f99e 	bl	8007940 <RCC_GetSysClockFreqFromPLLSource>
 8007604:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	4a7c      	ldr	r2, [pc, #496]	@ (80077fc <HAL_RCC_ClockConfig+0x268>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d93f      	bls.n	800768e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800760e:	4b7a      	ldr	r3, [pc, #488]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007622:	2b00      	cmp	r3, #0
 8007624:	d033      	beq.n	800768e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800762a:	2b00      	cmp	r3, #0
 800762c:	d12f      	bne.n	800768e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800762e:	4b72      	ldr	r3, [pc, #456]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007636:	4a70      	ldr	r2, [pc, #448]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800763c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800763e:	2380      	movs	r3, #128	@ 0x80
 8007640:	617b      	str	r3, [r7, #20]
 8007642:	e024      	b.n	800768e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	2b02      	cmp	r3, #2
 800764a:	d107      	bne.n	800765c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800764c:	4b6a      	ldr	r3, [pc, #424]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d109      	bne.n	800766c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e0c6      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800765c:	4b66      	ldr	r3, [pc, #408]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e0be      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800766c:	f000 f8ce 	bl	800780c <HAL_RCC_GetSysClockFreq>
 8007670:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	4a61      	ldr	r2, [pc, #388]	@ (80077fc <HAL_RCC_ClockConfig+0x268>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d909      	bls.n	800768e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800767a:	4b5f      	ldr	r3, [pc, #380]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007682:	4a5d      	ldr	r2, [pc, #372]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007688:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800768a:	2380      	movs	r3, #128	@ 0x80
 800768c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800768e:	4b5a      	ldr	r3, [pc, #360]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f023 0203 	bic.w	r2, r3, #3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	4957      	ldr	r1, [pc, #348]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800769c:	4313      	orrs	r3, r2
 800769e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a0:	f7fd f8e6 	bl	8004870 <HAL_GetTick>
 80076a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a6:	e00a      	b.n	80076be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076a8:	f7fd f8e2 	bl	8004870 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e095      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076be:	4b4e      	ldr	r3, [pc, #312]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 020c 	and.w	r2, r3, #12
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d1eb      	bne.n	80076a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d023      	beq.n	8007724 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076e8:	4b43      	ldr	r3, [pc, #268]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	4a42      	ldr	r2, [pc, #264]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80076ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80076f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0308 	and.w	r3, r3, #8
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d007      	beq.n	8007710 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007700:	4b3d      	ldr	r3, [pc, #244]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007708:	4a3b      	ldr	r2, [pc, #236]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800770a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800770e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007710:	4b39      	ldr	r3, [pc, #228]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	4936      	ldr	r1, [pc, #216]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800771e:	4313      	orrs	r3, r2
 8007720:	608b      	str	r3, [r1, #8]
 8007722:	e008      	b.n	8007736 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2b80      	cmp	r3, #128	@ 0x80
 8007728:	d105      	bne.n	8007736 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800772a:	4b33      	ldr	r3, [pc, #204]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	4a32      	ldr	r2, [pc, #200]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007730:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007734:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007736:	4b2f      	ldr	r3, [pc, #188]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d21d      	bcs.n	8007780 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007744:	4b2b      	ldr	r3, [pc, #172]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f023 020f 	bic.w	r2, r3, #15
 800774c:	4929      	ldr	r1, [pc, #164]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	4313      	orrs	r3, r2
 8007752:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007754:	f7fd f88c 	bl	8004870 <HAL_GetTick>
 8007758:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800775a:	e00a      	b.n	8007772 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800775c:	f7fd f888 	bl	8004870 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800776a:	4293      	cmp	r3, r2
 800776c:	d901      	bls.n	8007772 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e03b      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007772:	4b20      	ldr	r3, [pc, #128]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 030f 	and.w	r3, r3, #15
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	429a      	cmp	r2, r3
 800777e:	d1ed      	bne.n	800775c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b00      	cmp	r3, #0
 800778a:	d008      	beq.n	800779e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800778c:	4b1a      	ldr	r3, [pc, #104]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	4917      	ldr	r1, [pc, #92]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800779a:	4313      	orrs	r3, r2
 800779c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077aa:	4b13      	ldr	r3, [pc, #76]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	490f      	ldr	r1, [pc, #60]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077be:	f000 f825 	bl	800780c <HAL_RCC_GetSysClockFreq>
 80077c2:	4602      	mov	r2, r0
 80077c4:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	091b      	lsrs	r3, r3, #4
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	490c      	ldr	r1, [pc, #48]	@ (8007800 <HAL_RCC_ClockConfig+0x26c>)
 80077d0:	5ccb      	ldrb	r3, [r1, r3]
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	fa22 f303 	lsr.w	r3, r2, r3
 80077da:	4a0a      	ldr	r2, [pc, #40]	@ (8007804 <HAL_RCC_ClockConfig+0x270>)
 80077dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80077de:	4b0a      	ldr	r3, [pc, #40]	@ (8007808 <HAL_RCC_ClockConfig+0x274>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fc fff8 	bl	80047d8 <HAL_InitTick>
 80077e8:	4603      	mov	r3, r0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	40022000 	.word	0x40022000
 80077f8:	40021000 	.word	0x40021000
 80077fc:	04c4b400 	.word	0x04c4b400
 8007800:	0800bd98 	.word	0x0800bd98
 8007804:	20000218 	.word	0x20000218
 8007808:	2000021c 	.word	0x2000021c

0800780c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007812:	4b2c      	ldr	r3, [pc, #176]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 030c 	and.w	r3, r3, #12
 800781a:	2b04      	cmp	r3, #4
 800781c:	d102      	bne.n	8007824 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800781e:	4b2a      	ldr	r3, [pc, #168]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007820:	613b      	str	r3, [r7, #16]
 8007822:	e047      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007824:	4b27      	ldr	r3, [pc, #156]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 030c 	and.w	r3, r3, #12
 800782c:	2b08      	cmp	r3, #8
 800782e:	d102      	bne.n	8007836 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007830:	4b26      	ldr	r3, [pc, #152]	@ (80078cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007832:	613b      	str	r3, [r7, #16]
 8007834:	e03e      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007836:	4b23      	ldr	r3, [pc, #140]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 030c 	and.w	r3, r3, #12
 800783e:	2b0c      	cmp	r3, #12
 8007840:	d136      	bne.n	80078b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007842:	4b20      	ldr	r3, [pc, #128]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800784c:	4b1d      	ldr	r3, [pc, #116]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	091b      	lsrs	r3, r3, #4
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	3301      	adds	r3, #1
 8007858:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b03      	cmp	r3, #3
 800785e:	d10c      	bne.n	800787a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007860:	4a1a      	ldr	r2, [pc, #104]	@ (80078cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	fbb2 f3f3 	udiv	r3, r2, r3
 8007868:	4a16      	ldr	r2, [pc, #88]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800786a:	68d2      	ldr	r2, [r2, #12]
 800786c:	0a12      	lsrs	r2, r2, #8
 800786e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007872:	fb02 f303 	mul.w	r3, r2, r3
 8007876:	617b      	str	r3, [r7, #20]
      break;
 8007878:	e00c      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800787a:	4a13      	ldr	r2, [pc, #76]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007882:	4a10      	ldr	r2, [pc, #64]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007884:	68d2      	ldr	r2, [r2, #12]
 8007886:	0a12      	lsrs	r2, r2, #8
 8007888:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800788c:	fb02 f303 	mul.w	r3, r2, r3
 8007890:	617b      	str	r3, [r7, #20]
      break;
 8007892:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007894:	4b0b      	ldr	r3, [pc, #44]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	0e5b      	lsrs	r3, r3, #25
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	3301      	adds	r3, #1
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ac:	613b      	str	r3, [r7, #16]
 80078ae:	e001      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80078b4:	693b      	ldr	r3, [r7, #16]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	371c      	adds	r7, #28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	40021000 	.word	0x40021000
 80078c8:	00f42400 	.word	0x00f42400
 80078cc:	016e3600 	.word	0x016e3600

080078d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078d4:	4b03      	ldr	r3, [pc, #12]	@ (80078e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80078d6:	681b      	ldr	r3, [r3, #0]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20000218 	.word	0x20000218

080078e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80078ec:	f7ff fff0 	bl	80078d0 <HAL_RCC_GetHCLKFreq>
 80078f0:	4602      	mov	r2, r0
 80078f2:	4b06      	ldr	r3, [pc, #24]	@ (800790c <HAL_RCC_GetPCLK1Freq+0x24>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	4904      	ldr	r1, [pc, #16]	@ (8007910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078fe:	5ccb      	ldrb	r3, [r1, r3]
 8007900:	f003 031f 	and.w	r3, r3, #31
 8007904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007908:	4618      	mov	r0, r3
 800790a:	bd80      	pop	{r7, pc}
 800790c:	40021000 	.word	0x40021000
 8007910:	0800bda8 	.word	0x0800bda8

08007914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007918:	f7ff ffda 	bl	80078d0 <HAL_RCC_GetHCLKFreq>
 800791c:	4602      	mov	r2, r0
 800791e:	4b06      	ldr	r3, [pc, #24]	@ (8007938 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	0adb      	lsrs	r3, r3, #11
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	4904      	ldr	r1, [pc, #16]	@ (800793c <HAL_RCC_GetPCLK2Freq+0x28>)
 800792a:	5ccb      	ldrb	r3, [r1, r3]
 800792c:	f003 031f 	and.w	r3, r3, #31
 8007930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007934:	4618      	mov	r0, r3
 8007936:	bd80      	pop	{r7, pc}
 8007938:	40021000 	.word	0x40021000
 800793c:	0800bda8 	.word	0x0800bda8

08007940 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007946:	4b1e      	ldr	r3, [pc, #120]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007950:	4b1b      	ldr	r3, [pc, #108]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	091b      	lsrs	r3, r3, #4
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	3301      	adds	r3, #1
 800795c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b03      	cmp	r3, #3
 8007962:	d10c      	bne.n	800797e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007964:	4a17      	ldr	r2, [pc, #92]	@ (80079c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	fbb2 f3f3 	udiv	r3, r2, r3
 800796c:	4a14      	ldr	r2, [pc, #80]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800796e:	68d2      	ldr	r2, [r2, #12]
 8007970:	0a12      	lsrs	r2, r2, #8
 8007972:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007976:	fb02 f303 	mul.w	r3, r2, r3
 800797a:	617b      	str	r3, [r7, #20]
    break;
 800797c:	e00c      	b.n	8007998 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800797e:	4a12      	ldr	r2, [pc, #72]	@ (80079c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	fbb2 f3f3 	udiv	r3, r2, r3
 8007986:	4a0e      	ldr	r2, [pc, #56]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007988:	68d2      	ldr	r2, [r2, #12]
 800798a:	0a12      	lsrs	r2, r2, #8
 800798c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007990:	fb02 f303 	mul.w	r3, r2, r3
 8007994:	617b      	str	r3, [r7, #20]
    break;
 8007996:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007998:	4b09      	ldr	r3, [pc, #36]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	0e5b      	lsrs	r3, r3, #25
 800799e:	f003 0303 	and.w	r3, r3, #3
 80079a2:	3301      	adds	r3, #1
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80079b2:	687b      	ldr	r3, [r7, #4]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	40021000 	.word	0x40021000
 80079c4:	016e3600 	.word	0x016e3600
 80079c8:	00f42400 	.word	0x00f42400

080079cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079d4:	2300      	movs	r3, #0
 80079d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079d8:	2300      	movs	r3, #0
 80079da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 8098 	beq.w	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079ea:	2300      	movs	r3, #0
 80079ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ee:	4b43      	ldr	r3, [pc, #268]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10d      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079fa:	4b40      	ldr	r3, [pc, #256]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079fe:	4a3f      	ldr	r2, [pc, #252]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a06:	4b3d      	ldr	r3, [pc, #244]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a0e:	60bb      	str	r3, [r7, #8]
 8007a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a12:	2301      	movs	r3, #1
 8007a14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a16:	4b3a      	ldr	r3, [pc, #232]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a39      	ldr	r2, [pc, #228]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a22:	f7fc ff25 	bl	8004870 <HAL_GetTick>
 8007a26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a28:	e009      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a2a:	f7fc ff21 	bl	8004870 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d902      	bls.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	74fb      	strb	r3, [r7, #19]
        break;
 8007a3c:	e005      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a3e:	4b30      	ldr	r3, [pc, #192]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0ef      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007a4a:	7cfb      	ldrb	r3, [r7, #19]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d159      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a50:	4b2a      	ldr	r3, [pc, #168]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d01e      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d019      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a6c:	4b23      	ldr	r3, [pc, #140]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a78:	4b20      	ldr	r3, [pc, #128]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a88:	4b1c      	ldr	r3, [pc, #112]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a98:	4a18      	ldr	r2, [pc, #96]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d016      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aaa:	f7fc fee1 	bl	8004870 <HAL_GetTick>
 8007aae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ab0:	e00b      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ab2:	f7fc fedd 	bl	8004870 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d902      	bls.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	74fb      	strb	r3, [r7, #19]
            break;
 8007ac8:	e006      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007aca:	4b0c      	ldr	r3, [pc, #48]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0ec      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007ad8:	7cfb      	ldrb	r3, [r7, #19]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10b      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ade:	4b07      	ldr	r3, [pc, #28]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aec:	4903      	ldr	r1, [pc, #12]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007af4:	e008      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007af6:	7cfb      	ldrb	r3, [r7, #19]
 8007af8:	74bb      	strb	r3, [r7, #18]
 8007afa:	e005      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007afc:	40021000 	.word	0x40021000
 8007b00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b04:	7cfb      	ldrb	r3, [r7, #19]
 8007b06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b08:	7c7b      	ldrb	r3, [r7, #17]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d105      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b0e:	4ba7      	ldr	r3, [pc, #668]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b12:	4aa6      	ldr	r2, [pc, #664]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b26:	4ba1      	ldr	r3, [pc, #644]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b2c:	f023 0203 	bic.w	r2, r3, #3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	499d      	ldr	r1, [pc, #628]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b48:	4b98      	ldr	r3, [pc, #608]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b4e:	f023 020c 	bic.w	r2, r3, #12
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	4995      	ldr	r1, [pc, #596]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0304 	and.w	r3, r3, #4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b6a:	4b90      	ldr	r3, [pc, #576]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	498c      	ldr	r1, [pc, #560]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0308 	and.w	r3, r3, #8
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00a      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b8c:	4b87      	ldr	r3, [pc, #540]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	4984      	ldr	r1, [pc, #528]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0310 	and.w	r3, r3, #16
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bae:	4b7f      	ldr	r3, [pc, #508]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	497b      	ldr	r1, [pc, #492]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0320 	and.w	r3, r3, #32
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bd0:	4b76      	ldr	r3, [pc, #472]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	4973      	ldr	r1, [pc, #460]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00a      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bf2:	4b6e      	ldr	r3, [pc, #440]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	496a      	ldr	r1, [pc, #424]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00a      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c14:	4b65      	ldr	r3, [pc, #404]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	4962      	ldr	r1, [pc, #392]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00a      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c36:	4b5d      	ldr	r3, [pc, #372]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c44:	4959      	ldr	r1, [pc, #356]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c58:	4b54      	ldr	r3, [pc, #336]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c5e:	f023 0203 	bic.w	r2, r3, #3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c66:	4951      	ldr	r1, [pc, #324]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c7a:	4b4c      	ldr	r3, [pc, #304]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	4948      	ldr	r1, [pc, #288]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d015      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c9c:	4b43      	ldr	r3, [pc, #268]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007caa:	4940      	ldr	r1, [pc, #256]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cba:	d105      	bne.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	4a3a      	ldr	r2, [pc, #232]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d015      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007cd4:	4b35      	ldr	r3, [pc, #212]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce2:	4932      	ldr	r1, [pc, #200]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cf2:	d105      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cfe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d015      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d0c:	4b27      	ldr	r3, [pc, #156]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1a:	4924      	ldr	r1, [pc, #144]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d2a:	d105      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	4a1e      	ldr	r2, [pc, #120]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d015      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d44:	4b19      	ldr	r3, [pc, #100]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d52:	4916      	ldr	r1, [pc, #88]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d62:	d105      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d64:	4b11      	ldr	r3, [pc, #68]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	4a10      	ldr	r2, [pc, #64]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d019      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8a:	4908      	ldr	r1, [pc, #32]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d9a:	d109      	bne.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d9c:	4b03      	ldr	r3, [pc, #12]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	4a02      	ldr	r2, [pc, #8]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007da2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007da6:	60d3      	str	r3, [r2, #12]
 8007da8:	e002      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007daa:	bf00      	nop
 8007dac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d015      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007dbc:	4b29      	ldr	r3, [pc, #164]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dc2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dca:	4926      	ldr	r1, [pc, #152]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dda:	d105      	bne.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ddc:	4b21      	ldr	r3, [pc, #132]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	4a20      	ldr	r2, [pc, #128]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007de2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007de6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d015      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007df4:	4b1b      	ldr	r3, [pc, #108]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dfa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e02:	4918      	ldr	r1, [pc, #96]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e12:	d105      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e14:	4b13      	ldr	r3, [pc, #76]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	4a12      	ldr	r2, [pc, #72]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e1e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d015      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e3a:	490a      	ldr	r1, [pc, #40]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e4a:	d105      	bne.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e4c:	4b05      	ldr	r3, [pc, #20]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	4a04      	ldr	r2, [pc, #16]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007e58:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	40021000 	.word	0x40021000

08007e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e054      	b.n	8007f24 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d111      	bne.n	8007eaa <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f001 feec 	bl	8009c6c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d102      	bne.n	8007ea2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a23      	ldr	r2, [pc, #140]	@ (8007f2c <HAL_TIM_Base_Init+0xc4>)
 8007ea0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2202      	movs	r2, #2
 8007eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	f001 fa35 	bl	800932c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	08004219 	.word	0x08004219

08007f30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d001      	beq.n	8007f48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e04c      	b.n	8007fe2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a26      	ldr	r2, [pc, #152]	@ (8007ff0 <HAL_TIM_Base_Start+0xc0>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d022      	beq.n	8007fa0 <HAL_TIM_Base_Start+0x70>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f62:	d01d      	beq.n	8007fa0 <HAL_TIM_Base_Start+0x70>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a22      	ldr	r2, [pc, #136]	@ (8007ff4 <HAL_TIM_Base_Start+0xc4>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d018      	beq.n	8007fa0 <HAL_TIM_Base_Start+0x70>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a21      	ldr	r2, [pc, #132]	@ (8007ff8 <HAL_TIM_Base_Start+0xc8>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d013      	beq.n	8007fa0 <HAL_TIM_Base_Start+0x70>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8007ffc <HAL_TIM_Base_Start+0xcc>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00e      	beq.n	8007fa0 <HAL_TIM_Base_Start+0x70>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a1e      	ldr	r2, [pc, #120]	@ (8008000 <HAL_TIM_Base_Start+0xd0>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d009      	beq.n	8007fa0 <HAL_TIM_Base_Start+0x70>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a1c      	ldr	r2, [pc, #112]	@ (8008004 <HAL_TIM_Base_Start+0xd4>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d004      	beq.n	8007fa0 <HAL_TIM_Base_Start+0x70>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8008008 <HAL_TIM_Base_Start+0xd8>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d115      	bne.n	8007fcc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	4b19      	ldr	r3, [pc, #100]	@ (800800c <HAL_TIM_Base_Start+0xdc>)
 8007fa8:	4013      	ands	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b06      	cmp	r3, #6
 8007fb0:	d015      	beq.n	8007fde <HAL_TIM_Base_Start+0xae>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb8:	d011      	beq.n	8007fde <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f042 0201 	orr.w	r2, r2, #1
 8007fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fca:	e008      	b.n	8007fde <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0201 	orr.w	r2, r2, #1
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	e000      	b.n	8007fe0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	40012c00 	.word	0x40012c00
 8007ff4:	40000400 	.word	0x40000400
 8007ff8:	40000800 	.word	0x40000800
 8007ffc:	40000c00 	.word	0x40000c00
 8008000:	40013400 	.word	0x40013400
 8008004:	40014000 	.word	0x40014000
 8008008:	40015000 	.word	0x40015000
 800800c:	00010007 	.word	0x00010007

08008010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b01      	cmp	r3, #1
 8008022:	d001      	beq.n	8008028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e054      	b.n	80080d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0201 	orr.w	r2, r2, #1
 800803e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a26      	ldr	r2, [pc, #152]	@ (80080e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d022      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008052:	d01d      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a22      	ldr	r2, [pc, #136]	@ (80080e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d018      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a21      	ldr	r2, [pc, #132]	@ (80080e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d013      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a1f      	ldr	r2, [pc, #124]	@ (80080ec <HAL_TIM_Base_Start_IT+0xdc>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d00e      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a1e      	ldr	r2, [pc, #120]	@ (80080f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d009      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a1c      	ldr	r2, [pc, #112]	@ (80080f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d004      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a1b      	ldr	r2, [pc, #108]	@ (80080f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d115      	bne.n	80080bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689a      	ldr	r2, [r3, #8]
 8008096:	4b19      	ldr	r3, [pc, #100]	@ (80080fc <HAL_TIM_Base_Start_IT+0xec>)
 8008098:	4013      	ands	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b06      	cmp	r3, #6
 80080a0:	d015      	beq.n	80080ce <HAL_TIM_Base_Start_IT+0xbe>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080a8:	d011      	beq.n	80080ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f042 0201 	orr.w	r2, r2, #1
 80080b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ba:	e008      	b.n	80080ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f042 0201 	orr.w	r2, r2, #1
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	e000      	b.n	80080d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	40012c00 	.word	0x40012c00
 80080e4:	40000400 	.word	0x40000400
 80080e8:	40000800 	.word	0x40000800
 80080ec:	40000c00 	.word	0x40000c00
 80080f0:	40013400 	.word	0x40013400
 80080f4:	40014000 	.word	0x40014000
 80080f8:	40015000 	.word	0x40015000
 80080fc:	00010007 	.word	0x00010007

08008100 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e054      	b.n	80081bc <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d111      	bne.n	8008142 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 fda0 	bl	8009c6c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008130:	2b00      	cmp	r3, #0
 8008132:	d102      	bne.n	800813a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a23      	ldr	r2, [pc, #140]	@ (80081c4 <HAL_TIM_PWM_Init+0xc4>)
 8008138:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2202      	movs	r2, #2
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3304      	adds	r3, #4
 8008152:	4619      	mov	r1, r3
 8008154:	4610      	mov	r0, r2
 8008156:	f001 f8e9 	bl	800932c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	080081c9 	.word	0x080081c9

080081c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d109      	bne.n	8008200 <HAL_TIM_PWM_Start+0x24>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	bf14      	ite	ne
 80081f8:	2301      	movne	r3, #1
 80081fa:	2300      	moveq	r3, #0
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	e03c      	b.n	800827a <HAL_TIM_PWM_Start+0x9e>
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2b04      	cmp	r3, #4
 8008204:	d109      	bne.n	800821a <HAL_TIM_PWM_Start+0x3e>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b01      	cmp	r3, #1
 8008210:	bf14      	ite	ne
 8008212:	2301      	movne	r3, #1
 8008214:	2300      	moveq	r3, #0
 8008216:	b2db      	uxtb	r3, r3
 8008218:	e02f      	b.n	800827a <HAL_TIM_PWM_Start+0x9e>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b08      	cmp	r3, #8
 800821e:	d109      	bne.n	8008234 <HAL_TIM_PWM_Start+0x58>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b01      	cmp	r3, #1
 800822a:	bf14      	ite	ne
 800822c:	2301      	movne	r3, #1
 800822e:	2300      	moveq	r3, #0
 8008230:	b2db      	uxtb	r3, r3
 8008232:	e022      	b.n	800827a <HAL_TIM_PWM_Start+0x9e>
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2b0c      	cmp	r3, #12
 8008238:	d109      	bne.n	800824e <HAL_TIM_PWM_Start+0x72>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b01      	cmp	r3, #1
 8008244:	bf14      	ite	ne
 8008246:	2301      	movne	r3, #1
 8008248:	2300      	moveq	r3, #0
 800824a:	b2db      	uxtb	r3, r3
 800824c:	e015      	b.n	800827a <HAL_TIM_PWM_Start+0x9e>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b10      	cmp	r3, #16
 8008252:	d109      	bne.n	8008268 <HAL_TIM_PWM_Start+0x8c>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b01      	cmp	r3, #1
 800825e:	bf14      	ite	ne
 8008260:	2301      	movne	r3, #1
 8008262:	2300      	moveq	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	e008      	b.n	800827a <HAL_TIM_PWM_Start+0x9e>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b01      	cmp	r3, #1
 8008272:	bf14      	ite	ne
 8008274:	2301      	movne	r3, #1
 8008276:	2300      	moveq	r3, #0
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e0a6      	b.n	80083d0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d104      	bne.n	8008292 <HAL_TIM_PWM_Start+0xb6>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008290:	e023      	b.n	80082da <HAL_TIM_PWM_Start+0xfe>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b04      	cmp	r3, #4
 8008296:	d104      	bne.n	80082a2 <HAL_TIM_PWM_Start+0xc6>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082a0:	e01b      	b.n	80082da <HAL_TIM_PWM_Start+0xfe>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b08      	cmp	r3, #8
 80082a6:	d104      	bne.n	80082b2 <HAL_TIM_PWM_Start+0xd6>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082b0:	e013      	b.n	80082da <HAL_TIM_PWM_Start+0xfe>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b0c      	cmp	r3, #12
 80082b6:	d104      	bne.n	80082c2 <HAL_TIM_PWM_Start+0xe6>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2202      	movs	r2, #2
 80082bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082c0:	e00b      	b.n	80082da <HAL_TIM_PWM_Start+0xfe>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b10      	cmp	r3, #16
 80082c6:	d104      	bne.n	80082d2 <HAL_TIM_PWM_Start+0xf6>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082d0:	e003      	b.n	80082da <HAL_TIM_PWM_Start+0xfe>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2202      	movs	r2, #2
 80082d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2201      	movs	r2, #1
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f001 fc9c 	bl	8009c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a3a      	ldr	r2, [pc, #232]	@ (80083d8 <HAL_TIM_PWM_Start+0x1fc>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d018      	beq.n	8008324 <HAL_TIM_PWM_Start+0x148>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a39      	ldr	r2, [pc, #228]	@ (80083dc <HAL_TIM_PWM_Start+0x200>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d013      	beq.n	8008324 <HAL_TIM_PWM_Start+0x148>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a37      	ldr	r2, [pc, #220]	@ (80083e0 <HAL_TIM_PWM_Start+0x204>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d00e      	beq.n	8008324 <HAL_TIM_PWM_Start+0x148>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a36      	ldr	r2, [pc, #216]	@ (80083e4 <HAL_TIM_PWM_Start+0x208>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d009      	beq.n	8008324 <HAL_TIM_PWM_Start+0x148>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a34      	ldr	r2, [pc, #208]	@ (80083e8 <HAL_TIM_PWM_Start+0x20c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d004      	beq.n	8008324 <HAL_TIM_PWM_Start+0x148>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a33      	ldr	r2, [pc, #204]	@ (80083ec <HAL_TIM_PWM_Start+0x210>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d101      	bne.n	8008328 <HAL_TIM_PWM_Start+0x14c>
 8008324:	2301      	movs	r3, #1
 8008326:	e000      	b.n	800832a <HAL_TIM_PWM_Start+0x14e>
 8008328:	2300      	movs	r3, #0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d007      	beq.n	800833e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800833c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a25      	ldr	r2, [pc, #148]	@ (80083d8 <HAL_TIM_PWM_Start+0x1fc>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d022      	beq.n	800838e <HAL_TIM_PWM_Start+0x1b2>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008350:	d01d      	beq.n	800838e <HAL_TIM_PWM_Start+0x1b2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a26      	ldr	r2, [pc, #152]	@ (80083f0 <HAL_TIM_PWM_Start+0x214>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d018      	beq.n	800838e <HAL_TIM_PWM_Start+0x1b2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a24      	ldr	r2, [pc, #144]	@ (80083f4 <HAL_TIM_PWM_Start+0x218>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d013      	beq.n	800838e <HAL_TIM_PWM_Start+0x1b2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a23      	ldr	r2, [pc, #140]	@ (80083f8 <HAL_TIM_PWM_Start+0x21c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00e      	beq.n	800838e <HAL_TIM_PWM_Start+0x1b2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a19      	ldr	r2, [pc, #100]	@ (80083dc <HAL_TIM_PWM_Start+0x200>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d009      	beq.n	800838e <HAL_TIM_PWM_Start+0x1b2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a18      	ldr	r2, [pc, #96]	@ (80083e0 <HAL_TIM_PWM_Start+0x204>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d004      	beq.n	800838e <HAL_TIM_PWM_Start+0x1b2>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a18      	ldr	r2, [pc, #96]	@ (80083ec <HAL_TIM_PWM_Start+0x210>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d115      	bne.n	80083ba <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	4b19      	ldr	r3, [pc, #100]	@ (80083fc <HAL_TIM_PWM_Start+0x220>)
 8008396:	4013      	ands	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b06      	cmp	r3, #6
 800839e:	d015      	beq.n	80083cc <HAL_TIM_PWM_Start+0x1f0>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083a6:	d011      	beq.n	80083cc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f042 0201 	orr.w	r2, r2, #1
 80083b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b8:	e008      	b.n	80083cc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f042 0201 	orr.w	r2, r2, #1
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	e000      	b.n	80083ce <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	40012c00 	.word	0x40012c00
 80083dc:	40013400 	.word	0x40013400
 80083e0:	40014000 	.word	0x40014000
 80083e4:	40014400 	.word	0x40014400
 80083e8:	40014800 	.word	0x40014800
 80083ec:	40015000 	.word	0x40015000
 80083f0:	40000400 	.word	0x40000400
 80083f4:	40000800 	.word	0x40000800
 80083f8:	40000c00 	.word	0x40000c00
 80083fc:	00010007 	.word	0x00010007

08008400 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e04c      	b.n	80084ae <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d111      	bne.n	8008444 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f001 fc1f 	bl	8009c6c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008432:	2b00      	cmp	r3, #0
 8008434:	d102      	bne.n	800843c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a1f      	ldr	r2, [pc, #124]	@ (80084b8 <HAL_TIM_OnePulse_Init+0xb8>)
 800843a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2202      	movs	r2, #2
 8008448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3304      	adds	r3, #4
 8008454:	4619      	mov	r1, r3
 8008456:	4610      	mov	r0, r2
 8008458:	f000 ff68 	bl	800932c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 0208 	bic.w	r2, r2, #8
 800846a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	080084bd 	.word	0x080084bd

080084bc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80084e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084f8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d108      	bne.n	8008512 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008500:	7bbb      	ldrb	r3, [r7, #14]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d105      	bne.n	8008512 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008506:	7b7b      	ldrb	r3, [r7, #13]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d102      	bne.n	8008512 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800850c:	7b3b      	ldrb	r3, [r7, #12]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d001      	beq.n	8008516 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e059      	b.n	80085ca <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2202      	movs	r2, #2
 800851a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2202      	movs	r2, #2
 8008522:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2202      	movs	r2, #2
 800852a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68da      	ldr	r2, [r3, #12]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f042 0202 	orr.w	r2, r2, #2
 8008544:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68da      	ldr	r2, [r3, #12]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f042 0204 	orr.w	r2, r2, #4
 8008554:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2201      	movs	r2, #1
 800855c:	2100      	movs	r1, #0
 800855e:	4618      	mov	r0, r3
 8008560:	f001 fb5e 	bl	8009c20 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2201      	movs	r2, #1
 800856a:	2104      	movs	r1, #4
 800856c:	4618      	mov	r0, r3
 800856e:	f001 fb57 	bl	8009c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a17      	ldr	r2, [pc, #92]	@ (80085d4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d018      	beq.n	80085ae <HAL_TIM_OnePulse_Start_IT+0xde>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a15      	ldr	r2, [pc, #84]	@ (80085d8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d013      	beq.n	80085ae <HAL_TIM_OnePulse_Start_IT+0xde>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a14      	ldr	r2, [pc, #80]	@ (80085dc <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d00e      	beq.n	80085ae <HAL_TIM_OnePulse_Start_IT+0xde>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a12      	ldr	r2, [pc, #72]	@ (80085e0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d009      	beq.n	80085ae <HAL_TIM_OnePulse_Start_IT+0xde>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a11      	ldr	r2, [pc, #68]	@ (80085e4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d004      	beq.n	80085ae <HAL_TIM_OnePulse_Start_IT+0xde>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a0f      	ldr	r2, [pc, #60]	@ (80085e8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d101      	bne.n	80085b2 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80085ae:	2301      	movs	r3, #1
 80085b0:	e000      	b.n	80085b4 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80085b2:	2300      	movs	r3, #0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d007      	beq.n	80085c8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80085c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	40012c00 	.word	0x40012c00
 80085d8:	40013400 	.word	0x40013400
 80085dc:	40014000 	.word	0x40014000
 80085e0:	40014400 	.word	0x40014400
 80085e4:	40014800 	.word	0x40014800
 80085e8:	40015000 	.word	0x40015000

080085ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e0a2      	b.n	8008746 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d111      	bne.n	8008630 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 fb29 	bl	8009c6c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800861e:	2b00      	cmp	r3, #0
 8008620:	d102      	bne.n	8008628 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a4a      	ldr	r2, [pc, #296]	@ (8008750 <HAL_TIM_Encoder_Init+0x164>)
 8008626:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2202      	movs	r2, #2
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6812      	ldr	r2, [r2, #0]
 8008642:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8008646:	f023 0307 	bic.w	r3, r3, #7
 800864a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3304      	adds	r3, #4
 8008654:	4619      	mov	r1, r3
 8008656:	4610      	mov	r0, r2
 8008658:	f000 fe68 	bl	800932c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	4313      	orrs	r3, r2
 800867c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008684:	f023 0303 	bic.w	r3, r3, #3
 8008688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	689a      	ldr	r2, [r3, #8]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	021b      	lsls	r3, r3, #8
 8008694:	4313      	orrs	r3, r2
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	4313      	orrs	r3, r2
 800869a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80086a2:	f023 030c 	bic.w	r3, r3, #12
 80086a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	4313      	orrs	r3, r2
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	011a      	lsls	r2, r3, #4
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	031b      	lsls	r3, r3, #12
 80086d2:	4313      	orrs	r3, r2
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80086e0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80086e8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	4313      	orrs	r3, r2
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	08004381 	.word	0x08004381

08008754 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008764:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800876c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008774:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800877c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d110      	bne.n	80087a6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d102      	bne.n	8008790 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800878a:	7b7b      	ldrb	r3, [r7, #13]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d001      	beq.n	8008794 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e069      	b.n	8008868 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087a4:	e031      	b.n	800880a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b04      	cmp	r3, #4
 80087aa:	d110      	bne.n	80087ce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d102      	bne.n	80087b8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80087b2:	7b3b      	ldrb	r3, [r7, #12]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d001      	beq.n	80087bc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e055      	b.n	8008868 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2202      	movs	r2, #2
 80087c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087cc:	e01d      	b.n	800880a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d108      	bne.n	80087e6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d105      	bne.n	80087e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087da:	7b7b      	ldrb	r3, [r7, #13]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d102      	bne.n	80087e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80087e0:	7b3b      	ldrb	r3, [r7, #12]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d001      	beq.n	80087ea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e03e      	b.n	8008868 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2202      	movs	r2, #2
 80087ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2202      	movs	r2, #2
 80087f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2202      	movs	r2, #2
 80087fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2202      	movs	r2, #2
 8008806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <HAL_TIM_Encoder_Start+0xc4>
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b04      	cmp	r3, #4
 8008814:	d008      	beq.n	8008828 <HAL_TIM_Encoder_Start+0xd4>
 8008816:	e00f      	b.n	8008838 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2201      	movs	r2, #1
 800881e:	2100      	movs	r1, #0
 8008820:	4618      	mov	r0, r3
 8008822:	f001 f9fd 	bl	8009c20 <TIM_CCxChannelCmd>
      break;
 8008826:	e016      	b.n	8008856 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2201      	movs	r2, #1
 800882e:	2104      	movs	r1, #4
 8008830:	4618      	mov	r0, r3
 8008832:	f001 f9f5 	bl	8009c20 <TIM_CCxChannelCmd>
      break;
 8008836:	e00e      	b.n	8008856 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2201      	movs	r2, #1
 800883e:	2100      	movs	r1, #0
 8008840:	4618      	mov	r0, r3
 8008842:	f001 f9ed 	bl	8009c20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2201      	movs	r2, #1
 800884c:	2104      	movs	r1, #4
 800884e:	4618      	mov	r0, r3
 8008850:	f001 f9e6 	bl	8009c20 <TIM_CCxChannelCmd>
      break;
 8008854:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f042 0201 	orr.w	r2, r2, #1
 8008864:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	f003 0302 	and.w	r3, r3, #2
 800888e:	2b00      	cmp	r3, #0
 8008890:	d026      	beq.n	80088e0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d021      	beq.n	80088e0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f06f 0202 	mvn.w	r2, #2
 80088a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	f003 0303 	and.w	r3, r3, #3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d005      	beq.n	80088c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	4798      	blx	r3
 80088c4:	e009      	b.n	80088da <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f003 0304 	and.w	r3, r3, #4
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d026      	beq.n	8008938 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f003 0304 	and.w	r3, r3, #4
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d021      	beq.n	8008938 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0204 	mvn.w	r2, #4
 80088fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2202      	movs	r2, #2
 8008902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800890e:	2b00      	cmp	r3, #0
 8008910:	d005      	beq.n	800891e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	4798      	blx	r3
 800891c:	e009      	b.n	8008932 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	f003 0308 	and.w	r3, r3, #8
 800893e:	2b00      	cmp	r3, #0
 8008940:	d026      	beq.n	8008990 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f003 0308 	and.w	r3, r3, #8
 8008948:	2b00      	cmp	r3, #0
 800894a:	d021      	beq.n	8008990 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f06f 0208 	mvn.w	r2, #8
 8008954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2204      	movs	r2, #4
 800895a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	f003 0303 	and.w	r3, r3, #3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	4798      	blx	r3
 8008974:	e009      	b.n	800898a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f003 0310 	and.w	r3, r3, #16
 8008996:	2b00      	cmp	r3, #0
 8008998:	d026      	beq.n	80089e8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f003 0310 	and.w	r3, r3, #16
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d021      	beq.n	80089e8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f06f 0210 	mvn.w	r2, #16
 80089ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2208      	movs	r2, #8
 80089b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d005      	beq.n	80089ce <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	4798      	blx	r3
 80089cc:	e009      	b.n	80089e2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00e      	beq.n	8008a10 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d009      	beq.n	8008a10 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f06f 0201 	mvn.w	r2, #1
 8008a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d104      	bne.n	8008a24 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00e      	beq.n	8008a42 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d009      	beq.n	8008a42 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00e      	beq.n	8008a6a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d009      	beq.n	8008a6a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00e      	beq.n	8008a92 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d009      	beq.n	8008a92 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00e      	beq.n	8008aba <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f003 0320 	and.w	r3, r3, #32
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d009      	beq.n	8008aba <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f06f 0220 	mvn.w	r2, #32
 8008aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00e      	beq.n	8008ae2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d009      	beq.n	8008ae2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00e      	beq.n	8008b0a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d009      	beq.n	8008b0a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00e      	beq.n	8008b32 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d009      	beq.n	8008b32 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00e      	beq.n	8008b5a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d009      	beq.n	8008b5a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b5a:	bf00      	nop
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d101      	bne.n	8008b82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b7e:	2302      	movs	r3, #2
 8008b80:	e0ff      	b.n	8008d82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b14      	cmp	r3, #20
 8008b8e:	f200 80f0 	bhi.w	8008d72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008b92:	a201      	add	r2, pc, #4	@ (adr r2, 8008b98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b98:	08008bed 	.word	0x08008bed
 8008b9c:	08008d73 	.word	0x08008d73
 8008ba0:	08008d73 	.word	0x08008d73
 8008ba4:	08008d73 	.word	0x08008d73
 8008ba8:	08008c2d 	.word	0x08008c2d
 8008bac:	08008d73 	.word	0x08008d73
 8008bb0:	08008d73 	.word	0x08008d73
 8008bb4:	08008d73 	.word	0x08008d73
 8008bb8:	08008c6f 	.word	0x08008c6f
 8008bbc:	08008d73 	.word	0x08008d73
 8008bc0:	08008d73 	.word	0x08008d73
 8008bc4:	08008d73 	.word	0x08008d73
 8008bc8:	08008caf 	.word	0x08008caf
 8008bcc:	08008d73 	.word	0x08008d73
 8008bd0:	08008d73 	.word	0x08008d73
 8008bd4:	08008d73 	.word	0x08008d73
 8008bd8:	08008cf1 	.word	0x08008cf1
 8008bdc:	08008d73 	.word	0x08008d73
 8008be0:	08008d73 	.word	0x08008d73
 8008be4:	08008d73 	.word	0x08008d73
 8008be8:	08008d31 	.word	0x08008d31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68b9      	ldr	r1, [r7, #8]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fc4e 	bl	8009494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	699a      	ldr	r2, [r3, #24]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f042 0208 	orr.w	r2, r2, #8
 8008c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	699a      	ldr	r2, [r3, #24]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 0204 	bic.w	r2, r2, #4
 8008c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6999      	ldr	r1, [r3, #24]
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	691a      	ldr	r2, [r3, #16]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	430a      	orrs	r2, r1
 8008c28:	619a      	str	r2, [r3, #24]
      break;
 8008c2a:	e0a5      	b.n	8008d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68b9      	ldr	r1, [r7, #8]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 fcc8 	bl	80095c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	699a      	ldr	r2, [r3, #24]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	699a      	ldr	r2, [r3, #24]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6999      	ldr	r1, [r3, #24]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	021a      	lsls	r2, r3, #8
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	619a      	str	r2, [r3, #24]
      break;
 8008c6c:	e084      	b.n	8008d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68b9      	ldr	r1, [r7, #8]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 fd3b 	bl	80096f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	69da      	ldr	r2, [r3, #28]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f042 0208 	orr.w	r2, r2, #8
 8008c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	69da      	ldr	r2, [r3, #28]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f022 0204 	bic.w	r2, r2, #4
 8008c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69d9      	ldr	r1, [r3, #28]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	691a      	ldr	r2, [r3, #16]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	61da      	str	r2, [r3, #28]
      break;
 8008cac:	e064      	b.n	8008d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68b9      	ldr	r1, [r7, #8]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 fdad 	bl	8009814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	69da      	ldr	r2, [r3, #28]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	69da      	ldr	r2, [r3, #28]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	69d9      	ldr	r1, [r3, #28]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	021a      	lsls	r2, r3, #8
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	61da      	str	r2, [r3, #28]
      break;
 8008cee:	e043      	b.n	8008d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68b9      	ldr	r1, [r7, #8]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fe20 	bl	800993c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f042 0208 	orr.w	r2, r2, #8
 8008d0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f022 0204 	bic.w	r2, r2, #4
 8008d1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	691a      	ldr	r2, [r3, #16]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008d2e:	e023      	b.n	8008d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68b9      	ldr	r1, [r7, #8]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 fe6a 	bl	8009a10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d4a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d5a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	021a      	lsls	r2, r3, #8
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008d70:	e002      	b.n	8008d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	75fb      	strb	r3, [r7, #23]
      break;
 8008d76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop

08008d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d101      	bne.n	8008da8 <HAL_TIM_ConfigClockSource+0x1c>
 8008da4:	2302      	movs	r3, #2
 8008da6:	e0f6      	b.n	8008f96 <HAL_TIM_ConfigClockSource+0x20a>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2202      	movs	r2, #2
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008dc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a6f      	ldr	r2, [pc, #444]	@ (8008fa0 <HAL_TIM_ConfigClockSource+0x214>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	f000 80c1 	beq.w	8008f6a <HAL_TIM_ConfigClockSource+0x1de>
 8008de8:	4a6d      	ldr	r2, [pc, #436]	@ (8008fa0 <HAL_TIM_ConfigClockSource+0x214>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	f200 80c6 	bhi.w	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008df0:	4a6c      	ldr	r2, [pc, #432]	@ (8008fa4 <HAL_TIM_ConfigClockSource+0x218>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	f000 80b9 	beq.w	8008f6a <HAL_TIM_ConfigClockSource+0x1de>
 8008df8:	4a6a      	ldr	r2, [pc, #424]	@ (8008fa4 <HAL_TIM_ConfigClockSource+0x218>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	f200 80be 	bhi.w	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008e00:	4a69      	ldr	r2, [pc, #420]	@ (8008fa8 <HAL_TIM_ConfigClockSource+0x21c>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	f000 80b1 	beq.w	8008f6a <HAL_TIM_ConfigClockSource+0x1de>
 8008e08:	4a67      	ldr	r2, [pc, #412]	@ (8008fa8 <HAL_TIM_ConfigClockSource+0x21c>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	f200 80b6 	bhi.w	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008e10:	4a66      	ldr	r2, [pc, #408]	@ (8008fac <HAL_TIM_ConfigClockSource+0x220>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	f000 80a9 	beq.w	8008f6a <HAL_TIM_ConfigClockSource+0x1de>
 8008e18:	4a64      	ldr	r2, [pc, #400]	@ (8008fac <HAL_TIM_ConfigClockSource+0x220>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	f200 80ae 	bhi.w	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008e20:	4a63      	ldr	r2, [pc, #396]	@ (8008fb0 <HAL_TIM_ConfigClockSource+0x224>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	f000 80a1 	beq.w	8008f6a <HAL_TIM_ConfigClockSource+0x1de>
 8008e28:	4a61      	ldr	r2, [pc, #388]	@ (8008fb0 <HAL_TIM_ConfigClockSource+0x224>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	f200 80a6 	bhi.w	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008e30:	4a60      	ldr	r2, [pc, #384]	@ (8008fb4 <HAL_TIM_ConfigClockSource+0x228>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	f000 8099 	beq.w	8008f6a <HAL_TIM_ConfigClockSource+0x1de>
 8008e38:	4a5e      	ldr	r2, [pc, #376]	@ (8008fb4 <HAL_TIM_ConfigClockSource+0x228>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	f200 809e 	bhi.w	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008e40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008e44:	f000 8091 	beq.w	8008f6a <HAL_TIM_ConfigClockSource+0x1de>
 8008e48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008e4c:	f200 8096 	bhi.w	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008e50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e54:	f000 8089 	beq.w	8008f6a <HAL_TIM_ConfigClockSource+0x1de>
 8008e58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e5c:	f200 808e 	bhi.w	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e64:	d03e      	beq.n	8008ee4 <HAL_TIM_ConfigClockSource+0x158>
 8008e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e6a:	f200 8087 	bhi.w	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e72:	f000 8086 	beq.w	8008f82 <HAL_TIM_ConfigClockSource+0x1f6>
 8008e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e7a:	d87f      	bhi.n	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008e7c:	2b70      	cmp	r3, #112	@ 0x70
 8008e7e:	d01a      	beq.n	8008eb6 <HAL_TIM_ConfigClockSource+0x12a>
 8008e80:	2b70      	cmp	r3, #112	@ 0x70
 8008e82:	d87b      	bhi.n	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008e84:	2b60      	cmp	r3, #96	@ 0x60
 8008e86:	d050      	beq.n	8008f2a <HAL_TIM_ConfigClockSource+0x19e>
 8008e88:	2b60      	cmp	r3, #96	@ 0x60
 8008e8a:	d877      	bhi.n	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008e8c:	2b50      	cmp	r3, #80	@ 0x50
 8008e8e:	d03c      	beq.n	8008f0a <HAL_TIM_ConfigClockSource+0x17e>
 8008e90:	2b50      	cmp	r3, #80	@ 0x50
 8008e92:	d873      	bhi.n	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008e94:	2b40      	cmp	r3, #64	@ 0x40
 8008e96:	d058      	beq.n	8008f4a <HAL_TIM_ConfigClockSource+0x1be>
 8008e98:	2b40      	cmp	r3, #64	@ 0x40
 8008e9a:	d86f      	bhi.n	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008e9c:	2b30      	cmp	r3, #48	@ 0x30
 8008e9e:	d064      	beq.n	8008f6a <HAL_TIM_ConfigClockSource+0x1de>
 8008ea0:	2b30      	cmp	r3, #48	@ 0x30
 8008ea2:	d86b      	bhi.n	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ea4:	2b20      	cmp	r3, #32
 8008ea6:	d060      	beq.n	8008f6a <HAL_TIM_ConfigClockSource+0x1de>
 8008ea8:	2b20      	cmp	r3, #32
 8008eaa:	d867      	bhi.n	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d05c      	beq.n	8008f6a <HAL_TIM_ConfigClockSource+0x1de>
 8008eb0:	2b10      	cmp	r3, #16
 8008eb2:	d05a      	beq.n	8008f6a <HAL_TIM_ConfigClockSource+0x1de>
 8008eb4:	e062      	b.n	8008f7c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ec6:	f000 fe8b 	bl	8009be0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	609a      	str	r2, [r3, #8]
      break;
 8008ee2:	e04f      	b.n	8008f84 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ef4:	f000 fe74 	bl	8009be0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f06:	609a      	str	r2, [r3, #8]
      break;
 8008f08:	e03c      	b.n	8008f84 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f16:	461a      	mov	r2, r3
 8008f18:	f000 fde6 	bl	8009ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2150      	movs	r1, #80	@ 0x50
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fe3f 	bl	8009ba6 <TIM_ITRx_SetConfig>
      break;
 8008f28:	e02c      	b.n	8008f84 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f36:	461a      	mov	r2, r3
 8008f38:	f000 fe05 	bl	8009b46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2160      	movs	r1, #96	@ 0x60
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fe2f 	bl	8009ba6 <TIM_ITRx_SetConfig>
      break;
 8008f48:	e01c      	b.n	8008f84 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f56:	461a      	mov	r2, r3
 8008f58:	f000 fdc6 	bl	8009ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2140      	movs	r1, #64	@ 0x40
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 fe1f 	bl	8009ba6 <TIM_ITRx_SetConfig>
      break;
 8008f68:	e00c      	b.n	8008f84 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4619      	mov	r1, r3
 8008f74:	4610      	mov	r0, r2
 8008f76:	f000 fe16 	bl	8009ba6 <TIM_ITRx_SetConfig>
      break;
 8008f7a:	e003      	b.n	8008f84 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f80:	e000      	b.n	8008f84 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	00100070 	.word	0x00100070
 8008fa4:	00100060 	.word	0x00100060
 8008fa8:	00100050 	.word	0x00100050
 8008fac:	00100040 	.word	0x00100040
 8008fb0:	00100030 	.word	0x00100030
 8008fb4:	00100020 	.word	0x00100020

08008fb8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800906c:	b480      	push	{r7}
 800906e:	b087      	sub	sp, #28
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	460b      	mov	r3, r1
 8009076:	607a      	str	r2, [r7, #4]
 8009078:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d101      	bne.n	8009088 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e14a      	b.n	800931e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b01      	cmp	r3, #1
 8009092:	f040 80dd 	bne.w	8009250 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8009096:	7afb      	ldrb	r3, [r7, #11]
 8009098:	2b1f      	cmp	r3, #31
 800909a:	f200 80d6 	bhi.w	800924a <HAL_TIM_RegisterCallback+0x1de>
 800909e:	a201      	add	r2, pc, #4	@ (adr r2, 80090a4 <HAL_TIM_RegisterCallback+0x38>)
 80090a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a4:	08009125 	.word	0x08009125
 80090a8:	0800912d 	.word	0x0800912d
 80090ac:	08009135 	.word	0x08009135
 80090b0:	0800913d 	.word	0x0800913d
 80090b4:	08009145 	.word	0x08009145
 80090b8:	0800914d 	.word	0x0800914d
 80090bc:	08009155 	.word	0x08009155
 80090c0:	0800915d 	.word	0x0800915d
 80090c4:	08009165 	.word	0x08009165
 80090c8:	0800916d 	.word	0x0800916d
 80090cc:	08009175 	.word	0x08009175
 80090d0:	0800917d 	.word	0x0800917d
 80090d4:	08009185 	.word	0x08009185
 80090d8:	0800918d 	.word	0x0800918d
 80090dc:	08009197 	.word	0x08009197
 80090e0:	080091a1 	.word	0x080091a1
 80090e4:	080091ab 	.word	0x080091ab
 80090e8:	080091b5 	.word	0x080091b5
 80090ec:	080091bf 	.word	0x080091bf
 80090f0:	080091c9 	.word	0x080091c9
 80090f4:	080091d3 	.word	0x080091d3
 80090f8:	080091dd 	.word	0x080091dd
 80090fc:	080091e7 	.word	0x080091e7
 8009100:	080091f1 	.word	0x080091f1
 8009104:	080091fb 	.word	0x080091fb
 8009108:	08009205 	.word	0x08009205
 800910c:	0800920f 	.word	0x0800920f
 8009110:	08009219 	.word	0x08009219
 8009114:	08009223 	.word	0x08009223
 8009118:	0800922d 	.word	0x0800922d
 800911c:	08009237 	.word	0x08009237
 8009120:	08009241 	.word	0x08009241
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800912a:	e0f7      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009132:	e0f3      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800913a:	e0ef      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009142:	e0eb      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800914a:	e0e7      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009152:	e0e3      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800915a:	e0df      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009162:	e0db      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800916a:	e0d7      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009172:	e0d3      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800917a:	e0cf      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009182:	e0cb      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800918a:	e0c7      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009194:	e0c2      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800919e:	e0bd      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80091a8:	e0b8      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80091b2:	e0b3      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80091bc:	e0ae      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80091c6:	e0a9      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80091d0:	e0a4      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80091da:	e09f      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80091e4:	e09a      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80091ee:	e095      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80091f8:	e090      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009202:	e08b      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800920c:	e086      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009216:	e081      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009220:	e07c      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800922a:	e077      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009234:	e072      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800923e:	e06d      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009248:	e068      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	75fb      	strb	r3, [r7, #23]
        break;
 800924e:	e065      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b00      	cmp	r3, #0
 800925a:	d15d      	bne.n	8009318 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800925c:	7afb      	ldrb	r3, [r7, #11]
 800925e:	2b0d      	cmp	r3, #13
 8009260:	d857      	bhi.n	8009312 <HAL_TIM_RegisterCallback+0x2a6>
 8009262:	a201      	add	r2, pc, #4	@ (adr r2, 8009268 <HAL_TIM_RegisterCallback+0x1fc>)
 8009264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009268:	080092a1 	.word	0x080092a1
 800926c:	080092a9 	.word	0x080092a9
 8009270:	080092b1 	.word	0x080092b1
 8009274:	080092b9 	.word	0x080092b9
 8009278:	080092c1 	.word	0x080092c1
 800927c:	080092c9 	.word	0x080092c9
 8009280:	080092d1 	.word	0x080092d1
 8009284:	080092d9 	.word	0x080092d9
 8009288:	080092e1 	.word	0x080092e1
 800928c:	080092e9 	.word	0x080092e9
 8009290:	080092f1 	.word	0x080092f1
 8009294:	080092f9 	.word	0x080092f9
 8009298:	08009301 	.word	0x08009301
 800929c:	08009309 	.word	0x08009309
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80092a6:	e039      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80092ae:	e035      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80092b6:	e031      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80092be:	e02d      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80092c6:	e029      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80092ce:	e025      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80092d6:	e021      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80092de:	e01d      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80092e6:	e019      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80092ee:	e015      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80092f6:	e011      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80092fe:	e00d      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009306:	e009      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009310:	e004      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	75fb      	strb	r3, [r7, #23]
        break;
 8009316:	e001      	b.n	800931c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800931c:	7dfb      	ldrb	r3, [r7, #23]
}
 800931e:	4618      	mov	r0, r3
 8009320:	371c      	adds	r7, #28
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop

0800932c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a4c      	ldr	r2, [pc, #304]	@ (8009470 <TIM_Base_SetConfig+0x144>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d017      	beq.n	8009374 <TIM_Base_SetConfig+0x48>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800934a:	d013      	beq.n	8009374 <TIM_Base_SetConfig+0x48>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a49      	ldr	r2, [pc, #292]	@ (8009474 <TIM_Base_SetConfig+0x148>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d00f      	beq.n	8009374 <TIM_Base_SetConfig+0x48>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a48      	ldr	r2, [pc, #288]	@ (8009478 <TIM_Base_SetConfig+0x14c>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d00b      	beq.n	8009374 <TIM_Base_SetConfig+0x48>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a47      	ldr	r2, [pc, #284]	@ (800947c <TIM_Base_SetConfig+0x150>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d007      	beq.n	8009374 <TIM_Base_SetConfig+0x48>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a46      	ldr	r2, [pc, #280]	@ (8009480 <TIM_Base_SetConfig+0x154>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d003      	beq.n	8009374 <TIM_Base_SetConfig+0x48>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a45      	ldr	r2, [pc, #276]	@ (8009484 <TIM_Base_SetConfig+0x158>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d108      	bne.n	8009386 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800937a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	4313      	orrs	r3, r2
 8009384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a39      	ldr	r2, [pc, #228]	@ (8009470 <TIM_Base_SetConfig+0x144>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d023      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009394:	d01f      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a36      	ldr	r2, [pc, #216]	@ (8009474 <TIM_Base_SetConfig+0x148>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d01b      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a35      	ldr	r2, [pc, #212]	@ (8009478 <TIM_Base_SetConfig+0x14c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d017      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a34      	ldr	r2, [pc, #208]	@ (800947c <TIM_Base_SetConfig+0x150>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d013      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a33      	ldr	r2, [pc, #204]	@ (8009480 <TIM_Base_SetConfig+0x154>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d00f      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a33      	ldr	r2, [pc, #204]	@ (8009488 <TIM_Base_SetConfig+0x15c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d00b      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a32      	ldr	r2, [pc, #200]	@ (800948c <TIM_Base_SetConfig+0x160>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d007      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a31      	ldr	r2, [pc, #196]	@ (8009490 <TIM_Base_SetConfig+0x164>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d003      	beq.n	80093d6 <TIM_Base_SetConfig+0xaa>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a2c      	ldr	r2, [pc, #176]	@ (8009484 <TIM_Base_SetConfig+0x158>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d108      	bne.n	80093e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a18      	ldr	r2, [pc, #96]	@ (8009470 <TIM_Base_SetConfig+0x144>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d013      	beq.n	800943c <TIM_Base_SetConfig+0x110>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a1a      	ldr	r2, [pc, #104]	@ (8009480 <TIM_Base_SetConfig+0x154>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00f      	beq.n	800943c <TIM_Base_SetConfig+0x110>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a1a      	ldr	r2, [pc, #104]	@ (8009488 <TIM_Base_SetConfig+0x15c>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d00b      	beq.n	800943c <TIM_Base_SetConfig+0x110>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a19      	ldr	r2, [pc, #100]	@ (800948c <TIM_Base_SetConfig+0x160>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d007      	beq.n	800943c <TIM_Base_SetConfig+0x110>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a18      	ldr	r2, [pc, #96]	@ (8009490 <TIM_Base_SetConfig+0x164>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d003      	beq.n	800943c <TIM_Base_SetConfig+0x110>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a13      	ldr	r2, [pc, #76]	@ (8009484 <TIM_Base_SetConfig+0x158>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d103      	bne.n	8009444 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	691a      	ldr	r2, [r3, #16]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b01      	cmp	r3, #1
 8009454:	d105      	bne.n	8009462 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	f023 0201 	bic.w	r2, r3, #1
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	611a      	str	r2, [r3, #16]
  }
}
 8009462:	bf00      	nop
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	40012c00 	.word	0x40012c00
 8009474:	40000400 	.word	0x40000400
 8009478:	40000800 	.word	0x40000800
 800947c:	40000c00 	.word	0x40000c00
 8009480:	40013400 	.word	0x40013400
 8009484:	40015000 	.word	0x40015000
 8009488:	40014000 	.word	0x40014000
 800948c:	40014400 	.word	0x40014400
 8009490:	40014800 	.word	0x40014800

08009494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009494:	b480      	push	{r7}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	f023 0201 	bic.w	r2, r3, #1
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f023 0303 	bic.w	r3, r3, #3
 80094ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f023 0302 	bic.w	r3, r3, #2
 80094e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a30      	ldr	r2, [pc, #192]	@ (80095b0 <TIM_OC1_SetConfig+0x11c>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d013      	beq.n	800951c <TIM_OC1_SetConfig+0x88>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a2f      	ldr	r2, [pc, #188]	@ (80095b4 <TIM_OC1_SetConfig+0x120>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d00f      	beq.n	800951c <TIM_OC1_SetConfig+0x88>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a2e      	ldr	r2, [pc, #184]	@ (80095b8 <TIM_OC1_SetConfig+0x124>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d00b      	beq.n	800951c <TIM_OC1_SetConfig+0x88>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a2d      	ldr	r2, [pc, #180]	@ (80095bc <TIM_OC1_SetConfig+0x128>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d007      	beq.n	800951c <TIM_OC1_SetConfig+0x88>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a2c      	ldr	r2, [pc, #176]	@ (80095c0 <TIM_OC1_SetConfig+0x12c>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d003      	beq.n	800951c <TIM_OC1_SetConfig+0x88>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a2b      	ldr	r2, [pc, #172]	@ (80095c4 <TIM_OC1_SetConfig+0x130>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d10c      	bne.n	8009536 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	f023 0308 	bic.w	r3, r3, #8
 8009522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	4313      	orrs	r3, r2
 800952c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f023 0304 	bic.w	r3, r3, #4
 8009534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a1d      	ldr	r2, [pc, #116]	@ (80095b0 <TIM_OC1_SetConfig+0x11c>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d013      	beq.n	8009566 <TIM_OC1_SetConfig+0xd2>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a1c      	ldr	r2, [pc, #112]	@ (80095b4 <TIM_OC1_SetConfig+0x120>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d00f      	beq.n	8009566 <TIM_OC1_SetConfig+0xd2>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a1b      	ldr	r2, [pc, #108]	@ (80095b8 <TIM_OC1_SetConfig+0x124>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d00b      	beq.n	8009566 <TIM_OC1_SetConfig+0xd2>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a1a      	ldr	r2, [pc, #104]	@ (80095bc <TIM_OC1_SetConfig+0x128>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d007      	beq.n	8009566 <TIM_OC1_SetConfig+0xd2>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a19      	ldr	r2, [pc, #100]	@ (80095c0 <TIM_OC1_SetConfig+0x12c>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d003      	beq.n	8009566 <TIM_OC1_SetConfig+0xd2>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a18      	ldr	r2, [pc, #96]	@ (80095c4 <TIM_OC1_SetConfig+0x130>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d111      	bne.n	800958a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800956c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	4313      	orrs	r3, r2
 800957e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	4313      	orrs	r3, r2
 8009588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	621a      	str	r2, [r3, #32]
}
 80095a4:	bf00      	nop
 80095a6:	371c      	adds	r7, #28
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	40012c00 	.word	0x40012c00
 80095b4:	40013400 	.word	0x40013400
 80095b8:	40014000 	.word	0x40014000
 80095bc:	40014400 	.word	0x40014400
 80095c0:	40014800 	.word	0x40014800
 80095c4:	40015000 	.word	0x40015000

080095c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b087      	sub	sp, #28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	f023 0210 	bic.w	r2, r3, #16
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	021b      	lsls	r3, r3, #8
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	4313      	orrs	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f023 0320 	bic.w	r3, r3, #32
 8009616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	011b      	lsls	r3, r3, #4
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	4313      	orrs	r3, r2
 8009622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a2c      	ldr	r2, [pc, #176]	@ (80096d8 <TIM_OC2_SetConfig+0x110>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d007      	beq.n	800963c <TIM_OC2_SetConfig+0x74>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a2b      	ldr	r2, [pc, #172]	@ (80096dc <TIM_OC2_SetConfig+0x114>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d003      	beq.n	800963c <TIM_OC2_SetConfig+0x74>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a2a      	ldr	r2, [pc, #168]	@ (80096e0 <TIM_OC2_SetConfig+0x118>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d10d      	bne.n	8009658 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009656:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a1f      	ldr	r2, [pc, #124]	@ (80096d8 <TIM_OC2_SetConfig+0x110>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d013      	beq.n	8009688 <TIM_OC2_SetConfig+0xc0>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a1e      	ldr	r2, [pc, #120]	@ (80096dc <TIM_OC2_SetConfig+0x114>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d00f      	beq.n	8009688 <TIM_OC2_SetConfig+0xc0>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a1e      	ldr	r2, [pc, #120]	@ (80096e4 <TIM_OC2_SetConfig+0x11c>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d00b      	beq.n	8009688 <TIM_OC2_SetConfig+0xc0>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a1d      	ldr	r2, [pc, #116]	@ (80096e8 <TIM_OC2_SetConfig+0x120>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d007      	beq.n	8009688 <TIM_OC2_SetConfig+0xc0>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a1c      	ldr	r2, [pc, #112]	@ (80096ec <TIM_OC2_SetConfig+0x124>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d003      	beq.n	8009688 <TIM_OC2_SetConfig+0xc0>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a17      	ldr	r2, [pc, #92]	@ (80096e0 <TIM_OC2_SetConfig+0x118>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d113      	bne.n	80096b0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800968e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	695b      	ldr	r3, [r3, #20]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	621a      	str	r2, [r3, #32]
}
 80096ca:	bf00      	nop
 80096cc:	371c      	adds	r7, #28
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	40012c00 	.word	0x40012c00
 80096dc:	40013400 	.word	0x40013400
 80096e0:	40015000 	.word	0x40015000
 80096e4:	40014000 	.word	0x40014000
 80096e8:	40014400 	.word	0x40014400
 80096ec:	40014800 	.word	0x40014800

080096f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b087      	sub	sp, #28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800971e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 0303 	bic.w	r3, r3, #3
 800972a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	4313      	orrs	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800973c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	021b      	lsls	r3, r3, #8
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	4313      	orrs	r3, r2
 8009748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a2b      	ldr	r2, [pc, #172]	@ (80097fc <TIM_OC3_SetConfig+0x10c>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d007      	beq.n	8009762 <TIM_OC3_SetConfig+0x72>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a2a      	ldr	r2, [pc, #168]	@ (8009800 <TIM_OC3_SetConfig+0x110>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d003      	beq.n	8009762 <TIM_OC3_SetConfig+0x72>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a29      	ldr	r2, [pc, #164]	@ (8009804 <TIM_OC3_SetConfig+0x114>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d10d      	bne.n	800977e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	021b      	lsls	r3, r3, #8
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	4313      	orrs	r3, r2
 8009774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800977c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a1e      	ldr	r2, [pc, #120]	@ (80097fc <TIM_OC3_SetConfig+0x10c>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d013      	beq.n	80097ae <TIM_OC3_SetConfig+0xbe>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a1d      	ldr	r2, [pc, #116]	@ (8009800 <TIM_OC3_SetConfig+0x110>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d00f      	beq.n	80097ae <TIM_OC3_SetConfig+0xbe>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a1d      	ldr	r2, [pc, #116]	@ (8009808 <TIM_OC3_SetConfig+0x118>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d00b      	beq.n	80097ae <TIM_OC3_SetConfig+0xbe>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a1c      	ldr	r2, [pc, #112]	@ (800980c <TIM_OC3_SetConfig+0x11c>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d007      	beq.n	80097ae <TIM_OC3_SetConfig+0xbe>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a1b      	ldr	r2, [pc, #108]	@ (8009810 <TIM_OC3_SetConfig+0x120>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d003      	beq.n	80097ae <TIM_OC3_SetConfig+0xbe>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a16      	ldr	r2, [pc, #88]	@ (8009804 <TIM_OC3_SetConfig+0x114>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d113      	bne.n	80097d6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	011b      	lsls	r3, r3, #4
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	011b      	lsls	r3, r3, #4
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	697a      	ldr	r2, [r7, #20]
 80097ee:	621a      	str	r2, [r3, #32]
}
 80097f0:	bf00      	nop
 80097f2:	371c      	adds	r7, #28
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	40012c00 	.word	0x40012c00
 8009800:	40013400 	.word	0x40013400
 8009804:	40015000 	.word	0x40015000
 8009808:	40014000 	.word	0x40014000
 800980c:	40014400 	.word	0x40014400
 8009810:	40014800 	.word	0x40014800

08009814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a1b      	ldr	r3, [r3, #32]
 8009828:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800984e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	021b      	lsls	r3, r3, #8
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	4313      	orrs	r3, r2
 800985a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	031b      	lsls	r3, r3, #12
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	4313      	orrs	r3, r2
 800986e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a2c      	ldr	r2, [pc, #176]	@ (8009924 <TIM_OC4_SetConfig+0x110>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d007      	beq.n	8009888 <TIM_OC4_SetConfig+0x74>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a2b      	ldr	r2, [pc, #172]	@ (8009928 <TIM_OC4_SetConfig+0x114>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d003      	beq.n	8009888 <TIM_OC4_SetConfig+0x74>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a2a      	ldr	r2, [pc, #168]	@ (800992c <TIM_OC4_SetConfig+0x118>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d10d      	bne.n	80098a4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800988e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	031b      	lsls	r3, r3, #12
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	4313      	orrs	r3, r2
 800989a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80098a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a1f      	ldr	r2, [pc, #124]	@ (8009924 <TIM_OC4_SetConfig+0x110>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d013      	beq.n	80098d4 <TIM_OC4_SetConfig+0xc0>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a1e      	ldr	r2, [pc, #120]	@ (8009928 <TIM_OC4_SetConfig+0x114>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d00f      	beq.n	80098d4 <TIM_OC4_SetConfig+0xc0>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a1e      	ldr	r2, [pc, #120]	@ (8009930 <TIM_OC4_SetConfig+0x11c>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d00b      	beq.n	80098d4 <TIM_OC4_SetConfig+0xc0>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a1d      	ldr	r2, [pc, #116]	@ (8009934 <TIM_OC4_SetConfig+0x120>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d007      	beq.n	80098d4 <TIM_OC4_SetConfig+0xc0>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a1c      	ldr	r2, [pc, #112]	@ (8009938 <TIM_OC4_SetConfig+0x124>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d003      	beq.n	80098d4 <TIM_OC4_SetConfig+0xc0>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a17      	ldr	r2, [pc, #92]	@ (800992c <TIM_OC4_SetConfig+0x118>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d113      	bne.n	80098fc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80098da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80098e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	019b      	lsls	r3, r3, #6
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	019b      	lsls	r3, r3, #6
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	621a      	str	r2, [r3, #32]
}
 8009916:	bf00      	nop
 8009918:	371c      	adds	r7, #28
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	40012c00 	.word	0x40012c00
 8009928:	40013400 	.word	0x40013400
 800992c:	40015000 	.word	0x40015000
 8009930:	40014000 	.word	0x40014000
 8009934:	40014400 	.word	0x40014400
 8009938:	40014800 	.word	0x40014800

0800993c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800993c:	b480      	push	{r7}
 800993e:	b087      	sub	sp, #28
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800996a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800996e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	4313      	orrs	r3, r2
 8009978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009980:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	041b      	lsls	r3, r3, #16
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	4313      	orrs	r3, r2
 800998c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a19      	ldr	r2, [pc, #100]	@ (80099f8 <TIM_OC5_SetConfig+0xbc>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d013      	beq.n	80099be <TIM_OC5_SetConfig+0x82>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a18      	ldr	r2, [pc, #96]	@ (80099fc <TIM_OC5_SetConfig+0xc0>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d00f      	beq.n	80099be <TIM_OC5_SetConfig+0x82>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a17      	ldr	r2, [pc, #92]	@ (8009a00 <TIM_OC5_SetConfig+0xc4>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d00b      	beq.n	80099be <TIM_OC5_SetConfig+0x82>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a16      	ldr	r2, [pc, #88]	@ (8009a04 <TIM_OC5_SetConfig+0xc8>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d007      	beq.n	80099be <TIM_OC5_SetConfig+0x82>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a15      	ldr	r2, [pc, #84]	@ (8009a08 <TIM_OC5_SetConfig+0xcc>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d003      	beq.n	80099be <TIM_OC5_SetConfig+0x82>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a14      	ldr	r2, [pc, #80]	@ (8009a0c <TIM_OC5_SetConfig+0xd0>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d109      	bne.n	80099d2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	021b      	lsls	r3, r3, #8
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	621a      	str	r2, [r3, #32]
}
 80099ec:	bf00      	nop
 80099ee:	371c      	adds	r7, #28
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	40012c00 	.word	0x40012c00
 80099fc:	40013400 	.word	0x40013400
 8009a00:	40014000 	.word	0x40014000
 8009a04:	40014400 	.word	0x40014400
 8009a08:	40014800 	.word	0x40014800
 8009a0c:	40015000 	.word	0x40015000

08009a10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	051b      	lsls	r3, r3, #20
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a1a      	ldr	r2, [pc, #104]	@ (8009ad0 <TIM_OC6_SetConfig+0xc0>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d013      	beq.n	8009a94 <TIM_OC6_SetConfig+0x84>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a19      	ldr	r2, [pc, #100]	@ (8009ad4 <TIM_OC6_SetConfig+0xc4>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d00f      	beq.n	8009a94 <TIM_OC6_SetConfig+0x84>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a18      	ldr	r2, [pc, #96]	@ (8009ad8 <TIM_OC6_SetConfig+0xc8>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d00b      	beq.n	8009a94 <TIM_OC6_SetConfig+0x84>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a17      	ldr	r2, [pc, #92]	@ (8009adc <TIM_OC6_SetConfig+0xcc>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d007      	beq.n	8009a94 <TIM_OC6_SetConfig+0x84>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a16      	ldr	r2, [pc, #88]	@ (8009ae0 <TIM_OC6_SetConfig+0xd0>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d003      	beq.n	8009a94 <TIM_OC6_SetConfig+0x84>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a15      	ldr	r2, [pc, #84]	@ (8009ae4 <TIM_OC6_SetConfig+0xd4>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d109      	bne.n	8009aa8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	029b      	lsls	r3, r3, #10
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	621a      	str	r2, [r3, #32]
}
 8009ac2:	bf00      	nop
 8009ac4:	371c      	adds	r7, #28
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	40012c00 	.word	0x40012c00
 8009ad4:	40013400 	.word	0x40013400
 8009ad8:	40014000 	.word	0x40014000
 8009adc:	40014400 	.word	0x40014400
 8009ae0:	40014800 	.word	0x40014800
 8009ae4:	40015000 	.word	0x40015000

08009ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6a1b      	ldr	r3, [r3, #32]
 8009af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	f023 0201 	bic.w	r2, r3, #1
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	011b      	lsls	r3, r3, #4
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f023 030a 	bic.w	r3, r3, #10
 8009b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	621a      	str	r2, [r3, #32]
}
 8009b3a:	bf00      	nop
 8009b3c:	371c      	adds	r7, #28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b087      	sub	sp, #28
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	60f8      	str	r0, [r7, #12]
 8009b4e:	60b9      	str	r1, [r7, #8]
 8009b50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6a1b      	ldr	r3, [r3, #32]
 8009b5c:	f023 0210 	bic.w	r2, r3, #16
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	031b      	lsls	r3, r3, #12
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	011b      	lsls	r3, r3, #4
 8009b88:	697a      	ldr	r2, [r7, #20]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	693a      	ldr	r2, [r7, #16]
 8009b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	621a      	str	r2, [r3, #32]
}
 8009b9a:	bf00      	nop
 8009b9c:	371c      	adds	r7, #28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	f043 0307 	orr.w	r3, r3, #7
 8009bcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	609a      	str	r2, [r3, #8]
}
 8009bd4:	bf00      	nop
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b087      	sub	sp, #28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009bfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	021a      	lsls	r2, r3, #8
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	431a      	orrs	r2, r3
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	609a      	str	r2, [r3, #8]
}
 8009c14:	bf00      	nop
 8009c16:	371c      	adds	r7, #28
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b087      	sub	sp, #28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f003 031f 	and.w	r3, r3, #31
 8009c32:	2201      	movs	r2, #1
 8009c34:	fa02 f303 	lsl.w	r3, r2, r3
 8009c38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6a1a      	ldr	r2, [r3, #32]
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	43db      	mvns	r3, r3
 8009c42:	401a      	ands	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6a1a      	ldr	r2, [r3, #32]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f003 031f 	and.w	r3, r3, #31
 8009c52:	6879      	ldr	r1, [r7, #4]
 8009c54:	fa01 f303 	lsl.w	r3, r1, r3
 8009c58:	431a      	orrs	r2, r3
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	621a      	str	r2, [r3, #32]
}
 8009c5e:	bf00      	nop
 8009c60:	371c      	adds	r7, #28
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
	...

08009c6c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a26      	ldr	r2, [pc, #152]	@ (8009d10 <TIM_ResetCallback+0xa4>)
 8009c78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a25      	ldr	r2, [pc, #148]	@ (8009d14 <TIM_ResetCallback+0xa8>)
 8009c80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a24      	ldr	r2, [pc, #144]	@ (8009d18 <TIM_ResetCallback+0xac>)
 8009c88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a23      	ldr	r2, [pc, #140]	@ (8009d1c <TIM_ResetCallback+0xb0>)
 8009c90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a22      	ldr	r2, [pc, #136]	@ (8009d20 <TIM_ResetCallback+0xb4>)
 8009c98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a21      	ldr	r2, [pc, #132]	@ (8009d24 <TIM_ResetCallback+0xb8>)
 8009ca0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a20      	ldr	r2, [pc, #128]	@ (8009d28 <TIM_ResetCallback+0xbc>)
 8009ca8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a1f      	ldr	r2, [pc, #124]	@ (8009d2c <TIM_ResetCallback+0xc0>)
 8009cb0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8009d30 <TIM_ResetCallback+0xc4>)
 8009cb8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8009d34 <TIM_ResetCallback+0xc8>)
 8009cc0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8009d38 <TIM_ResetCallback+0xcc>)
 8009cc8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a1b      	ldr	r2, [pc, #108]	@ (8009d3c <TIM_ResetCallback+0xd0>)
 8009cd0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8009d40 <TIM_ResetCallback+0xd4>)
 8009cd8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a19      	ldr	r2, [pc, #100]	@ (8009d44 <TIM_ResetCallback+0xd8>)
 8009ce0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a18      	ldr	r2, [pc, #96]	@ (8009d48 <TIM_ResetCallback+0xdc>)
 8009ce8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a17      	ldr	r2, [pc, #92]	@ (8009d4c <TIM_ResetCallback+0xe0>)
 8009cf0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a16      	ldr	r2, [pc, #88]	@ (8009d50 <TIM_ResetCallback+0xe4>)
 8009cf8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a15      	ldr	r2, [pc, #84]	@ (8009d54 <TIM_ResetCallback+0xe8>)
 8009d00:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	08004015 	.word	0x08004015
 8009d14:	08008fb9 	.word	0x08008fb9
 8009d18:	08009031 	.word	0x08009031
 8009d1c:	08009045 	.word	0x08009045
 8009d20:	08008fe1 	.word	0x08008fe1
 8009d24:	08008ff5 	.word	0x08008ff5
 8009d28:	08008fcd 	.word	0x08008fcd
 8009d2c:	08009009 	.word	0x08009009
 8009d30:	0800901d 	.word	0x0800901d
 8009d34:	08009059 	.word	0x08009059
 8009d38:	08009e85 	.word	0x08009e85
 8009d3c:	08009e99 	.word	0x08009e99
 8009d40:	08009ead 	.word	0x08009ead
 8009d44:	08009ec1 	.word	0x08009ec1
 8009d48:	08009ed5 	.word	0x08009ed5
 8009d4c:	08009ee9 	.word	0x08009ee9
 8009d50:	08009efd 	.word	0x08009efd
 8009d54:	08009f11 	.word	0x08009f11

08009d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d101      	bne.n	8009d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	e074      	b.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a34      	ldr	r2, [pc, #208]	@ (8009e68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d009      	beq.n	8009dae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a33      	ldr	r2, [pc, #204]	@ (8009e6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d004      	beq.n	8009dae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a31      	ldr	r2, [pc, #196]	@ (8009e70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d108      	bne.n	8009dc0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009db4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a21      	ldr	r2, [pc, #132]	@ (8009e68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d022      	beq.n	8009e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009df0:	d01d      	beq.n	8009e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a1f      	ldr	r2, [pc, #124]	@ (8009e74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d018      	beq.n	8009e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a1d      	ldr	r2, [pc, #116]	@ (8009e78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d013      	beq.n	8009e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8009e7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d00e      	beq.n	8009e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a15      	ldr	r2, [pc, #84]	@ (8009e6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d009      	beq.n	8009e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a18      	ldr	r2, [pc, #96]	@ (8009e80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d004      	beq.n	8009e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a11      	ldr	r2, [pc, #68]	@ (8009e70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d10c      	bne.n	8009e48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	40012c00 	.word	0x40012c00
 8009e6c:	40013400 	.word	0x40013400
 8009e70:	40015000 	.word	0x40015000
 8009e74:	40000400 	.word	0x40000400
 8009e78:	40000800 	.word	0x40000800
 8009e7c:	40000c00 	.word	0x40000c00
 8009e80:	40014000 	.word	0x40014000

08009e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d101      	bne.n	8009f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e050      	b.n	8009fd8 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d114      	bne.n	8009f6a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fdc5 	bl	800aad8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d103      	bne.n	8009f60 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a21      	ldr	r2, [pc, #132]	@ (8009fe0 <HAL_UART_Init+0xbc>)
 8009f5c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2224      	movs	r2, #36	@ 0x24
 8009f6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f022 0201 	bic.w	r2, r2, #1
 8009f80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d002      	beq.n	8009f90 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 f8f2 	bl	800b174 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fdf3 	bl	800ab7c <UART_SetConfig>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d101      	bne.n	8009fa0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e01b      	b.n	8009fd8 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689a      	ldr	r2, [r3, #8]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009fbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f042 0201 	orr.w	r2, r2, #1
 8009fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f001 f971 	bl	800b2b8 <UART_CheckIdleState>
 8009fd6:	4603      	mov	r3, r0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	08004485 	.word	0x08004485

08009fe4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	460b      	mov	r3, r1
 8009fee:	607a      	str	r2, [r7, #4]
 8009ff0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d109      	bne.n	800a010 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a002:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e09c      	b.n	800a14a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a016:	2b20      	cmp	r3, #32
 800a018:	d16c      	bne.n	800a0f4 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a01a:	7afb      	ldrb	r3, [r7, #11]
 800a01c:	2b0c      	cmp	r3, #12
 800a01e:	d85e      	bhi.n	800a0de <HAL_UART_RegisterCallback+0xfa>
 800a020:	a201      	add	r2, pc, #4	@ (adr r2, 800a028 <HAL_UART_RegisterCallback+0x44>)
 800a022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a026:	bf00      	nop
 800a028:	0800a05d 	.word	0x0800a05d
 800a02c:	0800a067 	.word	0x0800a067
 800a030:	0800a071 	.word	0x0800a071
 800a034:	0800a07b 	.word	0x0800a07b
 800a038:	0800a085 	.word	0x0800a085
 800a03c:	0800a08f 	.word	0x0800a08f
 800a040:	0800a099 	.word	0x0800a099
 800a044:	0800a0a3 	.word	0x0800a0a3
 800a048:	0800a0ad 	.word	0x0800a0ad
 800a04c:	0800a0b7 	.word	0x0800a0b7
 800a050:	0800a0c1 	.word	0x0800a0c1
 800a054:	0800a0cb 	.word	0x0800a0cb
 800a058:	0800a0d5 	.word	0x0800a0d5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a064:	e070      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a06e:	e06b      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a078:	e066      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a082:	e061      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a08c:	e05c      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a096:	e057      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a0a0:	e052      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a0aa:	e04d      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a0b4:	e048      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a0be:	e043      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a0c8:	e03e      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a0d2:	e039      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a0dc:	e034      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	75fb      	strb	r3, [r7, #23]
        break;
 800a0f2:	e029      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d11a      	bne.n	800a134 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a0fe:	7afb      	ldrb	r3, [r7, #11]
 800a100:	2b0b      	cmp	r3, #11
 800a102:	d002      	beq.n	800a10a <HAL_UART_RegisterCallback+0x126>
 800a104:	2b0c      	cmp	r3, #12
 800a106:	d005      	beq.n	800a114 <HAL_UART_RegisterCallback+0x130>
 800a108:	e009      	b.n	800a11e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a112:	e019      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a11c:	e014      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a124:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	75fb      	strb	r3, [r7, #23]
        break;
 800a132:	e009      	b.n	800a148 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a13a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a148:	7dfb      	ldrb	r3, [r7, #23]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	371c      	adds	r7, #28
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop

0800a158 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b08a      	sub	sp, #40	@ 0x28
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	4613      	mov	r3, r2
 800a164:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a16c:	2b20      	cmp	r3, #32
 800a16e:	d167      	bne.n	800a240 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d002      	beq.n	800a17c <HAL_UART_Transmit_DMA+0x24>
 800a176:	88fb      	ldrh	r3, [r7, #6]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	e060      	b.n	800a242 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	88fa      	ldrh	r2, [r7, #6]
 800a18a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	88fa      	ldrh	r2, [r7, #6]
 800a192:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2221      	movs	r2, #33	@ 0x21
 800a1a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d028      	beq.n	800a200 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1b2:	4a26      	ldr	r2, [pc, #152]	@ (800a24c <HAL_UART_Transmit_DMA+0xf4>)
 800a1b4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1ba:	4a25      	ldr	r2, [pc, #148]	@ (800a250 <HAL_UART_Transmit_DMA+0xf8>)
 800a1bc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1c2:	4a24      	ldr	r2, [pc, #144]	@ (800a254 <HAL_UART_Transmit_DMA+0xfc>)
 800a1c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	3328      	adds	r3, #40	@ 0x28
 800a1de:	461a      	mov	r2, r3
 800a1e0:	88fb      	ldrh	r3, [r7, #6]
 800a1e2:	f7fc f9a3 	bl	800652c <HAL_DMA_Start_IT>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d009      	beq.n	800a200 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2210      	movs	r2, #16
 800a1f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2220      	movs	r2, #32
 800a1f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e020      	b.n	800a242 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2240      	movs	r2, #64	@ 0x40
 800a206:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	3308      	adds	r3, #8
 800a20e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	e853 3f00 	ldrex	r3, [r3]
 800a216:	613b      	str	r3, [r7, #16]
   return(result);
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a21e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3308      	adds	r3, #8
 800a226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a228:	623a      	str	r2, [r7, #32]
 800a22a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22c:	69f9      	ldr	r1, [r7, #28]
 800a22e:	6a3a      	ldr	r2, [r7, #32]
 800a230:	e841 2300 	strex	r3, r2, [r1]
 800a234:	61bb      	str	r3, [r7, #24]
   return(result);
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1e5      	bne.n	800a208 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	e000      	b.n	800a242 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a240:	2302      	movs	r3, #2
  }
}
 800a242:	4618      	mov	r0, r3
 800a244:	3728      	adds	r7, #40	@ 0x28
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	0800b783 	.word	0x0800b783
 800a250:	0800b821 	.word	0x0800b821
 800a254:	0800b9bb 	.word	0x0800b9bb

0800a258 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08a      	sub	sp, #40	@ 0x28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	4613      	mov	r3, r2
 800a264:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a26c:	2b20      	cmp	r3, #32
 800a26e:	d137      	bne.n	800a2e0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d002      	beq.n	800a27c <HAL_UART_Receive_DMA+0x24>
 800a276:	88fb      	ldrh	r3, [r7, #6]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d101      	bne.n	800a280 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e030      	b.n	800a2e2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a18      	ldr	r2, [pc, #96]	@ (800a2ec <HAL_UART_Receive_DMA+0x94>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d01f      	beq.n	800a2d0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d018      	beq.n	800a2d0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	e853 3f00 	ldrex	r3, [r3]
 800a2aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a2b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2bc:	623b      	str	r3, [r7, #32]
 800a2be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c0:	69f9      	ldr	r1, [r7, #28]
 800a2c2:	6a3a      	ldr	r2, [r7, #32]
 800a2c4:	e841 2300 	strex	r3, r2, [r1]
 800a2c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1e6      	bne.n	800a29e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a2d0:	88fb      	ldrh	r3, [r7, #6]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	68b9      	ldr	r1, [r7, #8]
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f001 f906 	bl	800b4e8 <UART_Start_Receive_DMA>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	e000      	b.n	800a2e2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a2e0:	2302      	movs	r3, #2
  }
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3728      	adds	r7, #40	@ 0x28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	40008000 	.word	0x40008000

0800a2f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b0ba      	sub	sp, #232	@ 0xe8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a316:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a31a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a31e:	4013      	ands	r3, r2
 800a320:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d11b      	bne.n	800a364 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a32c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a330:	f003 0320 	and.w	r3, r3, #32
 800a334:	2b00      	cmp	r3, #0
 800a336:	d015      	beq.n	800a364 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a33c:	f003 0320 	and.w	r3, r3, #32
 800a340:	2b00      	cmp	r3, #0
 800a342:	d105      	bne.n	800a350 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d009      	beq.n	800a364 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 82f3 	beq.w	800a940 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	4798      	blx	r3
      }
      return;
 800a362:	e2ed      	b.n	800a940 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a364:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f000 8129 	beq.w	800a5c0 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a36e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a372:	4b90      	ldr	r3, [pc, #576]	@ (800a5b4 <HAL_UART_IRQHandler+0x2c4>)
 800a374:	4013      	ands	r3, r2
 800a376:	2b00      	cmp	r3, #0
 800a378:	d106      	bne.n	800a388 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a37a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a37e:	4b8e      	ldr	r3, [pc, #568]	@ (800a5b8 <HAL_UART_IRQHandler+0x2c8>)
 800a380:	4013      	ands	r3, r2
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 811c 	beq.w	800a5c0 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a38c:	f003 0301 	and.w	r3, r3, #1
 800a390:	2b00      	cmp	r3, #0
 800a392:	d011      	beq.n	800a3b8 <HAL_UART_IRQHandler+0xc8>
 800a394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00b      	beq.n	800a3b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3ae:	f043 0201 	orr.w	r2, r3, #1
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3bc:	f003 0302 	and.w	r3, r3, #2
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d011      	beq.n	800a3e8 <HAL_UART_IRQHandler+0xf8>
 800a3c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3c8:	f003 0301 	and.w	r3, r3, #1
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00b      	beq.n	800a3e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2202      	movs	r2, #2
 800a3d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3de:	f043 0204 	orr.w	r2, r3, #4
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3ec:	f003 0304 	and.w	r3, r3, #4
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d011      	beq.n	800a418 <HAL_UART_IRQHandler+0x128>
 800a3f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3f8:	f003 0301 	and.w	r3, r3, #1
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00b      	beq.n	800a418 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2204      	movs	r2, #4
 800a406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a40e:	f043 0202 	orr.w	r2, r3, #2
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a41c:	f003 0308 	and.w	r3, r3, #8
 800a420:	2b00      	cmp	r3, #0
 800a422:	d017      	beq.n	800a454 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a428:	f003 0320 	and.w	r3, r3, #32
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d105      	bne.n	800a43c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a430:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a434:	4b5f      	ldr	r3, [pc, #380]	@ (800a5b4 <HAL_UART_IRQHandler+0x2c4>)
 800a436:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00b      	beq.n	800a454 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2208      	movs	r2, #8
 800a442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a44a:	f043 0208 	orr.w	r2, r3, #8
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d012      	beq.n	800a486 <HAL_UART_IRQHandler+0x196>
 800a460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a464:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00c      	beq.n	800a486 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a474:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a47c:	f043 0220 	orr.w	r2, r3, #32
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 8259 	beq.w	800a944 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a496:	f003 0320 	and.w	r3, r3, #32
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d013      	beq.n	800a4c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a49e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4a2:	f003 0320 	and.w	r3, r3, #32
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d105      	bne.n	800a4b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a4aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d007      	beq.n	800a4c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4da:	2b40      	cmp	r3, #64	@ 0x40
 800a4dc:	d005      	beq.n	800a4ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a4de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a4e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d058      	beq.n	800a59c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f001 f8e3 	bl	800b6b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4fa:	2b40      	cmp	r3, #64	@ 0x40
 800a4fc:	d148      	bne.n	800a590 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3308      	adds	r3, #8
 800a504:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a508:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a50c:	e853 3f00 	ldrex	r3, [r3]
 800a510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a514:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a518:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a51c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3308      	adds	r3, #8
 800a526:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a52a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a52e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a532:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a536:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a53a:	e841 2300 	strex	r3, r2, [r1]
 800a53e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1d9      	bne.n	800a4fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a550:	2b00      	cmp	r3, #0
 800a552:	d017      	beq.n	800a584 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a55a:	4a18      	ldr	r2, [pc, #96]	@ (800a5bc <HAL_UART_IRQHandler+0x2cc>)
 800a55c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a564:	4618      	mov	r0, r3
 800a566:	f7fc f8b5 	bl	80066d4 <HAL_DMA_Abort_IT>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d01f      	beq.n	800a5b0 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a57e:	4610      	mov	r0, r2
 800a580:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a582:	e015      	b.n	800a5b0 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a58e:	e00f      	b.n	800a5b0 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a59a:	e009      	b.n	800a5b0 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a5ae:	e1c9      	b.n	800a944 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5b0:	bf00      	nop
    return;
 800a5b2:	e1c7      	b.n	800a944 <HAL_UART_IRQHandler+0x654>
 800a5b4:	10000001 	.word	0x10000001
 800a5b8:	04000120 	.word	0x04000120
 800a5bc:	0800ba3f 	.word	0x0800ba3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	f040 8157 	bne.w	800a878 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5ce:	f003 0310 	and.w	r3, r3, #16
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f000 8150 	beq.w	800a878 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5dc:	f003 0310 	and.w	r3, r3, #16
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f000 8149 	beq.w	800a878 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2210      	movs	r2, #16
 800a5ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5f8:	2b40      	cmp	r3, #64	@ 0x40
 800a5fa:	f040 80bd 	bne.w	800a778 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a60c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a610:	2b00      	cmp	r3, #0
 800a612:	f000 8199 	beq.w	800a948 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a61c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a620:	429a      	cmp	r2, r3
 800a622:	f080 8191 	bcs.w	800a948 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a62c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 0320 	and.w	r3, r3, #32
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f040 8087 	bne.w	800a752 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a650:	e853 3f00 	ldrex	r3, [r3]
 800a654:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a658:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a65c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a660:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	461a      	mov	r2, r3
 800a66a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a66e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a672:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a676:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a67a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a67e:	e841 2300 	strex	r3, r2, [r1]
 800a682:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a686:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1da      	bne.n	800a644 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	3308      	adds	r3, #8
 800a694:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a696:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a698:	e853 3f00 	ldrex	r3, [r3]
 800a69c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a69e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a6a0:	f023 0301 	bic.w	r3, r3, #1
 800a6a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a6b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a6b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a6ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a6be:	e841 2300 	strex	r3, r2, [r1]
 800a6c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a6c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1e1      	bne.n	800a68e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3308      	adds	r3, #8
 800a6d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6d4:	e853 3f00 	ldrex	r3, [r3]
 800a6d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a6da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3308      	adds	r3, #8
 800a6ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a6ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a6f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a6f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a6f6:	e841 2300 	strex	r3, r2, [r1]
 800a6fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a6fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1e3      	bne.n	800a6ca <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2220      	movs	r2, #32
 800a706:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a718:	e853 3f00 	ldrex	r3, [r3]
 800a71c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a71e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a720:	f023 0310 	bic.w	r3, r3, #16
 800a724:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	461a      	mov	r2, r3
 800a72e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a732:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a734:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a736:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a738:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a73a:	e841 2300 	strex	r3, r2, [r1]
 800a73e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e4      	bne.n	800a710 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fb ff68 	bl	8006622 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2202      	movs	r2, #2
 800a756:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a76a:	b292      	uxth	r2, r2
 800a76c:	1a8a      	subs	r2, r1, r2
 800a76e:	b292      	uxth	r2, r2
 800a770:	4611      	mov	r1, r2
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a776:	e0e7      	b.n	800a948 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a784:	b29b      	uxth	r3, r3
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a792:	b29b      	uxth	r3, r3
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 80d9 	beq.w	800a94c <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800a79a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f000 80d4 	beq.w	800a94c <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ac:	e853 3f00 	ldrex	r3, [r3]
 800a7b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a7c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7c8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7ce:	e841 2300 	strex	r3, r2, [r1]
 800a7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1e4      	bne.n	800a7a4 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3308      	adds	r3, #8
 800a7e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e4:	e853 3f00 	ldrex	r3, [r3]
 800a7e8:	623b      	str	r3, [r7, #32]
   return(result);
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a7f0:	f023 0301 	bic.w	r3, r3, #1
 800a7f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a802:	633a      	str	r2, [r7, #48]	@ 0x30
 800a804:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a80a:	e841 2300 	strex	r3, r2, [r1]
 800a80e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1e1      	bne.n	800a7da <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2220      	movs	r2, #32
 800a81a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	e853 3f00 	ldrex	r3, [r3]
 800a836:	60fb      	str	r3, [r7, #12]
   return(result);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f023 0310 	bic.w	r3, r3, #16
 800a83e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	461a      	mov	r2, r3
 800a848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a84c:	61fb      	str	r3, [r7, #28]
 800a84e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a850:	69b9      	ldr	r1, [r7, #24]
 800a852:	69fa      	ldr	r2, [r7, #28]
 800a854:	e841 2300 	strex	r3, r2, [r1]
 800a858:	617b      	str	r3, [r7, #20]
   return(result);
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1e4      	bne.n	800a82a <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2202      	movs	r2, #2
 800a864:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a86c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a870:	4611      	mov	r1, r2
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a876:	e069      	b.n	800a94c <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a87c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d010      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x5b6>
 800a884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a888:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00a      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a898:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a8a4:	e055      	b.n	800a952 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a8a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d014      	beq.n	800a8dc <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a8b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d105      	bne.n	800a8ca <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a8be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d008      	beq.n	800a8dc <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d03e      	beq.n	800a950 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	4798      	blx	r3
    }
    return;
 800a8da:	e039      	b.n	800a950 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d009      	beq.n	800a8fc <HAL_UART_IRQHandler+0x60c>
 800a8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f001 f8ba 	bl	800ba6e <UART_EndTransmit_IT>
    return;
 800a8fa:	e02a      	b.n	800a952 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a8fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a900:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00b      	beq.n	800a920 <HAL_UART_IRQHandler+0x630>
 800a908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a90c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a910:	2b00      	cmp	r3, #0
 800a912:	d005      	beq.n	800a920 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a91e:	e018      	b.n	800a952 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d012      	beq.n	800a952 <HAL_UART_IRQHandler+0x662>
 800a92c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a930:	2b00      	cmp	r3, #0
 800a932:	da0e      	bge.n	800a952 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a93e:	e008      	b.n	800a952 <HAL_UART_IRQHandler+0x662>
      return;
 800a940:	bf00      	nop
 800a942:	e006      	b.n	800a952 <HAL_UART_IRQHandler+0x662>
    return;
 800a944:	bf00      	nop
 800a946:	e004      	b.n	800a952 <HAL_UART_IRQHandler+0x662>
      return;
 800a948:	bf00      	nop
 800a94a:	e002      	b.n	800a952 <HAL_UART_IRQHandler+0x662>
      return;
 800a94c:	bf00      	nop
 800a94e:	e000      	b.n	800a952 <HAL_UART_IRQHandler+0x662>
    return;
 800a950:	bf00      	nop
  }
}
 800a952:	37e8      	adds	r7, #232	@ 0xe8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a9ec:	bf00      	nop
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	460b      	mov	r3, r1
 800aa02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a09      	ldr	r2, [pc, #36]	@ (800aa44 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d009      	beq.n	800aa38 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	430a      	orrs	r2, r1
 800aa36:	615a      	str	r2, [r3, #20]
  }
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr
 800aa44:	40008000 	.word	0x40008000

0800aa48 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a18      	ldr	r2, [pc, #96]	@ (800aab8 <HAL_UART_EnableReceiverTimeout+0x70>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d027      	beq.n	800aaaa <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa60:	2b20      	cmp	r3, #32
 800aa62:	d120      	bne.n	800aaa6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d101      	bne.n	800aa72 <HAL_UART_EnableReceiverTimeout+0x2a>
 800aa6e:	2302      	movs	r3, #2
 800aa70:	e01c      	b.n	800aaac <HAL_UART_EnableReceiverTimeout+0x64>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2201      	movs	r2, #1
 800aa76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2224      	movs	r2, #36	@ 0x24
 800aa7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	685a      	ldr	r2, [r3, #4]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800aa90:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2220      	movs	r2, #32
 800aa96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	e002      	b.n	800aaac <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	e000      	b.n	800aaac <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
  }
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	40008000 	.word	0x40008000

0800aabc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
	...

0800aad8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a1a      	ldr	r2, [pc, #104]	@ (800ab4c <UART_InitCallbacksToDefault+0x74>)
 800aae4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a19      	ldr	r2, [pc, #100]	@ (800ab50 <UART_InitCallbacksToDefault+0x78>)
 800aaec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a18      	ldr	r2, [pc, #96]	@ (800ab54 <UART_InitCallbacksToDefault+0x7c>)
 800aaf4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a17      	ldr	r2, [pc, #92]	@ (800ab58 <UART_InitCallbacksToDefault+0x80>)
 800aafc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a16      	ldr	r2, [pc, #88]	@ (800ab5c <UART_InitCallbacksToDefault+0x84>)
 800ab04:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a15      	ldr	r2, [pc, #84]	@ (800ab60 <UART_InitCallbacksToDefault+0x88>)
 800ab0c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a14      	ldr	r2, [pc, #80]	@ (800ab64 <UART_InitCallbacksToDefault+0x8c>)
 800ab14:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a13      	ldr	r2, [pc, #76]	@ (800ab68 <UART_InitCallbacksToDefault+0x90>)
 800ab1c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a12      	ldr	r2, [pc, #72]	@ (800ab6c <UART_InitCallbacksToDefault+0x94>)
 800ab24:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a11      	ldr	r2, [pc, #68]	@ (800ab70 <UART_InitCallbacksToDefault+0x98>)
 800ab2c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a10      	ldr	r2, [pc, #64]	@ (800ab74 <UART_InitCallbacksToDefault+0x9c>)
 800ab34:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a0f      	ldr	r2, [pc, #60]	@ (800ab78 <UART_InitCallbacksToDefault+0xa0>)
 800ab3c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800ab40:	bf00      	nop
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr
 800ab4c:	0800a96d 	.word	0x0800a96d
 800ab50:	0800a959 	.word	0x0800a959
 800ab54:	0800a995 	.word	0x0800a995
 800ab58:	0800a981 	.word	0x0800a981
 800ab5c:	0800a9a9 	.word	0x0800a9a9
 800ab60:	0800a9bd 	.word	0x0800a9bd
 800ab64:	0800a9d1 	.word	0x0800a9d1
 800ab68:	0800a9e5 	.word	0x0800a9e5
 800ab6c:	0800bac9 	.word	0x0800bac9
 800ab70:	0800badd 	.word	0x0800badd
 800ab74:	0800baf1 	.word	0x0800baf1
 800ab78:	0800a9f9 	.word	0x0800a9f9

0800ab7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab80:	b08c      	sub	sp, #48	@ 0x30
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab86:	2300      	movs	r3, #0
 800ab88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	689a      	ldr	r2, [r3, #8]
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	431a      	orrs	r2, r3
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	431a      	orrs	r2, r3
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	69db      	ldr	r3, [r3, #28]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	4baa      	ldr	r3, [pc, #680]	@ (800ae54 <UART_SetConfig+0x2d8>)
 800abac:	4013      	ands	r3, r2
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	6812      	ldr	r2, [r2, #0]
 800abb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abb4:	430b      	orrs	r3, r1
 800abb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	68da      	ldr	r2, [r3, #12]
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	430a      	orrs	r2, r1
 800abcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a9f      	ldr	r2, [pc, #636]	@ (800ae58 <UART_SetConfig+0x2dc>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d004      	beq.n	800abe8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	6a1b      	ldr	r3, [r3, #32]
 800abe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abe4:	4313      	orrs	r3, r2
 800abe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800abf2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	6812      	ldr	r2, [r2, #0]
 800abfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abfc:	430b      	orrs	r3, r1
 800abfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac06:	f023 010f 	bic.w	r1, r3, #15
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	430a      	orrs	r2, r1
 800ac14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a90      	ldr	r2, [pc, #576]	@ (800ae5c <UART_SetConfig+0x2e0>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d125      	bne.n	800ac6c <UART_SetConfig+0xf0>
 800ac20:	4b8f      	ldr	r3, [pc, #572]	@ (800ae60 <UART_SetConfig+0x2e4>)
 800ac22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac26:	f003 0303 	and.w	r3, r3, #3
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	d81a      	bhi.n	800ac64 <UART_SetConfig+0xe8>
 800ac2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac34 <UART_SetConfig+0xb8>)
 800ac30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac34:	0800ac45 	.word	0x0800ac45
 800ac38:	0800ac55 	.word	0x0800ac55
 800ac3c:	0800ac4d 	.word	0x0800ac4d
 800ac40:	0800ac5d 	.word	0x0800ac5d
 800ac44:	2301      	movs	r3, #1
 800ac46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac4a:	e116      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac52:	e112      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ac54:	2304      	movs	r3, #4
 800ac56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac5a:	e10e      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ac5c:	2308      	movs	r3, #8
 800ac5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac62:	e10a      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ac64:	2310      	movs	r3, #16
 800ac66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac6a:	e106      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a7c      	ldr	r2, [pc, #496]	@ (800ae64 <UART_SetConfig+0x2e8>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d138      	bne.n	800ace8 <UART_SetConfig+0x16c>
 800ac76:	4b7a      	ldr	r3, [pc, #488]	@ (800ae60 <UART_SetConfig+0x2e4>)
 800ac78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac7c:	f003 030c 	and.w	r3, r3, #12
 800ac80:	2b0c      	cmp	r3, #12
 800ac82:	d82d      	bhi.n	800ace0 <UART_SetConfig+0x164>
 800ac84:	a201      	add	r2, pc, #4	@ (adr r2, 800ac8c <UART_SetConfig+0x110>)
 800ac86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8a:	bf00      	nop
 800ac8c:	0800acc1 	.word	0x0800acc1
 800ac90:	0800ace1 	.word	0x0800ace1
 800ac94:	0800ace1 	.word	0x0800ace1
 800ac98:	0800ace1 	.word	0x0800ace1
 800ac9c:	0800acd1 	.word	0x0800acd1
 800aca0:	0800ace1 	.word	0x0800ace1
 800aca4:	0800ace1 	.word	0x0800ace1
 800aca8:	0800ace1 	.word	0x0800ace1
 800acac:	0800acc9 	.word	0x0800acc9
 800acb0:	0800ace1 	.word	0x0800ace1
 800acb4:	0800ace1 	.word	0x0800ace1
 800acb8:	0800ace1 	.word	0x0800ace1
 800acbc:	0800acd9 	.word	0x0800acd9
 800acc0:	2300      	movs	r3, #0
 800acc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acc6:	e0d8      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800acc8:	2302      	movs	r3, #2
 800acca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acce:	e0d4      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800acd0:	2304      	movs	r3, #4
 800acd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acd6:	e0d0      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800acd8:	2308      	movs	r3, #8
 800acda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acde:	e0cc      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ace0:	2310      	movs	r3, #16
 800ace2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ace6:	e0c8      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a5e      	ldr	r2, [pc, #376]	@ (800ae68 <UART_SetConfig+0x2ec>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d125      	bne.n	800ad3e <UART_SetConfig+0x1c2>
 800acf2:	4b5b      	ldr	r3, [pc, #364]	@ (800ae60 <UART_SetConfig+0x2e4>)
 800acf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acf8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800acfc:	2b30      	cmp	r3, #48	@ 0x30
 800acfe:	d016      	beq.n	800ad2e <UART_SetConfig+0x1b2>
 800ad00:	2b30      	cmp	r3, #48	@ 0x30
 800ad02:	d818      	bhi.n	800ad36 <UART_SetConfig+0x1ba>
 800ad04:	2b20      	cmp	r3, #32
 800ad06:	d00a      	beq.n	800ad1e <UART_SetConfig+0x1a2>
 800ad08:	2b20      	cmp	r3, #32
 800ad0a:	d814      	bhi.n	800ad36 <UART_SetConfig+0x1ba>
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <UART_SetConfig+0x19a>
 800ad10:	2b10      	cmp	r3, #16
 800ad12:	d008      	beq.n	800ad26 <UART_SetConfig+0x1aa>
 800ad14:	e00f      	b.n	800ad36 <UART_SetConfig+0x1ba>
 800ad16:	2300      	movs	r3, #0
 800ad18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad1c:	e0ad      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ad1e:	2302      	movs	r3, #2
 800ad20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad24:	e0a9      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ad26:	2304      	movs	r3, #4
 800ad28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad2c:	e0a5      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ad2e:	2308      	movs	r3, #8
 800ad30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad34:	e0a1      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ad36:	2310      	movs	r3, #16
 800ad38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad3c:	e09d      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a4a      	ldr	r2, [pc, #296]	@ (800ae6c <UART_SetConfig+0x2f0>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d125      	bne.n	800ad94 <UART_SetConfig+0x218>
 800ad48:	4b45      	ldr	r3, [pc, #276]	@ (800ae60 <UART_SetConfig+0x2e4>)
 800ad4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ad52:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad54:	d016      	beq.n	800ad84 <UART_SetConfig+0x208>
 800ad56:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad58:	d818      	bhi.n	800ad8c <UART_SetConfig+0x210>
 800ad5a:	2b80      	cmp	r3, #128	@ 0x80
 800ad5c:	d00a      	beq.n	800ad74 <UART_SetConfig+0x1f8>
 800ad5e:	2b80      	cmp	r3, #128	@ 0x80
 800ad60:	d814      	bhi.n	800ad8c <UART_SetConfig+0x210>
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d002      	beq.n	800ad6c <UART_SetConfig+0x1f0>
 800ad66:	2b40      	cmp	r3, #64	@ 0x40
 800ad68:	d008      	beq.n	800ad7c <UART_SetConfig+0x200>
 800ad6a:	e00f      	b.n	800ad8c <UART_SetConfig+0x210>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad72:	e082      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ad74:	2302      	movs	r3, #2
 800ad76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad7a:	e07e      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ad7c:	2304      	movs	r3, #4
 800ad7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad82:	e07a      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ad84:	2308      	movs	r3, #8
 800ad86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad8a:	e076      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ad8c:	2310      	movs	r3, #16
 800ad8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad92:	e072      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a35      	ldr	r2, [pc, #212]	@ (800ae70 <UART_SetConfig+0x2f4>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d12a      	bne.n	800adf4 <UART_SetConfig+0x278>
 800ad9e:	4b30      	ldr	r3, [pc, #192]	@ (800ae60 <UART_SetConfig+0x2e4>)
 800ada0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ada4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ada8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adac:	d01a      	beq.n	800ade4 <UART_SetConfig+0x268>
 800adae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adb2:	d81b      	bhi.n	800adec <UART_SetConfig+0x270>
 800adb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adb8:	d00c      	beq.n	800add4 <UART_SetConfig+0x258>
 800adba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adbe:	d815      	bhi.n	800adec <UART_SetConfig+0x270>
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d003      	beq.n	800adcc <UART_SetConfig+0x250>
 800adc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adc8:	d008      	beq.n	800addc <UART_SetConfig+0x260>
 800adca:	e00f      	b.n	800adec <UART_SetConfig+0x270>
 800adcc:	2300      	movs	r3, #0
 800adce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800add2:	e052      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800add4:	2302      	movs	r3, #2
 800add6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adda:	e04e      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800addc:	2304      	movs	r3, #4
 800adde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ade2:	e04a      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ade4:	2308      	movs	r3, #8
 800ade6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adea:	e046      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800adec:	2310      	movs	r3, #16
 800adee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adf2:	e042      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a17      	ldr	r2, [pc, #92]	@ (800ae58 <UART_SetConfig+0x2dc>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d13a      	bne.n	800ae74 <UART_SetConfig+0x2f8>
 800adfe:	4b18      	ldr	r3, [pc, #96]	@ (800ae60 <UART_SetConfig+0x2e4>)
 800ae00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ae08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae0c:	d01a      	beq.n	800ae44 <UART_SetConfig+0x2c8>
 800ae0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae12:	d81b      	bhi.n	800ae4c <UART_SetConfig+0x2d0>
 800ae14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae18:	d00c      	beq.n	800ae34 <UART_SetConfig+0x2b8>
 800ae1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae1e:	d815      	bhi.n	800ae4c <UART_SetConfig+0x2d0>
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d003      	beq.n	800ae2c <UART_SetConfig+0x2b0>
 800ae24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae28:	d008      	beq.n	800ae3c <UART_SetConfig+0x2c0>
 800ae2a:	e00f      	b.n	800ae4c <UART_SetConfig+0x2d0>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae32:	e022      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ae34:	2302      	movs	r3, #2
 800ae36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae3a:	e01e      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ae3c:	2304      	movs	r3, #4
 800ae3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae42:	e01a      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ae44:	2308      	movs	r3, #8
 800ae46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae4a:	e016      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ae4c:	2310      	movs	r3, #16
 800ae4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae52:	e012      	b.n	800ae7a <UART_SetConfig+0x2fe>
 800ae54:	cfff69f3 	.word	0xcfff69f3
 800ae58:	40008000 	.word	0x40008000
 800ae5c:	40013800 	.word	0x40013800
 800ae60:	40021000 	.word	0x40021000
 800ae64:	40004400 	.word	0x40004400
 800ae68:	40004800 	.word	0x40004800
 800ae6c:	40004c00 	.word	0x40004c00
 800ae70:	40005000 	.word	0x40005000
 800ae74:	2310      	movs	r3, #16
 800ae76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4aae      	ldr	r2, [pc, #696]	@ (800b138 <UART_SetConfig+0x5bc>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	f040 8097 	bne.w	800afb4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae8a:	2b08      	cmp	r3, #8
 800ae8c:	d823      	bhi.n	800aed6 <UART_SetConfig+0x35a>
 800ae8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae94 <UART_SetConfig+0x318>)
 800ae90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae94:	0800aeb9 	.word	0x0800aeb9
 800ae98:	0800aed7 	.word	0x0800aed7
 800ae9c:	0800aec1 	.word	0x0800aec1
 800aea0:	0800aed7 	.word	0x0800aed7
 800aea4:	0800aec7 	.word	0x0800aec7
 800aea8:	0800aed7 	.word	0x0800aed7
 800aeac:	0800aed7 	.word	0x0800aed7
 800aeb0:	0800aed7 	.word	0x0800aed7
 800aeb4:	0800aecf 	.word	0x0800aecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aeb8:	f7fc fd16 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 800aebc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aebe:	e010      	b.n	800aee2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aec0:	4b9e      	ldr	r3, [pc, #632]	@ (800b13c <UART_SetConfig+0x5c0>)
 800aec2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aec4:	e00d      	b.n	800aee2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aec6:	f7fc fca1 	bl	800780c <HAL_RCC_GetSysClockFreq>
 800aeca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aecc:	e009      	b.n	800aee2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aed2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aed4:	e005      	b.n	800aee2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800aed6:	2300      	movs	r3, #0
 800aed8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aee0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f000 8130 	beq.w	800b14a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeee:	4a94      	ldr	r2, [pc, #592]	@ (800b140 <UART_SetConfig+0x5c4>)
 800aef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aef4:	461a      	mov	r2, r3
 800aef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aefc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	685a      	ldr	r2, [r3, #4]
 800af02:	4613      	mov	r3, r2
 800af04:	005b      	lsls	r3, r3, #1
 800af06:	4413      	add	r3, r2
 800af08:	69ba      	ldr	r2, [r7, #24]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d305      	bcc.n	800af1a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af14:	69ba      	ldr	r2, [r7, #24]
 800af16:	429a      	cmp	r2, r3
 800af18:	d903      	bls.n	800af22 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800af20:	e113      	b.n	800b14a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af24:	2200      	movs	r2, #0
 800af26:	60bb      	str	r3, [r7, #8]
 800af28:	60fa      	str	r2, [r7, #12]
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af2e:	4a84      	ldr	r2, [pc, #528]	@ (800b140 <UART_SetConfig+0x5c4>)
 800af30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af34:	b29b      	uxth	r3, r3
 800af36:	2200      	movs	r2, #0
 800af38:	603b      	str	r3, [r7, #0]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af44:	f7f5 fe2e 	bl	8000ba4 <__aeabi_uldivmod>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	4610      	mov	r0, r2
 800af4e:	4619      	mov	r1, r3
 800af50:	f04f 0200 	mov.w	r2, #0
 800af54:	f04f 0300 	mov.w	r3, #0
 800af58:	020b      	lsls	r3, r1, #8
 800af5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af5e:	0202      	lsls	r2, r0, #8
 800af60:	6979      	ldr	r1, [r7, #20]
 800af62:	6849      	ldr	r1, [r1, #4]
 800af64:	0849      	lsrs	r1, r1, #1
 800af66:	2000      	movs	r0, #0
 800af68:	460c      	mov	r4, r1
 800af6a:	4605      	mov	r5, r0
 800af6c:	eb12 0804 	adds.w	r8, r2, r4
 800af70:	eb43 0905 	adc.w	r9, r3, r5
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	469a      	mov	sl, r3
 800af7c:	4693      	mov	fp, r2
 800af7e:	4652      	mov	r2, sl
 800af80:	465b      	mov	r3, fp
 800af82:	4640      	mov	r0, r8
 800af84:	4649      	mov	r1, r9
 800af86:	f7f5 fe0d 	bl	8000ba4 <__aeabi_uldivmod>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	4613      	mov	r3, r2
 800af90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af98:	d308      	bcc.n	800afac <UART_SetConfig+0x430>
 800af9a:	6a3b      	ldr	r3, [r7, #32]
 800af9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afa0:	d204      	bcs.n	800afac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	6a3a      	ldr	r2, [r7, #32]
 800afa8:	60da      	str	r2, [r3, #12]
 800afaa:	e0ce      	b.n	800b14a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800afac:	2301      	movs	r3, #1
 800afae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800afb2:	e0ca      	b.n	800b14a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	69db      	ldr	r3, [r3, #28]
 800afb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afbc:	d166      	bne.n	800b08c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800afbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800afc2:	2b08      	cmp	r3, #8
 800afc4:	d827      	bhi.n	800b016 <UART_SetConfig+0x49a>
 800afc6:	a201      	add	r2, pc, #4	@ (adr r2, 800afcc <UART_SetConfig+0x450>)
 800afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afcc:	0800aff1 	.word	0x0800aff1
 800afd0:	0800aff9 	.word	0x0800aff9
 800afd4:	0800b001 	.word	0x0800b001
 800afd8:	0800b017 	.word	0x0800b017
 800afdc:	0800b007 	.word	0x0800b007
 800afe0:	0800b017 	.word	0x0800b017
 800afe4:	0800b017 	.word	0x0800b017
 800afe8:	0800b017 	.word	0x0800b017
 800afec:	0800b00f 	.word	0x0800b00f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aff0:	f7fc fc7a 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 800aff4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aff6:	e014      	b.n	800b022 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aff8:	f7fc fc8c 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 800affc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800affe:	e010      	b.n	800b022 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b000:	4b4e      	ldr	r3, [pc, #312]	@ (800b13c <UART_SetConfig+0x5c0>)
 800b002:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b004:	e00d      	b.n	800b022 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b006:	f7fc fc01 	bl	800780c <HAL_RCC_GetSysClockFreq>
 800b00a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b00c:	e009      	b.n	800b022 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b00e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b012:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b014:	e005      	b.n	800b022 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b016:	2300      	movs	r3, #0
 800b018:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b020:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 8090 	beq.w	800b14a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02e:	4a44      	ldr	r2, [pc, #272]	@ (800b140 <UART_SetConfig+0x5c4>)
 800b030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b034:	461a      	mov	r2, r3
 800b036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b038:	fbb3 f3f2 	udiv	r3, r3, r2
 800b03c:	005a      	lsls	r2, r3, #1
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	085b      	lsrs	r3, r3, #1
 800b044:	441a      	add	r2, r3
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b04e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	2b0f      	cmp	r3, #15
 800b054:	d916      	bls.n	800b084 <UART_SetConfig+0x508>
 800b056:	6a3b      	ldr	r3, [r7, #32]
 800b058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b05c:	d212      	bcs.n	800b084 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b05e:	6a3b      	ldr	r3, [r7, #32]
 800b060:	b29b      	uxth	r3, r3
 800b062:	f023 030f 	bic.w	r3, r3, #15
 800b066:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b068:	6a3b      	ldr	r3, [r7, #32]
 800b06a:	085b      	lsrs	r3, r3, #1
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	f003 0307 	and.w	r3, r3, #7
 800b072:	b29a      	uxth	r2, r3
 800b074:	8bfb      	ldrh	r3, [r7, #30]
 800b076:	4313      	orrs	r3, r2
 800b078:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	8bfa      	ldrh	r2, [r7, #30]
 800b080:	60da      	str	r2, [r3, #12]
 800b082:	e062      	b.n	800b14a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b08a:	e05e      	b.n	800b14a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b08c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b090:	2b08      	cmp	r3, #8
 800b092:	d828      	bhi.n	800b0e6 <UART_SetConfig+0x56a>
 800b094:	a201      	add	r2, pc, #4	@ (adr r2, 800b09c <UART_SetConfig+0x520>)
 800b096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09a:	bf00      	nop
 800b09c:	0800b0c1 	.word	0x0800b0c1
 800b0a0:	0800b0c9 	.word	0x0800b0c9
 800b0a4:	0800b0d1 	.word	0x0800b0d1
 800b0a8:	0800b0e7 	.word	0x0800b0e7
 800b0ac:	0800b0d7 	.word	0x0800b0d7
 800b0b0:	0800b0e7 	.word	0x0800b0e7
 800b0b4:	0800b0e7 	.word	0x0800b0e7
 800b0b8:	0800b0e7 	.word	0x0800b0e7
 800b0bc:	0800b0df 	.word	0x0800b0df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0c0:	f7fc fc12 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 800b0c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b0c6:	e014      	b.n	800b0f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0c8:	f7fc fc24 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 800b0cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b0ce:	e010      	b.n	800b0f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0d0:	4b1a      	ldr	r3, [pc, #104]	@ (800b13c <UART_SetConfig+0x5c0>)
 800b0d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b0d4:	e00d      	b.n	800b0f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0d6:	f7fc fb99 	bl	800780c <HAL_RCC_GetSysClockFreq>
 800b0da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b0dc:	e009      	b.n	800b0f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b0e4:	e005      	b.n	800b0f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b0f0:	bf00      	nop
    }

    if (pclk != 0U)
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d028      	beq.n	800b14a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0fc:	4a10      	ldr	r2, [pc, #64]	@ (800b140 <UART_SetConfig+0x5c4>)
 800b0fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b102:	461a      	mov	r2, r3
 800b104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b106:	fbb3 f2f2 	udiv	r2, r3, r2
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	085b      	lsrs	r3, r3, #1
 800b110:	441a      	add	r2, r3
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	fbb2 f3f3 	udiv	r3, r2, r3
 800b11a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b11c:	6a3b      	ldr	r3, [r7, #32]
 800b11e:	2b0f      	cmp	r3, #15
 800b120:	d910      	bls.n	800b144 <UART_SetConfig+0x5c8>
 800b122:	6a3b      	ldr	r3, [r7, #32]
 800b124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b128:	d20c      	bcs.n	800b144 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b12a:	6a3b      	ldr	r3, [r7, #32]
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	60da      	str	r2, [r3, #12]
 800b134:	e009      	b.n	800b14a <UART_SetConfig+0x5ce>
 800b136:	bf00      	nop
 800b138:	40008000 	.word	0x40008000
 800b13c:	00f42400 	.word	0x00f42400
 800b140:	0800bdb0 	.word	0x0800bdb0
      }
      else
      {
        ret = HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	2201      	movs	r2, #1
 800b156:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	2200      	movs	r2, #0
 800b15e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	2200      	movs	r2, #0
 800b164:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b166:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3730      	adds	r7, #48	@ 0x30
 800b16e:	46bd      	mov	sp, r7
 800b170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b180:	f003 0308 	and.w	r3, r3, #8
 800b184:	2b00      	cmp	r3, #0
 800b186:	d00a      	beq.n	800b19e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	430a      	orrs	r2, r1
 800b19c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d00a      	beq.n	800b1c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	430a      	orrs	r2, r1
 800b1be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c4:	f003 0302 	and.w	r3, r3, #2
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00a      	beq.n	800b1e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	430a      	orrs	r2, r1
 800b1e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1e6:	f003 0304 	and.w	r3, r3, #4
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00a      	beq.n	800b204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	430a      	orrs	r2, r1
 800b202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b208:	f003 0310 	and.w	r3, r3, #16
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d00a      	beq.n	800b226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	430a      	orrs	r2, r1
 800b224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b22a:	f003 0320 	and.w	r3, r3, #32
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00a      	beq.n	800b248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	430a      	orrs	r2, r1
 800b246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b24c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b250:	2b00      	cmp	r3, #0
 800b252:	d01a      	beq.n	800b28a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	430a      	orrs	r2, r1
 800b268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b26e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b272:	d10a      	bne.n	800b28a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	430a      	orrs	r2, r1
 800b288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b28e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00a      	beq.n	800b2ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	430a      	orrs	r2, r1
 800b2aa:	605a      	str	r2, [r3, #4]
  }
}
 800b2ac:	bf00      	nop
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b098      	sub	sp, #96	@ 0x60
 800b2bc:	af02      	add	r7, sp, #8
 800b2be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b2c8:	f7f9 fad2 	bl	8004870 <HAL_GetTick>
 800b2cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 0308 	and.w	r3, r3, #8
 800b2d8:	2b08      	cmp	r3, #8
 800b2da:	d12f      	bne.n	800b33c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f88e 	bl	800b40c <UART_WaitOnFlagUntilTimeout>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d022      	beq.n	800b33c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fe:	e853 3f00 	ldrex	r3, [r3]
 800b302:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b306:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b30a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	461a      	mov	r2, r3
 800b312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b314:	647b      	str	r3, [r7, #68]	@ 0x44
 800b316:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b318:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b31a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b31c:	e841 2300 	strex	r3, r2, [r1]
 800b320:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1e6      	bne.n	800b2f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2220      	movs	r2, #32
 800b32c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b338:	2303      	movs	r3, #3
 800b33a:	e063      	b.n	800b404 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f003 0304 	and.w	r3, r3, #4
 800b346:	2b04      	cmp	r3, #4
 800b348:	d149      	bne.n	800b3de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b34a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b352:	2200      	movs	r2, #0
 800b354:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f857 	bl	800b40c <UART_WaitOnFlagUntilTimeout>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d03c      	beq.n	800b3de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36c:	e853 3f00 	ldrex	r3, [r3]
 800b370:	623b      	str	r3, [r7, #32]
   return(result);
 800b372:	6a3b      	ldr	r3, [r7, #32]
 800b374:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b378:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	461a      	mov	r2, r3
 800b380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b382:	633b      	str	r3, [r7, #48]	@ 0x30
 800b384:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b386:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b38a:	e841 2300 	strex	r3, r2, [r1]
 800b38e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1e6      	bne.n	800b364 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	3308      	adds	r3, #8
 800b39c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	e853 3f00 	ldrex	r3, [r3]
 800b3a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f023 0301 	bic.w	r3, r3, #1
 800b3ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	3308      	adds	r3, #8
 800b3b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3b6:	61fa      	str	r2, [r7, #28]
 800b3b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ba:	69b9      	ldr	r1, [r7, #24]
 800b3bc:	69fa      	ldr	r2, [r7, #28]
 800b3be:	e841 2300 	strex	r3, r2, [r1]
 800b3c2:	617b      	str	r3, [r7, #20]
   return(result);
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1e5      	bne.n	800b396 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2220      	movs	r2, #32
 800b3ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	e012      	b.n	800b404 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2220      	movs	r2, #32
 800b3e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2220      	movs	r2, #32
 800b3ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b402:	2300      	movs	r3, #0
}
 800b404:	4618      	mov	r0, r3
 800b406:	3758      	adds	r7, #88	@ 0x58
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	603b      	str	r3, [r7, #0]
 800b418:	4613      	mov	r3, r2
 800b41a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b41c:	e04f      	b.n	800b4be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b424:	d04b      	beq.n	800b4be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b426:	f7f9 fa23 	bl	8004870 <HAL_GetTick>
 800b42a:	4602      	mov	r2, r0
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	69ba      	ldr	r2, [r7, #24]
 800b432:	429a      	cmp	r2, r3
 800b434:	d302      	bcc.n	800b43c <UART_WaitOnFlagUntilTimeout+0x30>
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d101      	bne.n	800b440 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b43c:	2303      	movs	r3, #3
 800b43e:	e04e      	b.n	800b4de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 0304 	and.w	r3, r3, #4
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d037      	beq.n	800b4be <UART_WaitOnFlagUntilTimeout+0xb2>
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	2b80      	cmp	r3, #128	@ 0x80
 800b452:	d034      	beq.n	800b4be <UART_WaitOnFlagUntilTimeout+0xb2>
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	2b40      	cmp	r3, #64	@ 0x40
 800b458:	d031      	beq.n	800b4be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	69db      	ldr	r3, [r3, #28]
 800b460:	f003 0308 	and.w	r3, r3, #8
 800b464:	2b08      	cmp	r3, #8
 800b466:	d110      	bne.n	800b48a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2208      	movs	r2, #8
 800b46e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f000 f920 	bl	800b6b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2208      	movs	r2, #8
 800b47a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e029      	b.n	800b4de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	69db      	ldr	r3, [r3, #28]
 800b490:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b498:	d111      	bne.n	800b4be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f000 f906 	bl	800b6b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2220      	movs	r2, #32
 800b4ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	e00f      	b.n	800b4de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	69da      	ldr	r2, [r3, #28]
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	bf0c      	ite	eq
 800b4ce:	2301      	moveq	r3, #1
 800b4d0:	2300      	movne	r3, #0
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	79fb      	ldrb	r3, [r7, #7]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d0a0      	beq.n	800b41e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
	...

0800b4e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b096      	sub	sp, #88	@ 0x58
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	68ba      	ldr	r2, [r7, #8]
 800b4fa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	88fa      	ldrh	r2, [r7, #6]
 800b500:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2200      	movs	r2, #0
 800b508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2222      	movs	r2, #34	@ 0x22
 800b510:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d02d      	beq.n	800b57a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b524:	4a40      	ldr	r2, [pc, #256]	@ (800b628 <UART_Start_Receive_DMA+0x140>)
 800b526:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b52e:	4a3f      	ldr	r2, [pc, #252]	@ (800b62c <UART_Start_Receive_DMA+0x144>)
 800b530:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b538:	4a3d      	ldr	r2, [pc, #244]	@ (800b630 <UART_Start_Receive_DMA+0x148>)
 800b53a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b542:	2200      	movs	r2, #0
 800b544:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	3324      	adds	r3, #36	@ 0x24
 800b552:	4619      	mov	r1, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b558:	461a      	mov	r2, r3
 800b55a:	88fb      	ldrh	r3, [r7, #6]
 800b55c:	f7fa ffe6 	bl	800652c <HAL_DMA_Start_IT>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d009      	beq.n	800b57a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2210      	movs	r2, #16
 800b56a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2220      	movs	r2, #32
 800b572:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	e051      	b.n	800b61e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d018      	beq.n	800b5b4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b58a:	e853 3f00 	ldrex	r3, [r3]
 800b58e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b596:	657b      	str	r3, [r7, #84]	@ 0x54
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	461a      	mov	r2, r3
 800b59e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5a2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b5a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5a8:	e841 2300 	strex	r3, r2, [r1]
 800b5ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b5ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1e6      	bne.n	800b582 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	3308      	adds	r3, #8
 800b5ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5be:	e853 3f00 	ldrex	r3, [r3]
 800b5c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c6:	f043 0301 	orr.w	r3, r3, #1
 800b5ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	3308      	adds	r3, #8
 800b5d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b5d4:	637a      	str	r2, [r7, #52]	@ 0x34
 800b5d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b5da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b5dc:	e841 2300 	strex	r3, r2, [r1]
 800b5e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1e5      	bne.n	800b5b4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	e853 3f00 	ldrex	r3, [r3]
 800b5f6:	613b      	str	r3, [r7, #16]
   return(result);
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	3308      	adds	r3, #8
 800b606:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b608:	623a      	str	r2, [r7, #32]
 800b60a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	69f9      	ldr	r1, [r7, #28]
 800b60e:	6a3a      	ldr	r2, [r7, #32]
 800b610:	e841 2300 	strex	r3, r2, [r1]
 800b614:	61bb      	str	r3, [r7, #24]
   return(result);
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e5      	bne.n	800b5e8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3758      	adds	r7, #88	@ 0x58
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	0800b841 	.word	0x0800b841
 800b62c:	0800b975 	.word	0x0800b975
 800b630:	0800b9bb 	.word	0x0800b9bb

0800b634 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b634:	b480      	push	{r7}
 800b636:	b08f      	sub	sp, #60	@ 0x3c
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b642:	6a3b      	ldr	r3, [r7, #32]
 800b644:	e853 3f00 	ldrex	r3, [r3]
 800b648:	61fb      	str	r3, [r7, #28]
   return(result);
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b650:	637b      	str	r3, [r7, #52]	@ 0x34
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b65a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b65c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b65e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b662:	e841 2300 	strex	r3, r2, [r1]
 800b666:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d1e6      	bne.n	800b63c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3308      	adds	r3, #8
 800b674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	e853 3f00 	ldrex	r3, [r3]
 800b67c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b684:	633b      	str	r3, [r7, #48]	@ 0x30
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	3308      	adds	r3, #8
 800b68c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b68e:	61ba      	str	r2, [r7, #24]
 800b690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b692:	6979      	ldr	r1, [r7, #20]
 800b694:	69ba      	ldr	r2, [r7, #24]
 800b696:	e841 2300 	strex	r3, r2, [r1]
 800b69a:	613b      	str	r3, [r7, #16]
   return(result);
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1e5      	bne.n	800b66e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2220      	movs	r2, #32
 800b6a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b6aa:	bf00      	nop
 800b6ac:	373c      	adds	r7, #60	@ 0x3c
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr

0800b6b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6b6:	b480      	push	{r7}
 800b6b8:	b095      	sub	sp, #84	@ 0x54
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6c6:	e853 3f00 	ldrex	r3, [r3]
 800b6ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b6e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b6e4:	e841 2300 	strex	r3, r2, [r1]
 800b6e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1e6      	bne.n	800b6be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	3308      	adds	r3, #8
 800b6f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f8:	6a3b      	ldr	r3, [r7, #32]
 800b6fa:	e853 3f00 	ldrex	r3, [r3]
 800b6fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b706:	f023 0301 	bic.w	r3, r3, #1
 800b70a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3308      	adds	r3, #8
 800b712:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b714:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b716:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b718:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b71a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b71c:	e841 2300 	strex	r3, r2, [r1]
 800b720:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1e3      	bne.n	800b6f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d118      	bne.n	800b762 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	e853 3f00 	ldrex	r3, [r3]
 800b73c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	f023 0310 	bic.w	r3, r3, #16
 800b744:	647b      	str	r3, [r7, #68]	@ 0x44
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	461a      	mov	r2, r3
 800b74c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b74e:	61bb      	str	r3, [r7, #24]
 800b750:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b752:	6979      	ldr	r1, [r7, #20]
 800b754:	69ba      	ldr	r2, [r7, #24]
 800b756:	e841 2300 	strex	r3, r2, [r1]
 800b75a:	613b      	str	r3, [r7, #16]
   return(result);
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1e6      	bne.n	800b730 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2220      	movs	r2, #32
 800b766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b776:	bf00      	nop
 800b778:	3754      	adds	r7, #84	@ 0x54
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr

0800b782 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b090      	sub	sp, #64	@ 0x40
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b78e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f003 0320 	and.w	r3, r3, #32
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d137      	bne.n	800b80e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b79e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b0:	e853 3f00 	ldrex	r3, [r3]
 800b7b4:	623b      	str	r3, [r7, #32]
   return(result);
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	3308      	adds	r3, #8
 800b7c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7c6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7ce:	e841 2300 	strex	r3, r2, [r1]
 800b7d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1e5      	bne.n	800b7a6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	e853 3f00 	ldrex	r3, [r3]
 800b7e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f8:	61fb      	str	r3, [r7, #28]
 800b7fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fc:	69b9      	ldr	r1, [r7, #24]
 800b7fe:	69fa      	ldr	r2, [r7, #28]
 800b800:	e841 2300 	strex	r3, r2, [r1]
 800b804:	617b      	str	r3, [r7, #20]
   return(result);
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1e6      	bne.n	800b7da <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b80c:	e004      	b.n	800b818 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b80e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b810:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b814:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b816:	4798      	blx	r3
}
 800b818:	bf00      	nop
 800b81a:	3740      	adds	r7, #64	@ 0x40
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b82c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b838:	bf00      	nop
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b09c      	sub	sp, #112	@ 0x70
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b84c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 0320 	and.w	r3, r3, #32
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d171      	bne.n	800b940 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b85c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b85e:	2200      	movs	r2, #0
 800b860:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b86c:	e853 3f00 	ldrex	r3, [r3]
 800b870:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b878:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b87a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	461a      	mov	r2, r3
 800b880:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b882:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b884:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b886:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b888:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b88a:	e841 2300 	strex	r3, r2, [r1]
 800b88e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1e6      	bne.n	800b864 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	3308      	adds	r3, #8
 800b89c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a0:	e853 3f00 	ldrex	r3, [r3]
 800b8a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b8a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8a8:	f023 0301 	bic.w	r3, r3, #1
 800b8ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800b8ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b8b6:	647a      	str	r2, [r7, #68]	@ 0x44
 800b8b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b8bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8be:	e841 2300 	strex	r3, r2, [r1]
 800b8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1e5      	bne.n	800b896 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	3308      	adds	r3, #8
 800b8d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d4:	e853 3f00 	ldrex	r3, [r3]
 800b8d8:	623b      	str	r3, [r7, #32]
   return(result);
 800b8da:	6a3b      	ldr	r3, [r7, #32]
 800b8dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	3308      	adds	r3, #8
 800b8e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b8ea:	633a      	str	r2, [r7, #48]	@ 0x30
 800b8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8f2:	e841 2300 	strex	r3, r2, [r1]
 800b8f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d1e5      	bne.n	800b8ca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b8fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b900:	2220      	movs	r2, #32
 800b902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b906:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d118      	bne.n	800b940 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b90e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	e853 3f00 	ldrex	r3, [r3]
 800b91a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f023 0310 	bic.w	r3, r3, #16
 800b922:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b924:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	461a      	mov	r2, r3
 800b92a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b92c:	61fb      	str	r3, [r7, #28]
 800b92e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b930:	69b9      	ldr	r1, [r7, #24]
 800b932:	69fa      	ldr	r2, [r7, #28]
 800b934:	e841 2300 	strex	r3, r2, [r1]
 800b938:	617b      	str	r3, [r7, #20]
   return(result);
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1e6      	bne.n	800b90e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b942:	2200      	movs	r2, #0
 800b944:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d109      	bne.n	800b962 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b94e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b950:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b954:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b956:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b95a:	4611      	mov	r1, r2
 800b95c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b95e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b960:	e004      	b.n	800b96c <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b964:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b968:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b96a:	4798      	blx	r3
}
 800b96c:	bf00      	nop
 800b96e:	3770      	adds	r7, #112	@ 0x70
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b980:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2201      	movs	r2, #1
 800b986:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d10b      	bne.n	800b9a8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b99c:	0852      	lsrs	r2, r2, #1
 800b99e:	b292      	uxth	r2, r2
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b9a6:	e004      	b.n	800b9b2 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	4798      	blx	r3
}
 800b9b2:	bf00      	nop
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b086      	sub	sp, #24
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b9d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9e2:	2b80      	cmp	r3, #128	@ 0x80
 800b9e4:	d109      	bne.n	800b9fa <UART_DMAError+0x40>
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	2b21      	cmp	r3, #33	@ 0x21
 800b9ea:	d106      	bne.n	800b9fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b9f4:	6978      	ldr	r0, [r7, #20]
 800b9f6:	f7ff fe1d 	bl	800b634 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba04:	2b40      	cmp	r3, #64	@ 0x40
 800ba06:	d109      	bne.n	800ba1c <UART_DMAError+0x62>
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2b22      	cmp	r3, #34	@ 0x22
 800ba0c:	d106      	bne.n	800ba1c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ba16:	6978      	ldr	r0, [r7, #20]
 800ba18:	f7ff fe4d 	bl	800b6b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba22:	f043 0210 	orr.w	r2, r3, #16
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ba32:	6978      	ldr	r0, [r7, #20]
 800ba34:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba36:	bf00      	nop
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b084      	sub	sp, #16
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba66:	bf00      	nop
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b088      	sub	sp, #32
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	e853 3f00 	ldrex	r3, [r3]
 800ba82:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba8a:	61fb      	str	r3, [r7, #28]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	461a      	mov	r2, r3
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	61bb      	str	r3, [r7, #24]
 800ba96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba98:	6979      	ldr	r1, [r7, #20]
 800ba9a:	69ba      	ldr	r2, [r7, #24]
 800ba9c:	e841 2300 	strex	r3, r2, [r1]
 800baa0:	613b      	str	r3, [r7, #16]
   return(result);
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1e6      	bne.n	800ba76 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2220      	movs	r2, #32
 800baac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bac0:	bf00      	nop
 800bac2:	3720      	adds	r7, #32
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bad0:	bf00      	nop
 800bad2:	370c      	adds	r7, #12
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr

0800badc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bae4:	bf00      	nop
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800baf8:	bf00      	nop
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d101      	bne.n	800bb1a <HAL_UARTEx_DisableFifoMode+0x16>
 800bb16:	2302      	movs	r3, #2
 800bb18:	e027      	b.n	800bb6a <HAL_UARTEx_DisableFifoMode+0x66>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2224      	movs	r2, #36	@ 0x24
 800bb26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f022 0201 	bic.w	r2, r2, #1
 800bb40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bb48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2220      	movs	r2, #32
 800bb5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3714      	adds	r7, #20
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b084      	sub	sp, #16
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d101      	bne.n	800bb8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	e02d      	b.n	800bbea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2224      	movs	r2, #36	@ 0x24
 800bb9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f022 0201 	bic.w	r2, r2, #1
 800bbb4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	683a      	ldr	r2, [r7, #0]
 800bbc6:	430a      	orrs	r2, r1
 800bbc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f850 	bl	800bc70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2220      	movs	r2, #32
 800bbdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b084      	sub	sp, #16
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d101      	bne.n	800bc0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc06:	2302      	movs	r3, #2
 800bc08:	e02d      	b.n	800bc66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2224      	movs	r2, #36	@ 0x24
 800bc16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f022 0201 	bic.w	r2, r2, #1
 800bc30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	683a      	ldr	r2, [r7, #0]
 800bc42:	430a      	orrs	r2, r1
 800bc44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f812 	bl	800bc70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2220      	movs	r2, #32
 800bc58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
	...

0800bc70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d108      	bne.n	800bc92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2201      	movs	r2, #1
 800bc84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc90:	e031      	b.n	800bcf6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc92:	2308      	movs	r3, #8
 800bc94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc96:	2308      	movs	r3, #8
 800bc98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	0e5b      	lsrs	r3, r3, #25
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	f003 0307 	and.w	r3, r3, #7
 800bca8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	0f5b      	lsrs	r3, r3, #29
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	f003 0307 	and.w	r3, r3, #7
 800bcb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcba:	7bbb      	ldrb	r3, [r7, #14]
 800bcbc:	7b3a      	ldrb	r2, [r7, #12]
 800bcbe:	4911      	ldr	r1, [pc, #68]	@ (800bd04 <UARTEx_SetNbDataToProcess+0x94>)
 800bcc0:	5c8a      	ldrb	r2, [r1, r2]
 800bcc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bcc6:	7b3a      	ldrb	r2, [r7, #12]
 800bcc8:	490f      	ldr	r1, [pc, #60]	@ (800bd08 <UARTEx_SetNbDataToProcess+0x98>)
 800bcca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bccc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
 800bcda:	7b7a      	ldrb	r2, [r7, #13]
 800bcdc:	4909      	ldr	r1, [pc, #36]	@ (800bd04 <UARTEx_SetNbDataToProcess+0x94>)
 800bcde:	5c8a      	ldrb	r2, [r1, r2]
 800bce0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bce4:	7b7a      	ldrb	r2, [r7, #13]
 800bce6:	4908      	ldr	r1, [pc, #32]	@ (800bd08 <UARTEx_SetNbDataToProcess+0x98>)
 800bce8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcea:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bcf6:	bf00      	nop
 800bcf8:	3714      	adds	r7, #20
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	0800bdc8 	.word	0x0800bdc8
 800bd08:	0800bdd0 	.word	0x0800bdd0

0800bd0c <memset>:
 800bd0c:	4402      	add	r2, r0
 800bd0e:	4603      	mov	r3, r0
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d100      	bne.n	800bd16 <memset+0xa>
 800bd14:	4770      	bx	lr
 800bd16:	f803 1b01 	strb.w	r1, [r3], #1
 800bd1a:	e7f9      	b.n	800bd10 <memset+0x4>

0800bd1c <__libc_init_array>:
 800bd1c:	b570      	push	{r4, r5, r6, lr}
 800bd1e:	4d0d      	ldr	r5, [pc, #52]	@ (800bd54 <__libc_init_array+0x38>)
 800bd20:	4c0d      	ldr	r4, [pc, #52]	@ (800bd58 <__libc_init_array+0x3c>)
 800bd22:	1b64      	subs	r4, r4, r5
 800bd24:	10a4      	asrs	r4, r4, #2
 800bd26:	2600      	movs	r6, #0
 800bd28:	42a6      	cmp	r6, r4
 800bd2a:	d109      	bne.n	800bd40 <__libc_init_array+0x24>
 800bd2c:	4d0b      	ldr	r5, [pc, #44]	@ (800bd5c <__libc_init_array+0x40>)
 800bd2e:	4c0c      	ldr	r4, [pc, #48]	@ (800bd60 <__libc_init_array+0x44>)
 800bd30:	f000 f826 	bl	800bd80 <_init>
 800bd34:	1b64      	subs	r4, r4, r5
 800bd36:	10a4      	asrs	r4, r4, #2
 800bd38:	2600      	movs	r6, #0
 800bd3a:	42a6      	cmp	r6, r4
 800bd3c:	d105      	bne.n	800bd4a <__libc_init_array+0x2e>
 800bd3e:	bd70      	pop	{r4, r5, r6, pc}
 800bd40:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd44:	4798      	blx	r3
 800bd46:	3601      	adds	r6, #1
 800bd48:	e7ee      	b.n	800bd28 <__libc_init_array+0xc>
 800bd4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd4e:	4798      	blx	r3
 800bd50:	3601      	adds	r6, #1
 800bd52:	e7f2      	b.n	800bd3a <__libc_init_array+0x1e>
 800bd54:	0800bde0 	.word	0x0800bde0
 800bd58:	0800bde0 	.word	0x0800bde0
 800bd5c:	0800bde0 	.word	0x0800bde0
 800bd60:	0800bde4 	.word	0x0800bde4

0800bd64 <memcpy>:
 800bd64:	440a      	add	r2, r1
 800bd66:	4291      	cmp	r1, r2
 800bd68:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd6c:	d100      	bne.n	800bd70 <memcpy+0xc>
 800bd6e:	4770      	bx	lr
 800bd70:	b510      	push	{r4, lr}
 800bd72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd7a:	4291      	cmp	r1, r2
 800bd7c:	d1f9      	bne.n	800bd72 <memcpy+0xe>
 800bd7e:	bd10      	pop	{r4, pc}

0800bd80 <_init>:
 800bd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd82:	bf00      	nop
 800bd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd86:	bc08      	pop	{r3}
 800bd88:	469e      	mov	lr, r3
 800bd8a:	4770      	bx	lr

0800bd8c <_fini>:
 800bd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8e:	bf00      	nop
 800bd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd92:	bc08      	pop	{r3}
 800bd94:	469e      	mov	lr, r3
 800bd96:	4770      	bx	lr
